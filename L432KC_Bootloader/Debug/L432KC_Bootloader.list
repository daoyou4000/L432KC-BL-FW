
L432KC_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b20  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001cac  08001cac  00011cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cec  08001cec  0002080c  2**0
                  CONTENTS
  4 .ARM          00000000  08001cec  08001cec  0002080c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001cec  08001cec  0002080c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cec  08001cec  00011cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cf0  08001cf0  00011cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000800  08001cf4  00020800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000080c  08001d00  0002080c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000082c  08001d00  0002082c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002080c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000782b  00000000  00000000  0002083c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001559  00000000  00000000  00028067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  000295c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000608  00000000  00000000  00029c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e822  00000000  00000000  0002a288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000739d  00000000  00000000  00048aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7f2a  00000000  00000000  0004fe47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00107d71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018f4  00000000  00000000  00107dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000080c 	.word	0x2000080c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001c94 	.word	0x08001c94

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000810 	.word	0x20000810
 80001c8:	08001c94 	.word	0x08001c94

080001cc <vL432kc_DeInitAndJump>:
    application_t*  func_p;        // Program Counter
} JumpStruct;


static void vL432kc_DeInitAndJump(uint32_t u32FwAddress)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b08a      	sub	sp, #40	; 0x28
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
  uint32_t u32VectorAddress = 0;
 80001d4:	2300      	movs	r3, #0
 80001d6:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t* pu32FwFlashPointer = (uint32_t*)u32FwAddress;
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	623b      	str	r3, [r7, #32]
  uint32_t* pu32FwRamPointer = (uint32_t*)RAM_VECTOR_TABLE_BEGIN;
 80001dc:	4b3c      	ldr	r3, [pc, #240]	; (80002d0 <vL432kc_DeInitAndJump+0x104>)
 80001de:	61fb      	str	r3, [r7, #28]
  uint32_t u32FirmwareOffset = u32FwAddress - FLASH_BOOTLOADER_BEGIN;
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4a3c      	ldr	r2, [pc, #240]	; (80002d4 <vL432kc_DeInitAndJump+0x108>)
 80001e4:	1a9b      	subs	r3, r3, r2
 80001e6:	60bb      	str	r3, [r7, #8]
  uint32_t u32UnpatchedValue = 0;
 80001e8:	2300      	movs	r3, #0
 80001ea:	61bb      	str	r3, [r7, #24]
  uint32_t u32PatchedValue = 0;
 80001ec:	2300      	movs	r3, #0
 80001ee:	617b      	str	r3, [r7, #20]
  u32UnpatchedValue = u32UnpatchedValue;
  u32PatchedValue = u32PatchedValue;

  // Check if we need to do reset handler relocation. Not 100% accurate because
  // if original binary reset handler gets pushed back beyond "natural" 0x5000 border, this fails
  uint32_t u32UnalteredResetAddress = *(pu32FwFlashPointer + 1);
 80001f0:	6a3b      	ldr	r3, [r7, #32]
 80001f2:	685b      	ldr	r3, [r3, #4]
 80001f4:	613b      	str	r3, [r7, #16]

  // Cannot figure out right now what corner case could be
  if (u32UnalteredResetAddress < FLASH_FIRMWARES_EARLIEST_BEGIN)
 80001f6:	4a38      	ldr	r2, [pc, #224]	; (80002d8 <vL432kc_DeInitAndJump+0x10c>)
 80001f8:	693b      	ldr	r3, [r7, #16]
 80001fa:	4293      	cmp	r3, r2
 80001fc:	d22c      	bcs.n	8000258 <vL432kc_DeInitAndJump+0x8c>
  {
    // Detected actual firmware, so copy and patch it.

    // Copy vector table first
    while (pu32FwRamPointer < (uint32_t*)RAM_VECTOR_TABLE_END)
 80001fe:	e007      	b.n	8000210 <vL432kc_DeInitAndJump+0x44>
    {
      *(pu32FwRamPointer++) = *(pu32FwFlashPointer++);
 8000200:	6a3a      	ldr	r2, [r7, #32]
 8000202:	1d13      	adds	r3, r2, #4
 8000204:	623b      	str	r3, [r7, #32]
 8000206:	69fb      	ldr	r3, [r7, #28]
 8000208:	1d19      	adds	r1, r3, #4
 800020a:	61f9      	str	r1, [r7, #28]
 800020c:	6812      	ldr	r2, [r2, #0]
 800020e:	601a      	str	r2, [r3, #0]
    while (pu32FwRamPointer < (uint32_t*)RAM_VECTOR_TABLE_END)
 8000210:	69fb      	ldr	r3, [r7, #28]
 8000212:	4a32      	ldr	r2, [pc, #200]	; (80002dc <vL432kc_DeInitAndJump+0x110>)
 8000214:	4293      	cmp	r3, r2
 8000216:	d3f3      	bcc.n	8000200 <vL432kc_DeInitAndJump+0x34>
    // We are given  u32FwAddress = 0x8005000;
    // Firmware binary thinks it is in 0x8000000 (which is actually bootloader start address)
    // Offset is 0x8005000 - 0x8000000 eq u32FwAddress - FLASH_BOOTLOADER_BEGIN

    // Patch vector table...
    pu32FwRamPointer = (uint32_t*)RAM_VECTOR_TABLE_BEGIN;
 8000218:	4b2d      	ldr	r3, [pc, #180]	; (80002d0 <vL432kc_DeInitAndJump+0x104>)
 800021a:	61fb      	str	r3, [r7, #28]
    pu32FwRamPointer++; // .. but omit first address, it points to ram
 800021c:	69fb      	ldr	r3, [r7, #28]
 800021e:	3304      	adds	r3, #4
 8000220:	61fb      	str	r3, [r7, #28]

    // Actual patching loop
    while (pu32FwRamPointer < (uint32_t*)RAM_VECTOR_TABLE_END)
 8000222:	e012      	b.n	800024a <vL432kc_DeInitAndJump+0x7e>
    {
      if (*pu32FwRamPointer != 0)
 8000224:	69fb      	ldr	r3, [r7, #28]
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d00b      	beq.n	8000244 <vL432kc_DeInitAndJump+0x78>
      {
        u32UnpatchedValue = *pu32FwRamPointer;
 800022c:	69fb      	ldr	r3, [r7, #28]
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	61bb      	str	r3, [r7, #24]
        *pu32FwRamPointer += u32FirmwareOffset;
 8000232:	69fb      	ldr	r3, [r7, #28]
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	68bb      	ldr	r3, [r7, #8]
 8000238:	441a      	add	r2, r3
 800023a:	69fb      	ldr	r3, [r7, #28]
 800023c:	601a      	str	r2, [r3, #0]
        u32PatchedValue = *pu32FwRamPointer;
 800023e:	69fb      	ldr	r3, [r7, #28]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	617b      	str	r3, [r7, #20]
      }
      pu32FwRamPointer++;
 8000244:	69fb      	ldr	r3, [r7, #28]
 8000246:	3304      	adds	r3, #4
 8000248:	61fb      	str	r3, [r7, #28]
    while (pu32FwRamPointer < (uint32_t*)RAM_VECTOR_TABLE_END)
 800024a:	69fb      	ldr	r3, [r7, #28]
 800024c:	4a23      	ldr	r2, [pc, #140]	; (80002dc <vL432kc_DeInitAndJump+0x110>)
 800024e:	4293      	cmp	r3, r2
 8000250:	d3e8      	bcc.n	8000224 <vL432kc_DeInitAndJump+0x58>
    }
    // Firmware patches its own got in assembly upon startup

    // And lets hope for the best
    u32VectorAddress = RAM_VECTOR_TABLE_BEGIN;
 8000252:	4b1f      	ldr	r3, [pc, #124]	; (80002d0 <vL432kc_DeInitAndJump+0x104>)
 8000254:	627b      	str	r3, [r7, #36]	; 0x24
 8000256:	e001      	b.n	800025c <vL432kc_DeInitAndJump+0x90>
  }
  else
  {
    u32VectorAddress = u32FwAddress;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  // Deinitialization and jump parts from
  // https://github.com/viktorvano/STM32-Bootloader/blob/master/STM32F103C8T6_Bootloader/Core/Inc/bootloader.h
  const JumpStruct* pxJumpVector = (JumpStruct*)u32VectorAddress;
 800025c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800025e:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_DeInit(LD3_GPIO_Port, LD3_Pin);
 8000260:	2108      	movs	r1, #8
 8000262:	481f      	ldr	r0, [pc, #124]	; (80002e0 <vL432kc_DeInitAndJump+0x114>)
 8000264:	f000 fce4 	bl	8000c30 <HAL_GPIO_DeInit>
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8000268:	4b1e      	ldr	r3, [pc, #120]	; (80002e4 <vL432kc_DeInitAndJump+0x118>)
 800026a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800026c:	4a1d      	ldr	r2, [pc, #116]	; (80002e4 <vL432kc_DeInitAndJump+0x118>)
 800026e:	f023 0304 	bic.w	r3, r3, #4
 8000272:	64d3      	str	r3, [r2, #76]	; 0x4c
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8000274:	4b1b      	ldr	r3, [pc, #108]	; (80002e4 <vL432kc_DeInitAndJump+0x118>)
 8000276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000278:	4a1a      	ldr	r2, [pc, #104]	; (80002e4 <vL432kc_DeInitAndJump+0x118>)
 800027a:	f023 0301 	bic.w	r3, r3, #1
 800027e:	64d3      	str	r3, [r2, #76]	; 0x4c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8000280:	4b18      	ldr	r3, [pc, #96]	; (80002e4 <vL432kc_DeInitAndJump+0x118>)
 8000282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000284:	4a17      	ldr	r2, [pc, #92]	; (80002e4 <vL432kc_DeInitAndJump+0x118>)
 8000286:	f023 0302 	bic.w	r3, r3, #2
 800028a:	64d3      	str	r3, [r2, #76]	; 0x4c
  HAL_RCC_DeInit();
 800028c:	f000 fe40 	bl	8000f10 <HAL_RCC_DeInit>
  HAL_DeInit();
 8000290:	f000 f9e6 	bl	8000660 <HAL_DeInit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000294:	b672      	cpsid	i
}
 8000296:	bf00      	nop
  __disable_irq();

  // Store firmware offset to r12
  asm ("ldr r12, %0;"
 8000298:	f8d7 c008 	ldr.w	ip, [r7, #8]
      :"=m"(u32FirmwareOffset)
      :
      :);

  // Store firmware actual address to r11
  asm ("ldr r11, %0;"
 800029c:	f8d7 b004 	ldr.w	fp, [r7, #4]
      :"=m"(u32FwAddress)
      :
      :);


  SysTick->CTRL = 0;
 80002a0:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <vL432kc_DeInitAndJump+0x11c>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 80002a6:	4b10      	ldr	r3, [pc, #64]	; (80002e8 <vL432kc_DeInitAndJump+0x11c>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 80002ac:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <vL432kc_DeInitAndJump+0x11c>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	609a      	str	r2, [r3, #8]

  SCB->VTOR = u32VectorAddress;
 80002b2:	4a0e      	ldr	r2, [pc, #56]	; (80002ec <vL432kc_DeInitAndJump+0x120>)
 80002b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002b6:	6093      	str	r3, [r2, #8]

  // Actual jump
  asm("msr msp, %0; bx %1;" : : "r"(pxJumpVector->stack_addr), "r"(pxJumpVector->func_p));
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	68fa      	ldr	r2, [r7, #12]
 80002be:	6852      	ldr	r2, [r2, #4]
 80002c0:	f383 8808 	msr	MSP, r3
 80002c4:	4710      	bx	r2
}
 80002c6:	bf00      	nop
 80002c8:	3728      	adds	r7, #40	; 0x28
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	20000000 	.word	0x20000000
 80002d4:	08000000 	.word	0x08000000
 80002d8:	08005000 	.word	0x08005000
 80002dc:	2000018c 	.word	0x2000018c
 80002e0:	48000400 	.word	0x48000400
 80002e4:	40021000 	.word	0x40021000
 80002e8:	e000e010 	.word	0xe000e010
 80002ec:	e000ed00 	.word	0xe000ed00

080002f0 <main>:

//extern char __KERNEL_BEGIN__;


int main(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
  uint32_t u32LedCounter = 0;
 80002f6:	2300      	movs	r3, #0
 80002f8:	607b      	str	r3, [r7, #4]
  HAL_Init();
 80002fa:	f000 f998 	bl	800062e <HAL_Init>
  SystemClock_Config();
 80002fe:	f000 f82f 	bl	8000360 <SystemClock_Config>
  MX_GPIO_Init();
 8000302:	f000 f88f 	bl	8000424 <MX_GPIO_Init>

  // Run high frequency for a brief while, then jump
  for (u32LedCounter = 0; u32LedCounter < 0x120000; u32LedCounter++)
 8000306:	2300      	movs	r3, #0
 8000308:	607b      	str	r3, [r7, #4]
 800030a:	e011      	b.n	8000330 <main+0x40>
  {
    if ((u32LedCounter % 0xFFFF) == 0)
 800030c:	6879      	ldr	r1, [r7, #4]
 800030e:	4b11      	ldr	r3, [pc, #68]	; (8000354 <main+0x64>)
 8000310:	fba3 2301 	umull	r2, r3, r3, r1
 8000314:	0bda      	lsrs	r2, r3, #15
 8000316:	4613      	mov	r3, r2
 8000318:	041b      	lsls	r3, r3, #16
 800031a:	1a9b      	subs	r3, r3, r2
 800031c:	1aca      	subs	r2, r1, r3
 800031e:	2a00      	cmp	r2, #0
 8000320:	d103      	bne.n	800032a <main+0x3a>
    {
      HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000322:	2108      	movs	r1, #8
 8000324:	480c      	ldr	r0, [pc, #48]	; (8000358 <main+0x68>)
 8000326:	f000 fd65 	bl	8000df4 <HAL_GPIO_TogglePin>
  for (u32LedCounter = 0; u32LedCounter < 0x120000; u32LedCounter++)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	3301      	adds	r3, #1
 800032e:	607b      	str	r3, [r7, #4]
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8000336:	d3e9      	bcc.n	800030c <main+0x1c>
    }
  }
  // Leave LED off
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000338:	2200      	movs	r2, #0
 800033a:	2108      	movs	r1, #8
 800033c:	4806      	ldr	r0, [pc, #24]	; (8000358 <main+0x68>)
 800033e:	f000 fd41 	bl	8000dc4 <HAL_GPIO_WritePin>
  // Deinit and jump

  //vL432kc_DeInitAndJump(0x8000000); // 0x8000000 here => bootloader jumps to itself :)
  //vL432kc_DeInitAndJump(0x8007000); // << works if Firmware anywhere flashed here
  vL432kc_DeInitAndJump(0x8005000); // << works if Firmware anywhere flashed here
 8000342:	4806      	ldr	r0, [pc, #24]	; (800035c <main+0x6c>)
 8000344:	f7ff ff42 	bl	80001cc <vL432kc_DeInitAndJump>
 8000348:	2300      	movs	r3, #0
}
 800034a:	4618      	mov	r0, r3
 800034c:	3708      	adds	r7, #8
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	80008001 	.word	0x80008001
 8000358:	48000400 	.word	0x48000400
 800035c:	08005000 	.word	0x08005000

08000360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static void SystemClock_Config(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b096      	sub	sp, #88	; 0x58
 8000364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000366:	f107 0314 	add.w	r3, r7, #20
 800036a:	2244      	movs	r2, #68	; 0x44
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f001 fc88 	bl	8001c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000374:	463b      	mov	r3, r7
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
 8000380:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000382:	f000 fd51 	bl	8000e28 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000386:	4b26      	ldr	r3, [pc, #152]	; (8000420 <SystemClock_Config+0xc0>)
 8000388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800038c:	4a24      	ldr	r2, [pc, #144]	; (8000420 <SystemClock_Config+0xc0>)
 800038e:	f023 0318 	bic.w	r3, r3, #24
 8000392:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000396:	2314      	movs	r3, #20
 8000398:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800039a:	2301      	movs	r3, #1
 800039c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800039e:	2301      	movs	r3, #1
 80003a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80003a2:	2300      	movs	r3, #0
 80003a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80003a6:	2360      	movs	r3, #96	; 0x60
 80003a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003aa:	2302      	movs	r3, #2
 80003ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80003ae:	2301      	movs	r3, #1
 80003b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003b2:	2301      	movs	r3, #1
 80003b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80003b6:	2310      	movs	r3, #16
 80003b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80003ba:	2307      	movs	r3, #7
 80003bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003be:	2302      	movs	r3, #2
 80003c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003c2:	2302      	movs	r3, #2
 80003c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c6:	f107 0314 	add.w	r3, r7, #20
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 fe38 	bl	8001040 <HAL_RCC_OscConfig>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80003d6:	f000 f86f 	bl	80004b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003da:	230f      	movs	r3, #15
 80003dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003de:	2303      	movs	r3, #3
 80003e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e2:	2300      	movs	r3, #0
 80003e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003e6:	2300      	movs	r3, #0
 80003e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ea:	2300      	movs	r3, #0
 80003ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003ee:	463b      	mov	r3, r7
 80003f0:	2101      	movs	r1, #1
 80003f2:	4618      	mov	r0, r3
 80003f4:	f001 fa44 	bl	8001880 <HAL_RCC_ClockConfig>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80003fe:	f000 f85b 	bl	80004b8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000402:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000406:	f000 fd2d 	bl	8000e64 <HAL_PWREx_ControlVoltageScaling>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000410:	f000 f852 	bl	80004b8 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000414:	f001 fc02 	bl	8001c1c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000418:	bf00      	nop
 800041a:	3758      	adds	r7, #88	; 0x58
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	40021000 	.word	0x40021000

08000424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b088      	sub	sp, #32
 8000428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042a:	f107 030c 	add.w	r3, r7, #12
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	60da      	str	r2, [r3, #12]
 8000438:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800043a:	4b1d      	ldr	r3, [pc, #116]	; (80004b0 <MX_GPIO_Init+0x8c>)
 800043c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043e:	4a1c      	ldr	r2, [pc, #112]	; (80004b0 <MX_GPIO_Init+0x8c>)
 8000440:	f043 0304 	orr.w	r3, r3, #4
 8000444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000446:	4b1a      	ldr	r3, [pc, #104]	; (80004b0 <MX_GPIO_Init+0x8c>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044a:	f003 0304 	and.w	r3, r3, #4
 800044e:	60bb      	str	r3, [r7, #8]
 8000450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000452:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <MX_GPIO_Init+0x8c>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000456:	4a16      	ldr	r2, [pc, #88]	; (80004b0 <MX_GPIO_Init+0x8c>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800045e:	4b14      	ldr	r3, [pc, #80]	; (80004b0 <MX_GPIO_Init+0x8c>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <MX_GPIO_Init+0x8c>)
 800046c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800046e:	4a10      	ldr	r2, [pc, #64]	; (80004b0 <MX_GPIO_Init+0x8c>)
 8000470:	f043 0302 	orr.w	r3, r3, #2
 8000474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000476:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <MX_GPIO_Init+0x8c>)
 8000478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047a:	f003 0302 	and.w	r3, r3, #2
 800047e:	603b      	str	r3, [r7, #0]
 8000480:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000482:	2200      	movs	r2, #0
 8000484:	2108      	movs	r1, #8
 8000486:	480b      	ldr	r0, [pc, #44]	; (80004b4 <MX_GPIO_Init+0x90>)
 8000488:	f000 fc9c 	bl	8000dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800048c:	2308      	movs	r3, #8
 800048e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000490:	2301      	movs	r3, #1
 8000492:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000494:	2300      	movs	r3, #0
 8000496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000498:	2300      	movs	r3, #0
 800049a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800049c:	f107 030c 	add.w	r3, r7, #12
 80004a0:	4619      	mov	r1, r3
 80004a2:	4804      	ldr	r0, [pc, #16]	; (80004b4 <MX_GPIO_Init+0x90>)
 80004a4:	f000 fa5a 	bl	800095c <HAL_GPIO_Init>

}
 80004a8:	bf00      	nop
 80004aa:	3720      	adds	r7, #32
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	40021000 	.word	0x40021000
 80004b4:	48000400 	.word	0x48000400

080004b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80004bc:	b672      	cpsid	i
}
 80004be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <Error_Handler+0x8>
	...

080004c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ca:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <HAL_MspInit+0x44>)
 80004cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004ce:	4a0e      	ldr	r2, [pc, #56]	; (8000508 <HAL_MspInit+0x44>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	6613      	str	r3, [r2, #96]	; 0x60
 80004d6:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <HAL_MspInit+0x44>)
 80004d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e2:	4b09      	ldr	r3, [pc, #36]	; (8000508 <HAL_MspInit+0x44>)
 80004e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004e6:	4a08      	ldr	r2, [pc, #32]	; (8000508 <HAL_MspInit+0x44>)
 80004e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004ec:	6593      	str	r3, [r2, #88]	; 0x58
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <HAL_MspInit+0x44>)
 80004f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004f6:	603b      	str	r3, [r7, #0]
 80004f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	40021000 	.word	0x40021000

0800050c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000510:	e7fe      	b.n	8000510 <NMI_Handler+0x4>
	...

08000514 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  uint32_t u32Cfsr = *((uint32_t*)0xE000ED28);
 800051a:	4b03      	ldr	r3, [pc, #12]	; (8000528 <HardFault_Handler+0x14>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	607b      	str	r3, [r7, #4]
  u32Cfsr += 0; // To stop compile nags

  uint32_t u32Bfar = *((uint32_t*)0xE000ED38);
 8000520:	4b02      	ldr	r3, [pc, #8]	; (800052c <HardFault_Handler+0x18>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	603b      	str	r3, [r7, #0]
  u32Bfar += 0; // To stop compile nags

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000526:	e7fe      	b.n	8000526 <HardFault_Handler+0x12>
 8000528:	e000ed28 	.word	0xe000ed28
 800052c:	e000ed38 	.word	0xe000ed38

08000530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000534:	e7fe      	b.n	8000534 <MemManage_Handler+0x4>

08000536 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800053a:	e7fe      	b.n	800053a <BusFault_Handler+0x4>

0800053c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000540:	e7fe      	b.n	8000540 <UsageFault_Handler+0x4>

08000542 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr

0800055e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000570:	f000 f8ee 	bl	8000750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}

08000578 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800057c:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <SystemInit+0x5c>)
 800057e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000582:	4a14      	ldr	r2, [pc, #80]	; (80005d4 <SystemInit+0x5c>)
 8000584:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000588:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800058c:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <SystemInit+0x60>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a11      	ldr	r2, [pc, #68]	; (80005d8 <SystemInit+0x60>)
 8000592:	f043 0301 	orr.w	r3, r3, #1
 8000596:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000598:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <SystemInit+0x60>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800059e:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <SystemInit+0x60>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a0d      	ldr	r2, [pc, #52]	; (80005d8 <SystemInit+0x60>)
 80005a4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80005a8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80005ac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80005ae:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <SystemInit+0x60>)
 80005b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005b4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005b6:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <SystemInit+0x60>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <SystemInit+0x60>)
 80005bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005c0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80005c2:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <SystemInit+0x60>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	619a      	str	r2, [r3, #24]
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	e000ed00 	.word	0xe000ed00
 80005d8:	40021000 	.word	0x40021000

080005dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000614 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005e0:	f7ff ffca 	bl	8000578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80005e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80005e6:	e003      	b.n	80005f0 <LoopCopyDataInit>

080005e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80005e8:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80005ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80005ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80005ee:	3104      	adds	r1, #4

080005f0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80005f0:	480a      	ldr	r0, [pc, #40]	; (800061c <LoopForever+0xa>)
	ldr	r3, =_edata
 80005f2:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <LoopForever+0xe>)
	adds	r2, r0, r1
 80005f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80005f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80005f8:	d3f6      	bcc.n	80005e8 <CopyDataInit>
	ldr	r2, =_sbss
 80005fa:	4a0a      	ldr	r2, [pc, #40]	; (8000624 <LoopForever+0x12>)
	b	LoopFillZerobss
 80005fc:	e002      	b.n	8000604 <LoopFillZerobss>

080005fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80005fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000600:	f842 3b04 	str.w	r3, [r2], #4

08000604 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <LoopForever+0x16>)
	cmp	r2, r3
 8000606:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000608:	d3f9      	bcc.n	80005fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800060a:	f001 fb17 	bl	8001c3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800060e:	f7ff fe6f 	bl	80002f0 <main>

08000612 <LoopForever>:

LoopForever:
    b LoopForever
 8000612:	e7fe      	b.n	8000612 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000614:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000618:	08001cf4 	.word	0x08001cf4
	ldr	r0, =_sdata
 800061c:	20000800 	.word	0x20000800
	ldr	r3, =_edata
 8000620:	2000080c 	.word	0x2000080c
	ldr	r2, =_sbss
 8000624:	2000080c 	.word	0x2000080c
	ldr	r3, = _ebss
 8000628:	2000082c 	.word	0x2000082c

0800062c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800062c:	e7fe      	b.n	800062c <ADC1_IRQHandler>

0800062e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800062e:	b580      	push	{r7, lr}
 8000630:	b082      	sub	sp, #8
 8000632:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000634:	2300      	movs	r3, #0
 8000636:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000638:	2003      	movs	r0, #3
 800063a:	f000 f95b 	bl	80008f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800063e:	2000      	movs	r0, #0
 8000640:	f000 f84a 	bl	80006d8 <HAL_InitTick>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d002      	beq.n	8000650 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800064a:	2301      	movs	r3, #1
 800064c:	71fb      	strb	r3, [r7, #7]
 800064e:	e001      	b.n	8000654 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000650:	f7ff ff38 	bl	80004c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000654:	79fb      	ldrb	r3, [r7, #7]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <HAL_DeInit>:
  * @brief De-initialize common part of the HAL and stop the source of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <HAL_DeInit+0x64>)
 8000666:	f04f 32ff 	mov.w	r2, #4294967295
 800066a:	639a      	str	r2, [r3, #56]	; 0x38
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <HAL_DeInit+0x64>)
 800066e:	f04f 32ff 	mov.w	r2, #4294967295
 8000672:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_RCC_APB1_RELEASE_RESET();
 8000674:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <HAL_DeInit+0x64>)
 8000676:	2200      	movs	r2, #0
 8000678:	639a      	str	r2, [r3, #56]	; 0x38
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <HAL_DeInit+0x64>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c

  __HAL_RCC_APB2_FORCE_RESET();
 8000680:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <HAL_DeInit+0x64>)
 8000682:	f04f 32ff 	mov.w	r2, #4294967295
 8000686:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_RCC_APB2_RELEASE_RESET();
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <HAL_DeInit+0x64>)
 800068a:	2200      	movs	r2, #0
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  __HAL_RCC_AHB1_FORCE_RESET();
 800068e:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <HAL_DeInit+0x64>)
 8000690:	f04f 32ff 	mov.w	r2, #4294967295
 8000694:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <HAL_DeInit+0x64>)
 8000698:	2200      	movs	r2, #0
 800069a:	629a      	str	r2, [r3, #40]	; 0x28

  __HAL_RCC_AHB2_FORCE_RESET();
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <HAL_DeInit+0x64>)
 800069e:	f04f 32ff 	mov.w	r2, #4294967295
 80006a2:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_AHB2_RELEASE_RESET();
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <HAL_DeInit+0x64>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	62da      	str	r2, [r3, #44]	; 0x2c

  __HAL_RCC_AHB3_FORCE_RESET();
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <HAL_DeInit+0x64>)
 80006ac:	f04f 32ff 	mov.w	r2, #4294967295
 80006b0:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_AHB3_RELEASE_RESET();
 80006b2:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <HAL_DeInit+0x64>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	631a      	str	r2, [r3, #48]	; 0x30

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80006b8:	f000 f806 	bl	80006c8 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 80006bc:	2300      	movs	r3, #0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40021000 	.word	0x40021000

080006c8 <HAL_MspDeInit>:
/**
  * @brief  DeInitialize the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
	...

080006d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006e0:	2300      	movs	r3, #0
 80006e2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80006e4:	4b17      	ldr	r3, [pc, #92]	; (8000744 <HAL_InitTick+0x6c>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d023      	beq.n	8000734 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006ec:	4b16      	ldr	r3, [pc, #88]	; (8000748 <HAL_InitTick+0x70>)
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <HAL_InitTick+0x6c>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	4619      	mov	r1, r3
 80006f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80006fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000702:	4618      	mov	r0, r3
 8000704:	f000 f91d 	bl	8000942 <HAL_SYSTICK_Config>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d10f      	bne.n	800072e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2b0f      	cmp	r3, #15
 8000712:	d809      	bhi.n	8000728 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000714:	2200      	movs	r2, #0
 8000716:	6879      	ldr	r1, [r7, #4]
 8000718:	f04f 30ff 	mov.w	r0, #4294967295
 800071c:	f000 f8f5 	bl	800090a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000720:	4a0a      	ldr	r2, [pc, #40]	; (800074c <HAL_InitTick+0x74>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6013      	str	r3, [r2, #0]
 8000726:	e007      	b.n	8000738 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000728:	2301      	movs	r3, #1
 800072a:	73fb      	strb	r3, [r7, #15]
 800072c:	e004      	b.n	8000738 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800072e:	2301      	movs	r3, #1
 8000730:	73fb      	strb	r3, [r7, #15]
 8000732:	e001      	b.n	8000738 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000734:	2301      	movs	r3, #1
 8000736:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000738:	7bfb      	ldrb	r3, [r7, #15]
}
 800073a:	4618      	mov	r0, r3
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000808 	.word	0x20000808
 8000748:	20000800 	.word	0x20000800
 800074c:	20000804 	.word	0x20000804

08000750 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <HAL_IncTick+0x20>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <HAL_IncTick+0x24>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4413      	add	r3, r2
 8000760:	4a04      	ldr	r2, [pc, #16]	; (8000774 <HAL_IncTick+0x24>)
 8000762:	6013      	str	r3, [r2, #0]
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	20000808 	.word	0x20000808
 8000774:	20000828 	.word	0x20000828

08000778 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  return uwTick;
 800077c:	4b03      	ldr	r3, [pc, #12]	; (800078c <HAL_GetTick+0x14>)
 800077e:	681b      	ldr	r3, [r3, #0]
}
 8000780:	4618      	mov	r0, r3
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	20000828 	.word	0x20000828

08000790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <__NVIC_SetPriorityGrouping+0x44>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007a6:	68ba      	ldr	r2, [r7, #8]
 80007a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007ac:	4013      	ands	r3, r2
 80007ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007c2:	4a04      	ldr	r2, [pc, #16]	; (80007d4 <__NVIC_SetPriorityGrouping+0x44>)
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	60d3      	str	r3, [r2, #12]
}
 80007c8:	bf00      	nop
 80007ca:	3714      	adds	r7, #20
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007dc:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <__NVIC_GetPriorityGrouping+0x18>)
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	0a1b      	lsrs	r3, r3, #8
 80007e2:	f003 0307 	and.w	r3, r3, #7
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	6039      	str	r1, [r7, #0]
 80007fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000804:	2b00      	cmp	r3, #0
 8000806:	db0a      	blt.n	800081e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	b2da      	uxtb	r2, r3
 800080c:	490c      	ldr	r1, [pc, #48]	; (8000840 <__NVIC_SetPriority+0x4c>)
 800080e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000812:	0112      	lsls	r2, r2, #4
 8000814:	b2d2      	uxtb	r2, r2
 8000816:	440b      	add	r3, r1
 8000818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800081c:	e00a      	b.n	8000834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4908      	ldr	r1, [pc, #32]	; (8000844 <__NVIC_SetPriority+0x50>)
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	f003 030f 	and.w	r3, r3, #15
 800082a:	3b04      	subs	r3, #4
 800082c:	0112      	lsls	r2, r2, #4
 800082e:	b2d2      	uxtb	r2, r2
 8000830:	440b      	add	r3, r1
 8000832:	761a      	strb	r2, [r3, #24]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	e000e100 	.word	0xe000e100
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000848:	b480      	push	{r7}
 800084a:	b089      	sub	sp, #36	; 0x24
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	f003 0307 	and.w	r3, r3, #7
 800085a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	f1c3 0307 	rsb	r3, r3, #7
 8000862:	2b04      	cmp	r3, #4
 8000864:	bf28      	it	cs
 8000866:	2304      	movcs	r3, #4
 8000868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	3304      	adds	r3, #4
 800086e:	2b06      	cmp	r3, #6
 8000870:	d902      	bls.n	8000878 <NVIC_EncodePriority+0x30>
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	3b03      	subs	r3, #3
 8000876:	e000      	b.n	800087a <NVIC_EncodePriority+0x32>
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800087c:	f04f 32ff 	mov.w	r2, #4294967295
 8000880:	69bb      	ldr	r3, [r7, #24]
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	43da      	mvns	r2, r3
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	401a      	ands	r2, r3
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000890:	f04f 31ff 	mov.w	r1, #4294967295
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	fa01 f303 	lsl.w	r3, r1, r3
 800089a:	43d9      	mvns	r1, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a0:	4313      	orrs	r3, r2
         );
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3724      	adds	r7, #36	; 0x24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
	...

080008b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008c0:	d301      	bcc.n	80008c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008c2:	2301      	movs	r3, #1
 80008c4:	e00f      	b.n	80008e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008c6:	4a0a      	ldr	r2, [pc, #40]	; (80008f0 <SysTick_Config+0x40>)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ce:	210f      	movs	r1, #15
 80008d0:	f04f 30ff 	mov.w	r0, #4294967295
 80008d4:	f7ff ff8e 	bl	80007f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <SysTick_Config+0x40>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008de:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <SysTick_Config+0x40>)
 80008e0:	2207      	movs	r2, #7
 80008e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	e000e010 	.word	0xe000e010

080008f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff ff47 	bl	8000790 <__NVIC_SetPriorityGrouping>
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b086      	sub	sp, #24
 800090e:	af00      	add	r7, sp, #0
 8000910:	4603      	mov	r3, r0
 8000912:	60b9      	str	r1, [r7, #8]
 8000914:	607a      	str	r2, [r7, #4]
 8000916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800091c:	f7ff ff5c 	bl	80007d8 <__NVIC_GetPriorityGrouping>
 8000920:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	68b9      	ldr	r1, [r7, #8]
 8000926:	6978      	ldr	r0, [r7, #20]
 8000928:	f7ff ff8e 	bl	8000848 <NVIC_EncodePriority>
 800092c:	4602      	mov	r2, r0
 800092e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000932:	4611      	mov	r1, r2
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ff5d 	bl	80007f4 <__NVIC_SetPriority>
}
 800093a:	bf00      	nop
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff ffb0 	bl	80008b0 <SysTick_Config>
 8000950:	4603      	mov	r3, r0
}
 8000952:	4618      	mov	r0, r3
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800095c:	b480      	push	{r7}
 800095e:	b087      	sub	sp, #28
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800096a:	e148      	b.n	8000bfe <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	2101      	movs	r1, #1
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	fa01 f303 	lsl.w	r3, r1, r3
 8000978:	4013      	ands	r3, r2
 800097a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	2b00      	cmp	r3, #0
 8000980:	f000 813a 	beq.w	8000bf8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d00b      	beq.n	80009a4 <HAL_GPIO_Init+0x48>
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	2b02      	cmp	r3, #2
 8000992:	d007      	beq.n	80009a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000998:	2b11      	cmp	r3, #17
 800099a:	d003      	beq.n	80009a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	2b12      	cmp	r3, #18
 80009a2:	d130      	bne.n	8000a06 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	2203      	movs	r2, #3
 80009b0:	fa02 f303 	lsl.w	r3, r2, r3
 80009b4:	43db      	mvns	r3, r3
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	4013      	ands	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	68da      	ldr	r2, [r3, #12]
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009da:	2201      	movs	r2, #1
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43db      	mvns	r3, r3
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	4013      	ands	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	091b      	lsrs	r3, r3, #4
 80009f0:	f003 0201 	and.w	r2, r3, #1
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	68db      	ldr	r3, [r3, #12]
 8000a0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	2203      	movs	r2, #3
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	43db      	mvns	r3, r3
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	689a      	ldr	r2, [r3, #8]
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	2b02      	cmp	r3, #2
 8000a3c:	d003      	beq.n	8000a46 <HAL_GPIO_Init+0xea>
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	2b12      	cmp	r3, #18
 8000a44:	d123      	bne.n	8000a8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	08da      	lsrs	r2, r3, #3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	3208      	adds	r2, #8
 8000a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	220f      	movs	r2, #15
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	43db      	mvns	r3, r3
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	4013      	ands	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	691a      	ldr	r2, [r3, #16]
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	f003 0307 	and.w	r3, r3, #7
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	08da      	lsrs	r2, r3, #3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3208      	adds	r2, #8
 8000a88:	6939      	ldr	r1, [r7, #16]
 8000a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	2203      	movs	r2, #3
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f003 0203 	and.w	r2, r3, #3
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	f000 8094 	beq.w	8000bf8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad0:	4b52      	ldr	r3, [pc, #328]	; (8000c1c <HAL_GPIO_Init+0x2c0>)
 8000ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad4:	4a51      	ldr	r2, [pc, #324]	; (8000c1c <HAL_GPIO_Init+0x2c0>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	6613      	str	r3, [r2, #96]	; 0x60
 8000adc:	4b4f      	ldr	r3, [pc, #316]	; (8000c1c <HAL_GPIO_Init+0x2c0>)
 8000ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ae8:	4a4d      	ldr	r2, [pc, #308]	; (8000c20 <HAL_GPIO_Init+0x2c4>)
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	089b      	lsrs	r3, r3, #2
 8000aee:	3302      	adds	r3, #2
 8000af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	f003 0303 	and.w	r3, r3, #3
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	220f      	movs	r2, #15
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	43db      	mvns	r3, r3
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b12:	d00d      	beq.n	8000b30 <HAL_GPIO_Init+0x1d4>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a43      	ldr	r2, [pc, #268]	; (8000c24 <HAL_GPIO_Init+0x2c8>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d007      	beq.n	8000b2c <HAL_GPIO_Init+0x1d0>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a42      	ldr	r2, [pc, #264]	; (8000c28 <HAL_GPIO_Init+0x2cc>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d101      	bne.n	8000b28 <HAL_GPIO_Init+0x1cc>
 8000b24:	2302      	movs	r3, #2
 8000b26:	e004      	b.n	8000b32 <HAL_GPIO_Init+0x1d6>
 8000b28:	2307      	movs	r3, #7
 8000b2a:	e002      	b.n	8000b32 <HAL_GPIO_Init+0x1d6>
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e000      	b.n	8000b32 <HAL_GPIO_Init+0x1d6>
 8000b30:	2300      	movs	r3, #0
 8000b32:	697a      	ldr	r2, [r7, #20]
 8000b34:	f002 0203 	and.w	r2, r2, #3
 8000b38:	0092      	lsls	r2, r2, #2
 8000b3a:	4093      	lsls	r3, r2
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b42:	4937      	ldr	r1, [pc, #220]	; (8000c20 <HAL_GPIO_Init+0x2c4>)
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	089b      	lsrs	r3, r3, #2
 8000b48:	3302      	adds	r3, #2
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b50:	4b36      	ldr	r3, [pc, #216]	; (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d003      	beq.n	8000b74 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b74:	4a2d      	ldr	r2, [pc, #180]	; (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000b7a:	4b2c      	ldr	r3, [pc, #176]	; (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	43db      	mvns	r3, r3
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	4013      	ands	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d003      	beq.n	8000b9e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b9e:	4a23      	ldr	r2, [pc, #140]	; (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ba4:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	43db      	mvns	r3, r3
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d003      	beq.n	8000bc8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000bc8:	4a18      	ldr	r2, [pc, #96]	; (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000bce:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d003      	beq.n	8000bf2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	fa22 f303 	lsr.w	r3, r2, r3
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	f47f aeaf 	bne.w	800096c <HAL_GPIO_Init+0x10>
  }
}
 8000c0e:	bf00      	nop
 8000c10:	bf00      	nop
 8000c12:	371c      	adds	r7, #28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	40010000 	.word	0x40010000
 8000c24:	48000400 	.word	0x48000400
 8000c28:	48000800 	.word	0x48000800
 8000c2c:	40010400 	.word	0x40010400

08000c30 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b087      	sub	sp, #28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8000c3e:	e0ab      	b.n	8000d98 <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000c40:	2201      	movs	r2, #1
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	683a      	ldr	r2, [r7, #0]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	f000 809e 	beq.w	8000d92 <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8000c56:	4a57      	ldr	r2, [pc, #348]	; (8000db4 <HAL_GPIO_DeInit+0x184>)
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	089b      	lsrs	r3, r3, #2
 8000c5c:	3302      	adds	r3, #2
 8000c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c62:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	f003 0303 	and.w	r3, r3, #3
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	220f      	movs	r2, #15
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	4013      	ands	r3, r2
 8000c76:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c7e:	d00d      	beq.n	8000c9c <HAL_GPIO_DeInit+0x6c>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a4d      	ldr	r2, [pc, #308]	; (8000db8 <HAL_GPIO_DeInit+0x188>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d007      	beq.n	8000c98 <HAL_GPIO_DeInit+0x68>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a4c      	ldr	r2, [pc, #304]	; (8000dbc <HAL_GPIO_DeInit+0x18c>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d101      	bne.n	8000c94 <HAL_GPIO_DeInit+0x64>
 8000c90:	2302      	movs	r3, #2
 8000c92:	e004      	b.n	8000c9e <HAL_GPIO_DeInit+0x6e>
 8000c94:	2307      	movs	r3, #7
 8000c96:	e002      	b.n	8000c9e <HAL_GPIO_DeInit+0x6e>
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e000      	b.n	8000c9e <HAL_GPIO_DeInit+0x6e>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	f002 0203 	and.w	r2, r2, #3
 8000ca4:	0092      	lsls	r2, r2, #2
 8000ca6:	4093      	lsls	r3, r2
 8000ca8:	68fa      	ldr	r2, [r7, #12]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d132      	bne.n	8000d14 <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8000cae:	4b44      	ldr	r3, [pc, #272]	; (8000dc0 <HAL_GPIO_DeInit+0x190>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	4942      	ldr	r1, [pc, #264]	; (8000dc0 <HAL_GPIO_DeInit+0x190>)
 8000cb8:	4013      	ands	r3, r2
 8000cba:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8000cbc:	4b40      	ldr	r3, [pc, #256]	; (8000dc0 <HAL_GPIO_DeInit+0x190>)
 8000cbe:	685a      	ldr	r2, [r3, #4]
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	493e      	ldr	r1, [pc, #248]	; (8000dc0 <HAL_GPIO_DeInit+0x190>)
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8000cca:	4b3d      	ldr	r3, [pc, #244]	; (8000dc0 <HAL_GPIO_DeInit+0x190>)
 8000ccc:	689a      	ldr	r2, [r3, #8]
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	493b      	ldr	r1, [pc, #236]	; (8000dc0 <HAL_GPIO_DeInit+0x190>)
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8000cd8:	4b39      	ldr	r3, [pc, #228]	; (8000dc0 <HAL_GPIO_DeInit+0x190>)
 8000cda:	68da      	ldr	r2, [r3, #12]
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	4937      	ldr	r1, [pc, #220]	; (8000dc0 <HAL_GPIO_DeInit+0x190>)
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	f003 0303 	and.w	r3, r3, #3
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	220f      	movs	r2, #15
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8000cf6:	4a2f      	ldr	r2, [pc, #188]	; (8000db4 <HAL_GPIO_DeInit+0x184>)
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	089b      	lsrs	r3, r3, #2
 8000cfc:	3302      	adds	r3, #2
 8000cfe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	43da      	mvns	r2, r3
 8000d06:	482b      	ldr	r0, [pc, #172]	; (8000db4 <HAL_GPIO_DeInit+0x184>)
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	089b      	lsrs	r3, r3, #2
 8000d0c:	400a      	ands	r2, r1
 8000d0e:	3302      	adds	r3, #2
 8000d10:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	2103      	movs	r1, #3
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	431a      	orrs	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	08da      	lsrs	r2, r3, #3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3208      	adds	r2, #8
 8000d30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	220f      	movs	r2, #15
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43db      	mvns	r3, r3
 8000d44:	697a      	ldr	r2, [r7, #20]
 8000d46:	08d2      	lsrs	r2, r2, #3
 8000d48:	4019      	ands	r1, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	3208      	adds	r2, #8
 8000d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	689a      	ldr	r2, [r3, #8]
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	2103      	movs	r1, #3
 8000d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	401a      	ands	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685a      	ldr	r2, [r3, #4]
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	fa01 f303 	lsl.w	r3, r1, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	401a      	ands	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	68da      	ldr	r2, [r3, #12]
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	2103      	movs	r1, #3
 8000d86:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	401a      	ands	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	3301      	adds	r3, #1
 8000d96:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8000d98:	683a      	ldr	r2, [r7, #0]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	f47f af4d 	bne.w	8000c40 <HAL_GPIO_DeInit+0x10>
  }
}
 8000da6:	bf00      	nop
 8000da8:	bf00      	nop
 8000daa:	371c      	adds	r7, #28
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	40010000 	.word	0x40010000
 8000db8:	48000400 	.word	0x48000400
 8000dbc:	48000800 	.word	0x48000800
 8000dc0:	40010400 	.word	0x40010400

08000dc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	807b      	strh	r3, [r7, #2]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dd4:	787b      	ldrb	r3, [r7, #1]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d003      	beq.n	8000de2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dda:	887a      	ldrh	r2, [r7, #2]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000de0:	e002      	b.n	8000de8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000de2:	887a      	ldrh	r2, [r7, #2]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e06:	887a      	ldrh	r2, [r7, #2]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	041a      	lsls	r2, r3, #16
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	43d9      	mvns	r1, r3
 8000e12:	887b      	ldrh	r3, [r7, #2]
 8000e14:	400b      	ands	r3, r1
 8000e16:	431a      	orrs	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	619a      	str	r2, [r3, #24]
}
 8000e1c:	bf00      	nop
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	40007000 	.word	0x40007000

08000e48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <HAL_PWREx_GetVoltageRange+0x18>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40007000 	.word	0x40007000

08000e64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e72:	d130      	bne.n	8000ed6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e74:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e80:	d038      	beq.n	8000ef4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e82:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e8a:	4a1e      	ldr	r2, [pc, #120]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e90:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e92:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2232      	movs	r2, #50	; 0x32
 8000e98:	fb02 f303 	mul.w	r3, r2, r3
 8000e9c:	4a1b      	ldr	r2, [pc, #108]	; (8000f0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea2:	0c9b      	lsrs	r3, r3, #18
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ea8:	e002      	b.n	8000eb0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	3b01      	subs	r3, #1
 8000eae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eb2:	695b      	ldr	r3, [r3, #20]
 8000eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ebc:	d102      	bne.n	8000ec4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1f2      	bne.n	8000eaa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ed0:	d110      	bne.n	8000ef4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e00f      	b.n	8000ef6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ee2:	d007      	beq.n	8000ef4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ee4:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000eec:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ef2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40007000 	.word	0x40007000
 8000f08:	20000800 	.word	0x20000800
 8000f0c:	431bde83 	.word	0x431bde83

08000f10 <HAL_RCC_DeInit>:
  *            - Peripheral clock sources
  *            - LSI, LSE and RTC clocks (Backup domain)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Reset to default System clock */
  /* Set MSION bit */
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000f16:	4b45      	ldr	r3, [pc, #276]	; (800102c <HAL_RCC_DeInit+0x11c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a44      	ldr	r2, [pc, #272]	; (800102c <HAL_RCC_DeInit+0x11c>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6013      	str	r3, [r2, #0]

  /* Insure MSIRDY bit is set before writing default MSIRANGE value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8000f22:	f7ff fc29 	bl	8000778 <HAL_GetTick>
 8000f26:	6078      	str	r0, [r7, #4]

  /* Wait till MSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f28:	e008      	b.n	8000f3c <HAL_RCC_DeInit+0x2c>
  {
    if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f2a:	f7ff fc25 	bl	8000778 <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d901      	bls.n	8000f3c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e073      	b.n	8001024 <HAL_RCC_DeInit+0x114>
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f3c:	4b3b      	ldr	r3, [pc, #236]	; (800102c <HAL_RCC_DeInit+0x11c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 0302 	and.w	r3, r3, #2
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d0f0      	beq.n	8000f2a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set MSIRANGE default value */
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 8000f48:	4b38      	ldr	r3, [pc, #224]	; (800102c <HAL_RCC_DeInit+0x11c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f50:	4a36      	ldr	r2, [pc, #216]	; (800102c <HAL_RCC_DeInit+0x11c>)
 8000f52:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register (MSI is selected as system clock source) */
  CLEAR_REG(RCC->CFGR);
 8000f58:	4b34      	ldr	r3, [pc, #208]	; (800102c <HAL_RCC_DeInit+0x11c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]

  /* Update the SystemCoreClock global variable for MSI as system clock source */
  SystemCoreClock = MSI_VALUE;
 8000f5e:	4b34      	ldr	r3, [pc, #208]	; (8001030 <HAL_RCC_DeInit+0x120>)
 8000f60:	4a34      	ldr	r2, [pc, #208]	; (8001034 <HAL_RCC_DeInit+0x124>)
 8000f62:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8000f64:	4b34      	ldr	r3, [pc, #208]	; (8001038 <HAL_RCC_DeInit+0x128>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fbb5 	bl	80006d8 <HAL_InitTick>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <HAL_RCC_DeInit+0x68>
  {
    return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e055      	b.n	8001024 <HAL_RCC_DeInit+0x114>
  }

  /* Insure MSI selected as system clock source */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8000f78:	f7ff fbfe 	bl	8000778 <HAL_GetTick>
 8000f7c:	6078      	str	r0, [r7, #4]

  /* Wait till system clock source is ready */
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 8000f7e:	e00a      	b.n	8000f96 <HAL_RCC_DeInit+0x86>
  {
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f80:	f7ff fbfa 	bl	8000778 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d901      	bls.n	8000f96 <HAL_RCC_DeInit+0x86>
    {
      return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e046      	b.n	8001024 <HAL_RCC_DeInit+0x114>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 8000f96:	4b25      	ldr	r3, [pc, #148]	; (800102c <HAL_RCC_DeInit+0x11c>)
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	f003 030c 	and.w	r3, r3, #12
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1ee      	bne.n	8000f80 <HAL_RCC_DeInit+0x70>

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON | RCC_CR_PLLSAI2ON);

#elif defined(RCC_PLLSAI1_SUPPORT)

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON);
 8000fa2:	4b22      	ldr	r3, [pc, #136]	; (800102c <HAL_RCC_DeInit+0x11c>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	4921      	ldr	r1, [pc, #132]	; (800102c <HAL_RCC_DeInit+0x11c>)
 8000fa8:	4b24      	ldr	r3, [pc, #144]	; (800103c <HAL_RCC_DeInit+0x12c>)
 8000faa:	4013      	ands	r3, r2
 8000fac:	600b      	str	r3, [r1, #0]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Insure PLLRDY, PLLSAI1RDY and PLLSAI2RDY (if present) are reset */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8000fae:	f7ff fbe3 	bl	8000778 <HAL_GetTick>
 8000fb2:	6078      	str	r0, [r7, #4]

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)

#elif defined(RCC_PLLSAI1_SUPPORT)

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY) != 0U)
 8000fb4:	e008      	b.n	8000fc8 <HAL_RCC_DeInit+0xb8>

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)

#endif
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fb6:	f7ff fbdf 	bl	8000778 <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e02d      	b.n	8001024 <HAL_RCC_DeInit+0x114>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY) != 0U)
 8000fc8:	4b18      	ldr	r3, [pc, #96]	; (800102c <HAL_RCC_DeInit+0x11c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 6320 	and.w	r3, r3, #167772160	; 0xa000000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1f0      	bne.n	8000fb6 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Reset PLLCFGR register */
  CLEAR_REG(RCC->PLLCFGR);
 8000fd4:	4b15      	ldr	r3, [pc, #84]	; (800102c <HAL_RCC_DeInit+0x11c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN_4 );
 8000fda:	4b14      	ldr	r3, [pc, #80]	; (800102c <HAL_RCC_DeInit+0x11c>)
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	4a13      	ldr	r2, [pc, #76]	; (800102c <HAL_RCC_DeInit+0x11c>)
 8000fe0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fe4:	60d3      	str	r3, [r2, #12]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Reset PLLSAI1CFGR register */
  CLEAR_REG(RCC->PLLSAI1CFGR);
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <HAL_RCC_DeInit+0x11c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->PLLSAI1CFGR,  RCC_PLLSAI1CFGR_PLLSAI1N_4 );
 8000fec:	4b0f      	ldr	r3, [pc, #60]	; (800102c <HAL_RCC_DeInit+0x11c>)
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	4a0e      	ldr	r2, [pc, #56]	; (800102c <HAL_RCC_DeInit+0x11c>)
 8000ff2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ff6:	6113      	str	r3, [r2, #16]
  SET_BIT(RCC->PLLSAI2CFGR,  RCC_PLLSAI2CFGR_PLLSAI2N_4 );

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <HAL_RCC_DeInit+0x11c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0b      	ldr	r2, [pc, #44]	; (800102c <HAL_RCC_DeInit+0x11c>)
 8000ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001002:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8001004:	4b09      	ldr	r3, [pc, #36]	; (800102c <HAL_RCC_DeInit+0x11c>)
 8001006:	2200      	movs	r2, #0
 8001008:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 800100a:	4b08      	ldr	r3, [pc, #32]	; (800102c <HAL_RCC_DeInit+0x11c>)
 800100c:	f04f 32ff 	mov.w	r2, #4294967295
 8001010:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_RCC_DeInit+0x11c>)
 8001014:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <HAL_RCC_DeInit+0x11c>)
 800101a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800101e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return HAL_OK;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40021000 	.word	0x40021000
 8001030:	20000800 	.word	0x20000800
 8001034:	003d0900 	.word	0x003d0900
 8001038:	20000804 	.word	0x20000804
 800103c:	fafef4ff 	.word	0xfafef4ff

08001040 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d102      	bne.n	8001054 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	f000 bc11 	b.w	8001876 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001054:	4ba0      	ldr	r3, [pc, #640]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f003 030c 	and.w	r3, r3, #12
 800105c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800105e:	4b9e      	ldr	r3, [pc, #632]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	f003 0303 	and.w	r3, r3, #3
 8001066:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0310 	and.w	r3, r3, #16
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 80e4 	beq.w	800123e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d007      	beq.n	800108c <HAL_RCC_OscConfig+0x4c>
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	2b0c      	cmp	r3, #12
 8001080:	f040 808b 	bne.w	800119a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	2b01      	cmp	r3, #1
 8001088:	f040 8087 	bne.w	800119a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800108c:	4b92      	ldr	r3, [pc, #584]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d005      	beq.n	80010a4 <HAL_RCC_OscConfig+0x64>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e3e8      	b.n	8001876 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a1a      	ldr	r2, [r3, #32]
 80010a8:	4b8b      	ldr	r3, [pc, #556]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0308 	and.w	r3, r3, #8
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d004      	beq.n	80010be <HAL_RCC_OscConfig+0x7e>
 80010b4:	4b88      	ldr	r3, [pc, #544]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010bc:	e005      	b.n	80010ca <HAL_RCC_OscConfig+0x8a>
 80010be:	4b86      	ldr	r3, [pc, #536]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80010c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010c4:	091b      	lsrs	r3, r3, #4
 80010c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d223      	bcs.n	8001116 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a1b      	ldr	r3, [r3, #32]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 fd42 	bl	8001b5c <RCC_SetFlashLatencyFromMSIRange>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e3c9      	b.n	8001876 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010e2:	4b7d      	ldr	r3, [pc, #500]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a7c      	ldr	r2, [pc, #496]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80010e8:	f043 0308 	orr.w	r3, r3, #8
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	4b7a      	ldr	r3, [pc, #488]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a1b      	ldr	r3, [r3, #32]
 80010fa:	4977      	ldr	r1, [pc, #476]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80010fc:	4313      	orrs	r3, r2
 80010fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001100:	4b75      	ldr	r3, [pc, #468]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69db      	ldr	r3, [r3, #28]
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	4972      	ldr	r1, [pc, #456]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 8001110:	4313      	orrs	r3, r2
 8001112:	604b      	str	r3, [r1, #4]
 8001114:	e025      	b.n	8001162 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001116:	4b70      	ldr	r3, [pc, #448]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a6f      	ldr	r2, [pc, #444]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 800111c:	f043 0308 	orr.w	r3, r3, #8
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	4b6d      	ldr	r3, [pc, #436]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a1b      	ldr	r3, [r3, #32]
 800112e:	496a      	ldr	r1, [pc, #424]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 8001130:	4313      	orrs	r3, r2
 8001132:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001134:	4b68      	ldr	r3, [pc, #416]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	69db      	ldr	r3, [r3, #28]
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	4965      	ldr	r1, [pc, #404]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 8001144:	4313      	orrs	r3, r2
 8001146:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d109      	bne.n	8001162 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a1b      	ldr	r3, [r3, #32]
 8001152:	4618      	mov	r0, r3
 8001154:	f000 fd02 	bl	8001b5c <RCC_SetFlashLatencyFromMSIRange>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e389      	b.n	8001876 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001162:	f000 fc6f 	bl	8001a44 <HAL_RCC_GetSysClockFreq>
 8001166:	4602      	mov	r2, r0
 8001168:	4b5b      	ldr	r3, [pc, #364]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	091b      	lsrs	r3, r3, #4
 800116e:	f003 030f 	and.w	r3, r3, #15
 8001172:	495a      	ldr	r1, [pc, #360]	; (80012dc <HAL_RCC_OscConfig+0x29c>)
 8001174:	5ccb      	ldrb	r3, [r1, r3]
 8001176:	f003 031f 	and.w	r3, r3, #31
 800117a:	fa22 f303 	lsr.w	r3, r2, r3
 800117e:	4a58      	ldr	r2, [pc, #352]	; (80012e0 <HAL_RCC_OscConfig+0x2a0>)
 8001180:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001182:	4b58      	ldr	r3, [pc, #352]	; (80012e4 <HAL_RCC_OscConfig+0x2a4>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff faa6 	bl	80006d8 <HAL_InitTick>
 800118c:	4603      	mov	r3, r0
 800118e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d052      	beq.n	800123c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	e36d      	b.n	8001876 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d032      	beq.n	8001208 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011a2:	4b4d      	ldr	r3, [pc, #308]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a4c      	ldr	r2, [pc, #304]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011ae:	f7ff fae3 	bl	8000778 <HAL_GetTick>
 80011b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011b4:	e008      	b.n	80011c8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011b6:	f7ff fadf 	bl	8000778 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e356      	b.n	8001876 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011c8:	4b43      	ldr	r3, [pc, #268]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f0      	beq.n	80011b6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011d4:	4b40      	ldr	r3, [pc, #256]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a3f      	ldr	r2, [pc, #252]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80011da:	f043 0308 	orr.w	r3, r3, #8
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	4b3d      	ldr	r3, [pc, #244]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a1b      	ldr	r3, [r3, #32]
 80011ec:	493a      	ldr	r1, [pc, #232]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80011ee:	4313      	orrs	r3, r2
 80011f0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011f2:	4b39      	ldr	r3, [pc, #228]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	4935      	ldr	r1, [pc, #212]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 8001202:	4313      	orrs	r3, r2
 8001204:	604b      	str	r3, [r1, #4]
 8001206:	e01a      	b.n	800123e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001208:	4b33      	ldr	r3, [pc, #204]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a32      	ldr	r2, [pc, #200]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 800120e:	f023 0301 	bic.w	r3, r3, #1
 8001212:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001214:	f7ff fab0 	bl	8000778 <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800121c:	f7ff faac 	bl	8000778 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e323      	b.n	8001876 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800122e:	4b2a      	ldr	r3, [pc, #168]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f0      	bne.n	800121c <HAL_RCC_OscConfig+0x1dc>
 800123a:	e000      	b.n	800123e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800123c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b00      	cmp	r3, #0
 8001248:	d073      	beq.n	8001332 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	2b08      	cmp	r3, #8
 800124e:	d005      	beq.n	800125c <HAL_RCC_OscConfig+0x21c>
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	2b0c      	cmp	r3, #12
 8001254:	d10e      	bne.n	8001274 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	2b03      	cmp	r3, #3
 800125a:	d10b      	bne.n	8001274 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800125c:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d063      	beq.n	8001330 <HAL_RCC_OscConfig+0x2f0>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d15f      	bne.n	8001330 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e300      	b.n	8001876 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800127c:	d106      	bne.n	800128c <HAL_RCC_OscConfig+0x24c>
 800127e:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a15      	ldr	r2, [pc, #84]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 8001284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	e01d      	b.n	80012c8 <HAL_RCC_OscConfig+0x288>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001294:	d10c      	bne.n	80012b0 <HAL_RCC_OscConfig+0x270>
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a0f      	ldr	r2, [pc, #60]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 800129c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a0c      	ldr	r2, [pc, #48]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80012a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	e00b      	b.n	80012c8 <HAL_RCC_OscConfig+0x288>
 80012b0:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a08      	ldr	r2, [pc, #32]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80012b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ba:	6013      	str	r3, [r2, #0]
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a05      	ldr	r2, [pc, #20]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80012c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d01b      	beq.n	8001308 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d0:	f7ff fa52 	bl	8000778 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012d6:	e010      	b.n	80012fa <HAL_RCC_OscConfig+0x2ba>
 80012d8:	40021000 	.word	0x40021000
 80012dc:	08001cac 	.word	0x08001cac
 80012e0:	20000800 	.word	0x20000800
 80012e4:	20000804 	.word	0x20000804
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e8:	f7ff fa46 	bl	8000778 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b64      	cmp	r3, #100	; 0x64
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e2bd      	b.n	8001876 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012fa:	4baf      	ldr	r3, [pc, #700]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f0      	beq.n	80012e8 <HAL_RCC_OscConfig+0x2a8>
 8001306:	e014      	b.n	8001332 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001308:	f7ff fa36 	bl	8000778 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001310:	f7ff fa32 	bl	8000778 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b64      	cmp	r3, #100	; 0x64
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e2a9      	b.n	8001876 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001322:	4ba5      	ldr	r3, [pc, #660]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0x2d0>
 800132e:	e000      	b.n	8001332 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d060      	beq.n	8001400 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	2b04      	cmp	r3, #4
 8001342:	d005      	beq.n	8001350 <HAL_RCC_OscConfig+0x310>
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	2b0c      	cmp	r3, #12
 8001348:	d119      	bne.n	800137e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	2b02      	cmp	r3, #2
 800134e:	d116      	bne.n	800137e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001350:	4b99      	ldr	r3, [pc, #612]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001358:	2b00      	cmp	r3, #0
 800135a:	d005      	beq.n	8001368 <HAL_RCC_OscConfig+0x328>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e286      	b.n	8001876 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001368:	4b93      	ldr	r3, [pc, #588]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	061b      	lsls	r3, r3, #24
 8001376:	4990      	ldr	r1, [pc, #576]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 8001378:	4313      	orrs	r3, r2
 800137a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800137c:	e040      	b.n	8001400 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d023      	beq.n	80013ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001386:	4b8c      	ldr	r3, [pc, #560]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a8b      	ldr	r2, [pc, #556]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 800138c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001392:	f7ff f9f1 	bl	8000778 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800139a:	f7ff f9ed 	bl	8000778 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e264      	b.n	8001876 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013ac:	4b82      	ldr	r3, [pc, #520]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0f0      	beq.n	800139a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b8:	4b7f      	ldr	r3, [pc, #508]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	061b      	lsls	r3, r3, #24
 80013c6:	497c      	ldr	r1, [pc, #496]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
 80013cc:	e018      	b.n	8001400 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ce:	4b7a      	ldr	r3, [pc, #488]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a79      	ldr	r2, [pc, #484]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 80013d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013da:	f7ff f9cd 	bl	8000778 <HAL_GetTick>
 80013de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013e0:	e008      	b.n	80013f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013e2:	f7ff f9c9 	bl	8000778 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e240      	b.n	8001876 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013f4:	4b70      	ldr	r3, [pc, #448]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1f0      	bne.n	80013e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0308 	and.w	r3, r3, #8
 8001408:	2b00      	cmp	r3, #0
 800140a:	d03c      	beq.n	8001486 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	695b      	ldr	r3, [r3, #20]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d01c      	beq.n	800144e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001414:	4b68      	ldr	r3, [pc, #416]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 8001416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800141a:	4a67      	ldr	r2, [pc, #412]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001424:	f7ff f9a8 	bl	8000778 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800142c:	f7ff f9a4 	bl	8000778 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e21b      	b.n	8001876 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800143e:	4b5e      	ldr	r3, [pc, #376]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 8001440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0ef      	beq.n	800142c <HAL_RCC_OscConfig+0x3ec>
 800144c:	e01b      	b.n	8001486 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800144e:	4b5a      	ldr	r3, [pc, #360]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 8001450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001454:	4a58      	ldr	r2, [pc, #352]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 8001456:	f023 0301 	bic.w	r3, r3, #1
 800145a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800145e:	f7ff f98b 	bl	8000778 <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001466:	f7ff f987 	bl	8000778 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e1fe      	b.n	8001876 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001478:	4b4f      	ldr	r3, [pc, #316]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 800147a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1ef      	bne.n	8001466 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 80a6 	beq.w	80015e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001494:	2300      	movs	r3, #0
 8001496:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001498:	4b47      	ldr	r3, [pc, #284]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 800149a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d10d      	bne.n	80014c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014a4:	4b44      	ldr	r3, [pc, #272]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 80014a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a8:	4a43      	ldr	r2, [pc, #268]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 80014aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ae:	6593      	str	r3, [r2, #88]	; 0x58
 80014b0:	4b41      	ldr	r3, [pc, #260]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 80014b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014bc:	2301      	movs	r3, #1
 80014be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014c0:	4b3e      	ldr	r3, [pc, #248]	; (80015bc <HAL_RCC_OscConfig+0x57c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d118      	bne.n	80014fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014cc:	4b3b      	ldr	r3, [pc, #236]	; (80015bc <HAL_RCC_OscConfig+0x57c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a3a      	ldr	r2, [pc, #232]	; (80015bc <HAL_RCC_OscConfig+0x57c>)
 80014d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014d8:	f7ff f94e 	bl	8000778 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e0:	f7ff f94a 	bl	8000778 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e1c1      	b.n	8001876 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014f2:	4b32      	ldr	r3, [pc, #200]	; (80015bc <HAL_RCC_OscConfig+0x57c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d108      	bne.n	8001518 <HAL_RCC_OscConfig+0x4d8>
 8001506:	4b2c      	ldr	r3, [pc, #176]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 8001508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800150c:	4a2a      	ldr	r2, [pc, #168]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001516:	e024      	b.n	8001562 <HAL_RCC_OscConfig+0x522>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b05      	cmp	r3, #5
 800151e:	d110      	bne.n	8001542 <HAL_RCC_OscConfig+0x502>
 8001520:	4b25      	ldr	r3, [pc, #148]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 8001522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001526:	4a24      	ldr	r2, [pc, #144]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 8001528:	f043 0304 	orr.w	r3, r3, #4
 800152c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001530:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 8001532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001536:	4a20      	ldr	r2, [pc, #128]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001540:	e00f      	b.n	8001562 <HAL_RCC_OscConfig+0x522>
 8001542:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 8001544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001548:	4a1b      	ldr	r2, [pc, #108]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 800154a:	f023 0301 	bic.w	r3, r3, #1
 800154e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001552:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 8001554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001558:	4a17      	ldr	r2, [pc, #92]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 800155a:	f023 0304 	bic.w	r3, r3, #4
 800155e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d016      	beq.n	8001598 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156a:	f7ff f905 	bl	8000778 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001570:	e00a      	b.n	8001588 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001572:	f7ff f901 	bl	8000778 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001580:	4293      	cmp	r3, r2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e176      	b.n	8001876 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001588:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 800158a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0ed      	beq.n	8001572 <HAL_RCC_OscConfig+0x532>
 8001596:	e01a      	b.n	80015ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001598:	f7ff f8ee 	bl	8000778 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800159e:	e00f      	b.n	80015c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a0:	f7ff f8ea 	bl	8000778 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d906      	bls.n	80015c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e15f      	b.n	8001876 <HAL_RCC_OscConfig+0x836>
 80015b6:	bf00      	nop
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015c0:	4baa      	ldr	r3, [pc, #680]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 80015c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1e8      	bne.n	80015a0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015ce:	7ffb      	ldrb	r3, [r7, #31]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d105      	bne.n	80015e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d4:	4ba5      	ldr	r3, [pc, #660]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 80015d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d8:	4aa4      	ldr	r2, [pc, #656]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 80015da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0320 	and.w	r3, r3, #32
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d03c      	beq.n	8001666 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d01c      	beq.n	800162e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015f4:	4b9d      	ldr	r3, [pc, #628]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 80015f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015fa:	4a9c      	ldr	r2, [pc, #624]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001604:	f7ff f8b8 	bl	8000778 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800160c:	f7ff f8b4 	bl	8000778 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e12b      	b.n	8001876 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800161e:	4b93      	ldr	r3, [pc, #588]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 8001620:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0ef      	beq.n	800160c <HAL_RCC_OscConfig+0x5cc>
 800162c:	e01b      	b.n	8001666 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800162e:	4b8f      	ldr	r3, [pc, #572]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 8001630:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001634:	4a8d      	ldr	r2, [pc, #564]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 8001636:	f023 0301 	bic.w	r3, r3, #1
 800163a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800163e:	f7ff f89b 	bl	8000778 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001646:	f7ff f897 	bl	8000778 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e10e      	b.n	8001876 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001658:	4b84      	ldr	r3, [pc, #528]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 800165a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1ef      	bne.n	8001646 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 8102 	beq.w	8001874 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001674:	2b02      	cmp	r3, #2
 8001676:	f040 80c5 	bne.w	8001804 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800167a:	4b7c      	ldr	r3, [pc, #496]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	f003 0203 	and.w	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168a:	429a      	cmp	r2, r3
 800168c:	d12c      	bne.n	80016e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	3b01      	subs	r3, #1
 800169a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800169c:	429a      	cmp	r2, r3
 800169e:	d123      	bne.n	80016e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d11b      	bne.n	80016e8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016bc:	429a      	cmp	r2, r3
 80016be:	d113      	bne.n	80016e8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ca:	085b      	lsrs	r3, r3, #1
 80016cc:	3b01      	subs	r3, #1
 80016ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d109      	bne.n	80016e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	085b      	lsrs	r3, r3, #1
 80016e0:	3b01      	subs	r3, #1
 80016e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d067      	beq.n	80017b8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	2b0c      	cmp	r3, #12
 80016ec:	d062      	beq.n	80017b4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80016ee:	4b5f      	ldr	r3, [pc, #380]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e0bb      	b.n	8001876 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80016fe:	4b5b      	ldr	r3, [pc, #364]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a5a      	ldr	r2, [pc, #360]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 8001704:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001708:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800170a:	f7ff f835 	bl	8000778 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001712:	f7ff f831 	bl	8000778 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e0a8      	b.n	8001876 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001724:	4b51      	ldr	r3, [pc, #324]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1f0      	bne.n	8001712 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001730:	4b4e      	ldr	r3, [pc, #312]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 8001732:	68da      	ldr	r2, [r3, #12]
 8001734:	4b4e      	ldr	r3, [pc, #312]	; (8001870 <HAL_RCC_OscConfig+0x830>)
 8001736:	4013      	ands	r3, r2
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001740:	3a01      	subs	r2, #1
 8001742:	0112      	lsls	r2, r2, #4
 8001744:	4311      	orrs	r1, r2
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800174a:	0212      	lsls	r2, r2, #8
 800174c:	4311      	orrs	r1, r2
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001752:	0852      	lsrs	r2, r2, #1
 8001754:	3a01      	subs	r2, #1
 8001756:	0552      	lsls	r2, r2, #21
 8001758:	4311      	orrs	r1, r2
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800175e:	0852      	lsrs	r2, r2, #1
 8001760:	3a01      	subs	r2, #1
 8001762:	0652      	lsls	r2, r2, #25
 8001764:	4311      	orrs	r1, r2
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800176a:	06d2      	lsls	r2, r2, #27
 800176c:	430a      	orrs	r2, r1
 800176e:	493f      	ldr	r1, [pc, #252]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 8001770:	4313      	orrs	r3, r2
 8001772:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001774:	4b3d      	ldr	r3, [pc, #244]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a3c      	ldr	r2, [pc, #240]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 800177a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800177e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001780:	4b3a      	ldr	r3, [pc, #232]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	4a39      	ldr	r2, [pc, #228]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 8001786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800178a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800178c:	f7fe fff4 	bl	8000778 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001794:	f7fe fff0 	bl	8000778 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e067      	b.n	8001876 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017a6:	4b31      	ldr	r3, [pc, #196]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017b2:	e05f      	b.n	8001874 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e05e      	b.n	8001876 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017b8:	4b2c      	ldr	r3, [pc, #176]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d157      	bne.n	8001874 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80017c4:	4b29      	ldr	r3, [pc, #164]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a28      	ldr	r2, [pc, #160]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 80017ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017d0:	4b26      	ldr	r3, [pc, #152]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	4a25      	ldr	r2, [pc, #148]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 80017d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017dc:	f7fe ffcc 	bl	8000778 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e4:	f7fe ffc8 	bl	8000778 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e03f      	b.n	8001876 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017f6:	4b1d      	ldr	r3, [pc, #116]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0f0      	beq.n	80017e4 <HAL_RCC_OscConfig+0x7a4>
 8001802:	e037      	b.n	8001874 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	2b0c      	cmp	r3, #12
 8001808:	d02d      	beq.n	8001866 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800180a:	4b18      	ldr	r3, [pc, #96]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a17      	ldr	r2, [pc, #92]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 8001810:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001814:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d105      	bne.n	800182e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001822:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	4a11      	ldr	r2, [pc, #68]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 8001828:	f023 0303 	bic.w	r3, r3, #3
 800182c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800182e:	4b0f      	ldr	r3, [pc, #60]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	4a0e      	ldr	r2, [pc, #56]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 8001834:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800183c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183e:	f7fe ff9b 	bl	8000778 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001846:	f7fe ff97 	bl	8000778 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e00e      	b.n	8001876 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001858:	4b04      	ldr	r3, [pc, #16]	; (800186c <HAL_RCC_OscConfig+0x82c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1f0      	bne.n	8001846 <HAL_RCC_OscConfig+0x806>
 8001864:	e006      	b.n	8001874 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e005      	b.n	8001876 <HAL_RCC_OscConfig+0x836>
 800186a:	bf00      	nop
 800186c:	40021000 	.word	0x40021000
 8001870:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3720      	adds	r7, #32
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop

08001880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e0c8      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001894:	4b66      	ldr	r3, [pc, #408]	; (8001a30 <HAL_RCC_ClockConfig+0x1b0>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0307 	and.w	r3, r3, #7
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d910      	bls.n	80018c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a2:	4b63      	ldr	r3, [pc, #396]	; (8001a30 <HAL_RCC_ClockConfig+0x1b0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f023 0207 	bic.w	r2, r3, #7
 80018aa:	4961      	ldr	r1, [pc, #388]	; (8001a30 <HAL_RCC_ClockConfig+0x1b0>)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b2:	4b5f      	ldr	r3, [pc, #380]	; (8001a30 <HAL_RCC_ClockConfig+0x1b0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d001      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0b0      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d04c      	beq.n	800196a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	d107      	bne.n	80018e8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d8:	4b56      	ldr	r3, [pc, #344]	; (8001a34 <HAL_RCC_ClockConfig+0x1b4>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d121      	bne.n	8001928 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e09e      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d107      	bne.n	8001900 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018f0:	4b50      	ldr	r3, [pc, #320]	; (8001a34 <HAL_RCC_ClockConfig+0x1b4>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d115      	bne.n	8001928 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e092      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d107      	bne.n	8001918 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001908:	4b4a      	ldr	r3, [pc, #296]	; (8001a34 <HAL_RCC_ClockConfig+0x1b4>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d109      	bne.n	8001928 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e086      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001918:	4b46      	ldr	r3, [pc, #280]	; (8001a34 <HAL_RCC_ClockConfig+0x1b4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e07e      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001928:	4b42      	ldr	r3, [pc, #264]	; (8001a34 <HAL_RCC_ClockConfig+0x1b4>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f023 0203 	bic.w	r2, r3, #3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	493f      	ldr	r1, [pc, #252]	; (8001a34 <HAL_RCC_ClockConfig+0x1b4>)
 8001936:	4313      	orrs	r3, r2
 8001938:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800193a:	f7fe ff1d 	bl	8000778 <HAL_GetTick>
 800193e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001940:	e00a      	b.n	8001958 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001942:	f7fe ff19 	bl	8000778 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001950:	4293      	cmp	r3, r2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e066      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001958:	4b36      	ldr	r3, [pc, #216]	; (8001a34 <HAL_RCC_ClockConfig+0x1b4>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 020c 	and.w	r2, r3, #12
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	429a      	cmp	r2, r3
 8001968:	d1eb      	bne.n	8001942 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d008      	beq.n	8001988 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001976:	4b2f      	ldr	r3, [pc, #188]	; (8001a34 <HAL_RCC_ClockConfig+0x1b4>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	492c      	ldr	r1, [pc, #176]	; (8001a34 <HAL_RCC_ClockConfig+0x1b4>)
 8001984:	4313      	orrs	r3, r2
 8001986:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001988:	4b29      	ldr	r3, [pc, #164]	; (8001a30 <HAL_RCC_ClockConfig+0x1b0>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d210      	bcs.n	80019b8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001996:	4b26      	ldr	r3, [pc, #152]	; (8001a30 <HAL_RCC_ClockConfig+0x1b0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 0207 	bic.w	r2, r3, #7
 800199e:	4924      	ldr	r1, [pc, #144]	; (8001a30 <HAL_RCC_ClockConfig+0x1b0>)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a6:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <HAL_RCC_ClockConfig+0x1b0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d001      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e036      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d008      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c4:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <HAL_RCC_ClockConfig+0x1b4>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	4918      	ldr	r1, [pc, #96]	; (8001a34 <HAL_RCC_ClockConfig+0x1b4>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d009      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019e2:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <HAL_RCC_ClockConfig+0x1b4>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	4910      	ldr	r1, [pc, #64]	; (8001a34 <HAL_RCC_ClockConfig+0x1b4>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019f6:	f000 f825 	bl	8001a44 <HAL_RCC_GetSysClockFreq>
 80019fa:	4602      	mov	r2, r0
 80019fc:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <HAL_RCC_ClockConfig+0x1b4>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	091b      	lsrs	r3, r3, #4
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	490c      	ldr	r1, [pc, #48]	; (8001a38 <HAL_RCC_ClockConfig+0x1b8>)
 8001a08:	5ccb      	ldrb	r3, [r1, r3]
 8001a0a:	f003 031f 	and.w	r3, r3, #31
 8001a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a12:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <HAL_RCC_ClockConfig+0x1bc>)
 8001a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a16:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <HAL_RCC_ClockConfig+0x1c0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7fe fe5c 	bl	80006d8 <HAL_InitTick>
 8001a20:	4603      	mov	r3, r0
 8001a22:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a24:	7afb      	ldrb	r3, [r7, #11]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40022000 	.word	0x40022000
 8001a34:	40021000 	.word	0x40021000
 8001a38:	08001cac 	.word	0x08001cac
 8001a3c:	20000800 	.word	0x20000800
 8001a40:	20000804 	.word	0x20000804

08001a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b089      	sub	sp, #36	; 0x24
 8001a48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a52:	4b3e      	ldr	r3, [pc, #248]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 030c 	and.w	r3, r3, #12
 8001a5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a5c:	4b3b      	ldr	r3, [pc, #236]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d005      	beq.n	8001a78 <HAL_RCC_GetSysClockFreq+0x34>
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	2b0c      	cmp	r3, #12
 8001a70:	d121      	bne.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d11e      	bne.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a78:	4b34      	ldr	r3, [pc, #208]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0308 	and.w	r3, r3, #8
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d107      	bne.n	8001a94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a84:	4b31      	ldr	r3, [pc, #196]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a8a:	0a1b      	lsrs	r3, r3, #8
 8001a8c:	f003 030f 	and.w	r3, r3, #15
 8001a90:	61fb      	str	r3, [r7, #28]
 8001a92:	e005      	b.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a94:	4b2d      	ldr	r3, [pc, #180]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	091b      	lsrs	r3, r3, #4
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001aa0:	4a2b      	ldr	r2, [pc, #172]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10d      	bne.n	8001acc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ab4:	e00a      	b.n	8001acc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	2b04      	cmp	r3, #4
 8001aba:	d102      	bne.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001abc:	4b25      	ldr	r3, [pc, #148]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x110>)
 8001abe:	61bb      	str	r3, [r7, #24]
 8001ac0:	e004      	b.n	8001acc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d101      	bne.n	8001acc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ac8:	4b23      	ldr	r3, [pc, #140]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x114>)
 8001aca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	2b0c      	cmp	r3, #12
 8001ad0:	d134      	bne.n	8001b3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ad2:	4b1e      	ldr	r3, [pc, #120]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d003      	beq.n	8001aea <HAL_RCC_GetSysClockFreq+0xa6>
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	2b03      	cmp	r3, #3
 8001ae6:	d003      	beq.n	8001af0 <HAL_RCC_GetSysClockFreq+0xac>
 8001ae8:	e005      	b.n	8001af6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001aea:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x110>)
 8001aec:	617b      	str	r3, [r7, #20]
      break;
 8001aee:	e005      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001af0:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x114>)
 8001af2:	617b      	str	r3, [r7, #20]
      break;
 8001af4:	e002      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	617b      	str	r3, [r7, #20]
      break;
 8001afa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	091b      	lsrs	r3, r3, #4
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	3301      	adds	r3, #1
 8001b08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	0a1b      	lsrs	r3, r3, #8
 8001b10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	fb02 f203 	mul.w	r2, r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	0e5b      	lsrs	r3, r3, #25
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b3c:	69bb      	ldr	r3, [r7, #24]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3724      	adds	r7, #36	; 0x24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	08001cbc 	.word	0x08001cbc
 8001b54:	00f42400 	.word	0x00f42400
 8001b58:	007a1200 	.word	0x007a1200

08001b5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b64:	2300      	movs	r3, #0
 8001b66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b68:	4b2a      	ldr	r3, [pc, #168]	; (8001c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b74:	f7ff f968 	bl	8000e48 <HAL_PWREx_GetVoltageRange>
 8001b78:	6178      	str	r0, [r7, #20]
 8001b7a:	e014      	b.n	8001ba6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b7c:	4b25      	ldr	r3, [pc, #148]	; (8001c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b80:	4a24      	ldr	r2, [pc, #144]	; (8001c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b86:	6593      	str	r3, [r2, #88]	; 0x58
 8001b88:	4b22      	ldr	r3, [pc, #136]	; (8001c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001b94:	f7ff f958 	bl	8000e48 <HAL_PWREx_GetVoltageRange>
 8001b98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b9a:	4b1e      	ldr	r3, [pc, #120]	; (8001c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9e:	4a1d      	ldr	r2, [pc, #116]	; (8001c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bac:	d10b      	bne.n	8001bc6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b80      	cmp	r3, #128	; 0x80
 8001bb2:	d919      	bls.n	8001be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2ba0      	cmp	r3, #160	; 0xa0
 8001bb8:	d902      	bls.n	8001bc0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bba:	2302      	movs	r3, #2
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	e013      	b.n	8001be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	e010      	b.n	8001be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b80      	cmp	r3, #128	; 0x80
 8001bca:	d902      	bls.n	8001bd2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001bcc:	2303      	movs	r3, #3
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	e00a      	b.n	8001be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b80      	cmp	r3, #128	; 0x80
 8001bd6:	d102      	bne.n	8001bde <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bd8:	2302      	movs	r3, #2
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	e004      	b.n	8001be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b70      	cmp	r3, #112	; 0x70
 8001be2:	d101      	bne.n	8001be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001be4:	2301      	movs	r3, #1
 8001be6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001be8:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f023 0207 	bic.w	r2, r3, #7
 8001bf0:	4909      	ldr	r1, [pc, #36]	; (8001c18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d001      	beq.n	8001c0a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40022000 	.word	0x40022000

08001c1c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001c20:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001c26:	f043 0304 	orr.w	r3, r3, #4
 8001c2a:	6013      	str	r3, [r2, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40021000 	.word	0x40021000

08001c3c <__libc_init_array>:
 8001c3c:	b570      	push	{r4, r5, r6, lr}
 8001c3e:	4d0d      	ldr	r5, [pc, #52]	; (8001c74 <__libc_init_array+0x38>)
 8001c40:	4c0d      	ldr	r4, [pc, #52]	; (8001c78 <__libc_init_array+0x3c>)
 8001c42:	1b64      	subs	r4, r4, r5
 8001c44:	10a4      	asrs	r4, r4, #2
 8001c46:	2600      	movs	r6, #0
 8001c48:	42a6      	cmp	r6, r4
 8001c4a:	d109      	bne.n	8001c60 <__libc_init_array+0x24>
 8001c4c:	4d0b      	ldr	r5, [pc, #44]	; (8001c7c <__libc_init_array+0x40>)
 8001c4e:	4c0c      	ldr	r4, [pc, #48]	; (8001c80 <__libc_init_array+0x44>)
 8001c50:	f000 f820 	bl	8001c94 <_init>
 8001c54:	1b64      	subs	r4, r4, r5
 8001c56:	10a4      	asrs	r4, r4, #2
 8001c58:	2600      	movs	r6, #0
 8001c5a:	42a6      	cmp	r6, r4
 8001c5c:	d105      	bne.n	8001c6a <__libc_init_array+0x2e>
 8001c5e:	bd70      	pop	{r4, r5, r6, pc}
 8001c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c64:	4798      	blx	r3
 8001c66:	3601      	adds	r6, #1
 8001c68:	e7ee      	b.n	8001c48 <__libc_init_array+0xc>
 8001c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c6e:	4798      	blx	r3
 8001c70:	3601      	adds	r6, #1
 8001c72:	e7f2      	b.n	8001c5a <__libc_init_array+0x1e>
 8001c74:	08001cec 	.word	0x08001cec
 8001c78:	08001cec 	.word	0x08001cec
 8001c7c:	08001cec 	.word	0x08001cec
 8001c80:	08001cf0 	.word	0x08001cf0

08001c84 <memset>:
 8001c84:	4402      	add	r2, r0
 8001c86:	4603      	mov	r3, r0
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d100      	bne.n	8001c8e <memset+0xa>
 8001c8c:	4770      	bx	lr
 8001c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8001c92:	e7f9      	b.n	8001c88 <memset+0x4>

08001c94 <_init>:
 8001c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c96:	bf00      	nop
 8001c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c9a:	bc08      	pop	{r3}
 8001c9c:	469e      	mov	lr, r3
 8001c9e:	4770      	bx	lr

08001ca0 <_fini>:
 8001ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca2:	bf00      	nop
 8001ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ca6:	bc08      	pop	{r3}
 8001ca8:	469e      	mov	lr, r3
 8001caa:	4770      	bx	lr
