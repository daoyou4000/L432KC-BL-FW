
L432KC_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002cc  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000458  08000458  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000458  08000458  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  08000458  08000458  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000458  08000458  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000458  08000458  00010458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800045c  0800045c  0001045c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000200  08000460  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000204  08000464  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08000464  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   000022c8  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000686  00000000  00000000  000224fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f8  00000000  00000000  00022b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001b0  00000000  00000000  00022d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001db43  00000000  00000000  00022f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000020d1  00000000  00000000  00040a73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b678a  00000000  00000000  00042b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f92ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000624  00000000  00000000  000f9324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000204 	.word	0x20000204
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08000440 	.word	0x08000440

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000208 	.word	0x20000208
 80001c8:	08000440 	.word	0x08000440

080001cc <vL432kc_DeInitAndJump>:
    application_t*  func_p;        // Program Counter
} JumpStruct;


static void vL432kc_DeInitAndJump(const uint32_t u32FwAddress)
{
 80001cc:	b480      	push	{r7}
 80001ce:	b089      	sub	sp, #36	; 0x24
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
  // Deinitialization parts from https://github.com/viktorvano/STM32-Bootloader/blob/master/STM32F103C8T6_Bootloader/Core/Inc/bootloader.h
  uint32_t* pu32FwFlashVectorTablePointer = (uint32_t*)u32FwAddress;
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	61fb      	str	r3, [r7, #28]
  uint32_t* pu32FwRamVectorTablePointer = (uint32_t*)0x20000000;
 80001d8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80001dc:	61bb      	str	r3, [r7, #24]

  while (pu32FwRamVectorTablePointer < (uint32_t*)0x20000200)
 80001de:	e007      	b.n	80001f0 <vL432kc_DeInitAndJump+0x24>
  {
    *(pu32FwRamVectorTablePointer++) = *(pu32FwFlashVectorTablePointer++);
 80001e0:	69fa      	ldr	r2, [r7, #28]
 80001e2:	1d13      	adds	r3, r2, #4
 80001e4:	61fb      	str	r3, [r7, #28]
 80001e6:	69bb      	ldr	r3, [r7, #24]
 80001e8:	1d19      	adds	r1, r3, #4
 80001ea:	61b9      	str	r1, [r7, #24]
 80001ec:	6812      	ldr	r2, [r2, #0]
 80001ee:	601a      	str	r2, [r3, #0]
  while (pu32FwRamVectorTablePointer < (uint32_t*)0x20000200)
 80001f0:	69bb      	ldr	r3, [r7, #24]
 80001f2:	4a1b      	ldr	r2, [pc, #108]	; (8000260 <vL432kc_DeInitAndJump+0x94>)
 80001f4:	4293      	cmp	r3, r2
 80001f6:	d9f3      	bls.n	80001e0 <vL432kc_DeInitAndJump+0x14>
  }
  pu32FwRamVectorTablePointer = (uint32_t*)0x20000000;
 80001f8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80001fc:	61bb      	str	r3, [r7, #24]

  uint32_t u32Stack = *pu32FwRamVectorTablePointer;
 80001fe:	69bb      	ldr	r3, [r7, #24]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	617b      	str	r3, [r7, #20]
  uint32_t u32Reset = *(pu32FwRamVectorTablePointer + 1);
 8000204:	69bb      	ldr	r3, [r7, #24]
 8000206:	685b      	ldr	r3, [r3, #4]
 8000208:	613b      	str	r3, [r7, #16]

  // Patch reset handler
  *(pu32FwRamVectorTablePointer + 1) += 0x5000;
 800020a:	69bb      	ldr	r3, [r7, #24]
 800020c:	3304      	adds	r3, #4
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	69bb      	ldr	r3, [r7, #24]
 8000212:	3304      	adds	r3, #4
 8000214:	f502 42a0 	add.w	r2, r2, #20480	; 0x5000
 8000218:	601a      	str	r2, [r3, #0]

  u32Reset = *(pu32FwRamVectorTablePointer + 1);
 800021a:	69bb      	ldr	r3, [r7, #24]
 800021c:	685b      	ldr	r3, [r3, #4]
 800021e:	613b      	str	r3, [r7, #16]

  const JumpStruct* pxJumpVector = (JumpStruct*)0x20000000;
 8000220:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000224:	60fb      	str	r3, [r7, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000226:	b672      	cpsid	i
}
 8000228:	bf00      	nop
  __HAL_RCC_GPIOB_CLK_DISABLE();
  HAL_RCC_DeInit();
  HAL_DeInit();
*/
  __disable_irq();
  SysTick->CTRL = 0;
 800022a:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <vL432kc_DeInitAndJump+0x98>)
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 8000230:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <vL432kc_DeInitAndJump+0x98>)
 8000232:	2200      	movs	r2, #0
 8000234:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 8000236:	4b0b      	ldr	r3, [pc, #44]	; (8000264 <vL432kc_DeInitAndJump+0x98>)
 8000238:	2200      	movs	r2, #0
 800023a:	609a      	str	r2, [r3, #8]

  SCB->VTOR = 0x20000000;
 800023c:	4b0a      	ldr	r3, [pc, #40]	; (8000268 <vL432kc_DeInitAndJump+0x9c>)
 800023e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000242:	609a      	str	r2, [r3, #8]

  // Actual jump
  asm("msr msp, %0; bx %1;" : : "r"(pxJumpVector->stack_addr), "r"(pxJumpVector->func_p));
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	68fa      	ldr	r2, [r7, #12]
 800024a:	6852      	ldr	r2, [r2, #4]
 800024c:	f383 8808 	msr	MSP, r3
 8000250:	4710      	bx	r2
}
 8000252:	bf00      	nop
 8000254:	3724      	adds	r7, #36	; 0x24
 8000256:	46bd      	mov	sp, r7
 8000258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	200001ff 	.word	0x200001ff
 8000264:	e000e010 	.word	0xe000e010
 8000268:	e000ed00 	.word	0xe000ed00

0800026c <main>:

//extern char __KERNEL_BEGIN__;


int main(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
  uint32_t u32Foo;


  u32Foo = RAM_VECTOR_TABLE_BEGIN;
 8000272:	4b09      	ldr	r3, [pc, #36]	; (8000298 <main+0x2c>)
 8000274:	607b      	str	r3, [r7, #4]


  u32Foo = RAM_VECTOR_TABLE_END;
 8000276:	4b09      	ldr	r3, [pc, #36]	; (800029c <main+0x30>)
 8000278:	607b      	str	r3, [r7, #4]


  u32Foo = FLASH_BOOTLOADER_BEGIN;
 800027a:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <main+0x34>)
 800027c:	607b      	str	r3, [r7, #4]


  u32Foo = FLASH_FIRMWARES_EARLIEST_BEGIN;
 800027e:	4b09      	ldr	r3, [pc, #36]	; (80002a4 <main+0x38>)
 8000280:	607b      	str	r3, [r7, #4]


  u32Foo++;
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	3301      	adds	r3, #1
 8000286:	607b      	str	r3, [r7, #4]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
  // Deinit and jump
  //vL432kc_DeInitAndJump(0x8000000); // 0x8000000 here => bootloader jumps to itself :)

   */
  vL432kc_DeInitAndJump(0x8005000); // Here actual firmware address
 8000288:	4807      	ldr	r0, [pc, #28]	; (80002a8 <main+0x3c>)
 800028a:	f7ff ff9f 	bl	80001cc <vL432kc_DeInitAndJump>
 800028e:	2300      	movs	r3, #0
}
 8000290:	4618      	mov	r0, r3
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	20000000 	.word	0x20000000
 800029c:	20000200 	.word	0x20000200
 80002a0:	08000000 	.word	0x08000000
 80002a4:	08005000 	.word	0x08005000
 80002a8:	08005000 	.word	0x08005000

080002ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002b0:	e7fe      	b.n	80002b0 <NMI_Handler+0x4>
	...

080002b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  uint32_t u32Cfsr = *((uint32_t*)0xE000ED28);
 80002ba:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <HardFault_Handler+0x14>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	607b      	str	r3, [r7, #4]
  u32Cfsr += 0; // To stop compile nags

  uint32_t u32Bfar = *((uint32_t*)0xE000ED38);
 80002c0:	4b02      	ldr	r3, [pc, #8]	; (80002cc <HardFault_Handler+0x18>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	603b      	str	r3, [r7, #0]
  u32Bfar += 0; // To stop compile nags

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002c6:	e7fe      	b.n	80002c6 <HardFault_Handler+0x12>
 80002c8:	e000ed28 	.word	0xe000ed28
 80002cc:	e000ed38 	.word	0xe000ed38

080002d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002d4:	e7fe      	b.n	80002d4 <MemManage_Handler+0x4>

080002d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002d6:	b480      	push	{r7}
 80002d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002da:	e7fe      	b.n	80002da <BusFault_Handler+0x4>

080002dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002e0:	e7fe      	b.n	80002e0 <UsageFault_Handler+0x4>

080002e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002e2:	b480      	push	{r7}
 80002e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002e6:	bf00      	nop
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr

080002f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr

080002fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002fe:	b480      	push	{r7}
 8000300:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000302:	bf00      	nop
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr

0800030c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000310:	f000 f85e 	bl	80003d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}

08000318 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800031c:	4b15      	ldr	r3, [pc, #84]	; (8000374 <SystemInit+0x5c>)
 800031e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000322:	4a14      	ldr	r2, [pc, #80]	; (8000374 <SystemInit+0x5c>)
 8000324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000328:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800032c:	4b12      	ldr	r3, [pc, #72]	; (8000378 <SystemInit+0x60>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a11      	ldr	r2, [pc, #68]	; (8000378 <SystemInit+0x60>)
 8000332:	f043 0301 	orr.w	r3, r3, #1
 8000336:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <SystemInit+0x60>)
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800033e:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <SystemInit+0x60>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a0d      	ldr	r2, [pc, #52]	; (8000378 <SystemInit+0x60>)
 8000344:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000348:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800034c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800034e:	4b0a      	ldr	r3, [pc, #40]	; (8000378 <SystemInit+0x60>)
 8000350:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000354:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000356:	4b08      	ldr	r3, [pc, #32]	; (8000378 <SystemInit+0x60>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4a07      	ldr	r2, [pc, #28]	; (8000378 <SystemInit+0x60>)
 800035c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000360:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000362:	4b05      	ldr	r3, [pc, #20]	; (8000378 <SystemInit+0x60>)
 8000364:	2200      	movs	r2, #0
 8000366:	619a      	str	r2, [r3, #24]
}
 8000368:	bf00      	nop
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	e000ed00 	.word	0xe000ed00
 8000378:	40021000 	.word	0x40021000

0800037c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800037c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000380:	f7ff ffca 	bl	8000318 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000384:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000386:	e003      	b.n	8000390 <LoopCopyDataInit>

08000388 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000388:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800038a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800038c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800038e:	3104      	adds	r1, #4

08000390 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000390:	480a      	ldr	r0, [pc, #40]	; (80003bc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000392:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000394:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000396:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000398:	d3f6      	bcc.n	8000388 <CopyDataInit>
	ldr	r2, =_sbss
 800039a:	4a0a      	ldr	r2, [pc, #40]	; (80003c4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800039c:	e002      	b.n	80003a4 <LoopFillZerobss>

0800039e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800039e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80003a0:	f842 3b04 	str.w	r3, [r2], #4

080003a4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80003a4:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <LoopForever+0x16>)
	cmp	r2, r3
 80003a6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80003a8:	d3f9      	bcc.n	800039e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003aa:	f000 f825 	bl	80003f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80003ae:	f7ff ff5d 	bl	800026c <main>

080003b2 <LoopForever>:

LoopForever:
    b LoopForever
 80003b2:	e7fe      	b.n	80003b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80003b4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80003b8:	08000460 	.word	0x08000460
	ldr	r0, =_sdata
 80003bc:	20000200 	.word	0x20000200
	ldr	r3, =_edata
 80003c0:	20000204 	.word	0x20000204
	ldr	r2, =_sbss
 80003c4:	20000204 	.word	0x20000204
	ldr	r3, = _ebss
 80003c8:	20000224 	.word	0x20000224

080003cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80003cc:	e7fe      	b.n	80003cc <ADC1_IRQHandler>
	...

080003d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <HAL_IncTick+0x20>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	461a      	mov	r2, r3
 80003da:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <HAL_IncTick+0x24>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4413      	add	r3, r2
 80003e0:	4a04      	ldr	r2, [pc, #16]	; (80003f4 <HAL_IncTick+0x24>)
 80003e2:	6013      	str	r3, [r2, #0]
}
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	20000200 	.word	0x20000200
 80003f4:	20000220 	.word	0x20000220

080003f8 <__libc_init_array>:
 80003f8:	b570      	push	{r4, r5, r6, lr}
 80003fa:	4d0d      	ldr	r5, [pc, #52]	; (8000430 <__libc_init_array+0x38>)
 80003fc:	4c0d      	ldr	r4, [pc, #52]	; (8000434 <__libc_init_array+0x3c>)
 80003fe:	1b64      	subs	r4, r4, r5
 8000400:	10a4      	asrs	r4, r4, #2
 8000402:	2600      	movs	r6, #0
 8000404:	42a6      	cmp	r6, r4
 8000406:	d109      	bne.n	800041c <__libc_init_array+0x24>
 8000408:	4d0b      	ldr	r5, [pc, #44]	; (8000438 <__libc_init_array+0x40>)
 800040a:	4c0c      	ldr	r4, [pc, #48]	; (800043c <__libc_init_array+0x44>)
 800040c:	f000 f818 	bl	8000440 <_init>
 8000410:	1b64      	subs	r4, r4, r5
 8000412:	10a4      	asrs	r4, r4, #2
 8000414:	2600      	movs	r6, #0
 8000416:	42a6      	cmp	r6, r4
 8000418:	d105      	bne.n	8000426 <__libc_init_array+0x2e>
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000420:	4798      	blx	r3
 8000422:	3601      	adds	r6, #1
 8000424:	e7ee      	b.n	8000404 <__libc_init_array+0xc>
 8000426:	f855 3b04 	ldr.w	r3, [r5], #4
 800042a:	4798      	blx	r3
 800042c:	3601      	adds	r6, #1
 800042e:	e7f2      	b.n	8000416 <__libc_init_array+0x1e>
 8000430:	08000458 	.word	0x08000458
 8000434:	08000458 	.word	0x08000458
 8000438:	08000458 	.word	0x08000458
 800043c:	0800045c 	.word	0x0800045c

08000440 <_init>:
 8000440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000442:	bf00      	nop
 8000444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000446:	bc08      	pop	{r3}
 8000448:	469e      	mov	lr, r3
 800044a:	4770      	bx	lr

0800044c <_fini>:
 800044c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044e:	bf00      	nop
 8000450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000452:	bc08      	pop	{r3}
 8000454:	469e      	mov	lr, r3
 8000456:	4770      	bx	lr
