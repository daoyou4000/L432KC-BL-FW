
L432KC_Firmware_anywhere.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  20000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .got          00000020  2000018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .text         00001f8c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000040  08002138  08002138  00012138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08002178  08002178  000201c4  2**0
                  CONTENTS
  5 .ARM          00000000  08002178  08002178  000201c4  2**0
                  CONTENTS
  6 .preinit_array 00000000  08002178  08002178  000201c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08002178  08002178  00012178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800217c  0800217c  0001217c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000000c  200001ac  08002180  000201ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .got.plt      0000000c  200001b8  0800218c  000201b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000007c  200001c4  08002198  000201c4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000240  08002198  00020240  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ce85  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001c03  00000000  00000000  0002d079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c58  00000000  00000000  0002ec80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f8da  00000000  00000000  0002f8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ceca  00000000  00000000  0004f1b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c245d  00000000  00000000  0005c07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011e4d9  2**0
                  CONTENTS, READONLY
 21 .debug_ranges 00000b68  00000000  00000000  0011e530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000320c  00000000  00000000  0011f098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200001c4 	.word	0x200001c4
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002120 	.word	0x08002120

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200001c8 	.word	0x200001c8
 80001e8:	08002120 	.word	0x08002120

080001ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
  HAL_Init();
 80001f0:	f000 fad5 	bl	800079e <HAL_Init>
  SystemClock_Config();
 80001f4:	f000 f810 	bl	8000218 <SystemClock_Config>
  MX_GPIO_Init();
 80001f8:	f000 f8cc 	bl	8000394 <MX_GPIO_Init>
  MX_TIM7_Init();
 80001fc:	f000 f86e 	bl	80002dc <MX_TIM7_Init>
  HAL_TIM_Base_Start_IT(&htim7);
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <main+0x28>)
 8000202:	f859 3003 	ldr.w	r3, [r9, r3]
 8000206:	4618      	mov	r0, r3
 8000208:	f001 fd64 	bl	8001cd4 <HAL_TIM_Base_Start_IT>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800020c:	b662      	cpsie	i
}
 800020e:	bf00      	nop
  __enable_irq();

  while (1)
 8000210:	e7fe      	b.n	8000210 <main+0x24>
 8000212:	bf00      	nop
 8000214:	0000001c 	.word	0x0000001c

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b096      	sub	sp, #88	; 0x58
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0314 	add.w	r3, r7, #20
 8000222:	2244      	movs	r2, #68	; 0x44
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f001 ff72 	bl	8002110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	463b      	mov	r3, r7
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]
 8000238:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800023a:	f000 fe15 	bl	8000e68 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800023e:	4b26      	ldr	r3, [pc, #152]	; (80002d8 <SystemClock_Config+0xc0>)
 8000240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000244:	4a24      	ldr	r2, [pc, #144]	; (80002d8 <SystemClock_Config+0xc0>)
 8000246:	f023 0318 	bic.w	r3, r3, #24
 800024a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800024e:	2314      	movs	r3, #20
 8000250:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000252:	2301      	movs	r3, #1
 8000254:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000256:	2301      	movs	r3, #1
 8000258:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800025a:	2300      	movs	r3, #0
 800025c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800025e:	2360      	movs	r3, #96	; 0x60
 8000260:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000262:	2302      	movs	r3, #2
 8000264:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000266:	2301      	movs	r3, #1
 8000268:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800026a:	2301      	movs	r3, #1
 800026c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800026e:	2310      	movs	r3, #16
 8000270:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000272:	2307      	movs	r3, #7
 8000274:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000276:	2302      	movs	r3, #2
 8000278:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800027a:	2302      	movs	r3, #2
 800027c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027e:	f107 0314 	add.w	r3, r7, #20
 8000282:	4618      	mov	r0, r3
 8000284:	f000 fe66 	bl	8000f54 <HAL_RCC_OscConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800028e:	f000 f8cb 	bl	8000428 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000292:	230f      	movs	r3, #15
 8000294:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000296:	2303      	movs	r3, #3
 8000298:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029a:	2300      	movs	r3, #0
 800029c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002a6:	463b      	mov	r3, r7
 80002a8:	2101      	movs	r1, #1
 80002aa:	4618      	mov	r0, r3
 80002ac:	f001 fa78 	bl	80017a0 <HAL_RCC_ClockConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80002b6:	f000 f8b7 	bl	8000428 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002be:	f000 fdf1 	bl	8000ea4 <HAL_PWREx_ControlVoltageScaling>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002c8:	f000 f8ae 	bl	8000428 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80002cc:	f001 fc3e 	bl	8001b4c <HAL_RCCEx_EnableMSIPLLMode>
}
 80002d0:	bf00      	nop
 80002d2:	3758      	adds	r7, #88	; 0x58
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	40021000 	.word	0x40021000

080002dc <MX_TIM7_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  htim7.Instance = TIM7;
 80002e0:	4b20      	ldr	r3, [pc, #128]	; (8000364 <MX_TIM7_Init+0x88>)
 80002e2:	f859 3003 	ldr.w	r3, [r9, r3]
 80002e6:	461a      	mov	r2, r3
 80002e8:	4b1c      	ldr	r3, [pc, #112]	; (800035c <MX_TIM7_Init+0x80>)
 80002ea:	6013      	str	r3, [r2, #0]
  htim7.Init.Prescaler = 80000 - 1;
 80002ec:	4b1d      	ldr	r3, [pc, #116]	; (8000364 <MX_TIM7_Init+0x88>)
 80002ee:	f859 3003 	ldr.w	r3, [r9, r3]
 80002f2:	461a      	mov	r2, r3
 80002f4:	4b1a      	ldr	r3, [pc, #104]	; (8000360 <MX_TIM7_Init+0x84>)
 80002f6:	6053      	str	r3, [r2, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002f8:	4b1a      	ldr	r3, [pc, #104]	; (8000364 <MX_TIM7_Init+0x88>)
 80002fa:	f859 3003 	ldr.w	r3, [r9, r3]
 80002fe:	461a      	mov	r2, r3
 8000300:	2300      	movs	r3, #0
 8000302:	6093      	str	r3, [r2, #8]
  htim7.Init.Period = 1000;
 8000304:	4b17      	ldr	r3, [pc, #92]	; (8000364 <MX_TIM7_Init+0x88>)
 8000306:	f859 3003 	ldr.w	r3, [r9, r3]
 800030a:	461a      	mov	r2, r3
 800030c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000310:	60d3      	str	r3, [r2, #12]
  htim7.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000312:	4b14      	ldr	r3, [pc, #80]	; (8000364 <MX_TIM7_Init+0x88>)
 8000314:	f859 3003 	ldr.w	r3, [r9, r3]
 8000318:	461a      	mov	r2, r3
 800031a:	2300      	movs	r3, #0
 800031c:	6113      	str	r3, [r2, #16]
  htim7.Init.RepetitionCounter = 0;
 800031e:	4b11      	ldr	r3, [pc, #68]	; (8000364 <MX_TIM7_Init+0x88>)
 8000320:	f859 3003 	ldr.w	r3, [r9, r3]
 8000324:	461a      	mov	r2, r3
 8000326:	2300      	movs	r3, #0
 8000328:	6153      	str	r3, [r2, #20]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800032a:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <MX_TIM7_Init+0x88>)
 800032c:	f859 3003 	ldr.w	r3, [r9, r3]
 8000330:	461a      	mov	r2, r3
 8000332:	2300      	movs	r3, #0
 8000334:	6193      	str	r3, [r2, #24]

  HAL_TIM_Base_DeInit(&htim7);
 8000336:	4b0b      	ldr	r3, [pc, #44]	; (8000364 <MX_TIM7_Init+0x88>)
 8000338:	f859 3003 	ldr.w	r3, [r9, r3]
 800033c:	4618      	mov	r0, r3
 800033e:	f001 fc6c 	bl	8001c1a <HAL_TIM_Base_DeInit>

  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000342:	4b08      	ldr	r3, [pc, #32]	; (8000364 <MX_TIM7_Init+0x88>)
 8000344:	f859 3003 	ldr.w	r3, [r9, r3]
 8000348:	4618      	mov	r0, r3
 800034a:	f001 fc0f 	bl	8001b6c <HAL_TIM_Base_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_TIM7_Init+0x7c>
  {
    Error_Handler();
 8000354:	f000 f868 	bl	8000428 <Error_Handler>
  }
}
 8000358:	bf00      	nop
 800035a:	bd80      	pop	{r7, pc}
 800035c:	40001400 	.word	0x40001400
 8000360:	0001387f 	.word	0x0001387f
 8000364:	0000001c 	.word	0x0000001c

08000368 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
  if (htim == &htim7)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a07      	ldr	r2, [pc, #28]	; (8000390 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000374:	f859 2002 	ldr.w	r2, [r9, r2]
 8000378:	4293      	cmp	r3, r2
 800037a:	d103      	bne.n	8000384 <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800037c:	2108      	movs	r1, #8
 800037e:	4803      	ldr	r0, [pc, #12]	; (800038c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000380:	f000 fd58 	bl	8000e34 <HAL_GPIO_TogglePin>
  }

}
 8000384:	bf00      	nop
 8000386:	3708      	adds	r7, #8
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	48000400 	.word	0x48000400
 8000390:	0000001c 	.word	0x0000001c

08000394 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b088      	sub	sp, #32
 8000398:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039a:	f107 030c 	add.w	r3, r7, #12
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]
 80003a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003aa:	4b1d      	ldr	r3, [pc, #116]	; (8000420 <MX_GPIO_Init+0x8c>)
 80003ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ae:	4a1c      	ldr	r2, [pc, #112]	; (8000420 <MX_GPIO_Init+0x8c>)
 80003b0:	f043 0304 	orr.w	r3, r3, #4
 80003b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003b6:	4b1a      	ldr	r3, [pc, #104]	; (8000420 <MX_GPIO_Init+0x8c>)
 80003b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ba:	f003 0304 	and.w	r3, r3, #4
 80003be:	60bb      	str	r3, [r7, #8]
 80003c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c2:	4b17      	ldr	r3, [pc, #92]	; (8000420 <MX_GPIO_Init+0x8c>)
 80003c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c6:	4a16      	ldr	r2, [pc, #88]	; (8000420 <MX_GPIO_Init+0x8c>)
 80003c8:	f043 0301 	orr.w	r3, r3, #1
 80003cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ce:	4b14      	ldr	r3, [pc, #80]	; (8000420 <MX_GPIO_Init+0x8c>)
 80003d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d2:	f003 0301 	and.w	r3, r3, #1
 80003d6:	607b      	str	r3, [r7, #4]
 80003d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003da:	4b11      	ldr	r3, [pc, #68]	; (8000420 <MX_GPIO_Init+0x8c>)
 80003dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003de:	4a10      	ldr	r2, [pc, #64]	; (8000420 <MX_GPIO_Init+0x8c>)
 80003e0:	f043 0302 	orr.w	r3, r3, #2
 80003e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003e6:	4b0e      	ldr	r3, [pc, #56]	; (8000420 <MX_GPIO_Init+0x8c>)
 80003e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ea:	f003 0302 	and.w	r3, r3, #2
 80003ee:	603b      	str	r3, [r7, #0]
 80003f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80003f2:	2200      	movs	r2, #0
 80003f4:	2108      	movs	r1, #8
 80003f6:	480b      	ldr	r0, [pc, #44]	; (8000424 <MX_GPIO_Init+0x90>)
 80003f8:	f000 fd04 	bl	8000e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80003fc:	2308      	movs	r3, #8
 80003fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000400:	2301      	movs	r3, #1
 8000402:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000404:	2300      	movs	r3, #0
 8000406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000408:	2300      	movs	r3, #0
 800040a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800040c:	f107 030c 	add.w	r3, r7, #12
 8000410:	4619      	mov	r1, r3
 8000412:	4804      	ldr	r0, [pc, #16]	; (8000424 <MX_GPIO_Init+0x90>)
 8000414:	f000 fb8c 	bl	8000b30 <HAL_GPIO_Init>

}
 8000418:	bf00      	nop
 800041a:	3720      	adds	r7, #32
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	40021000 	.word	0x40021000
 8000424:	48000400 	.word	0x48000400

08000428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800042c:	b672      	cpsid	i
}
 800042e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000430:	e7fe      	b.n	8000430 <Error_Handler+0x8>
	...

08000434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800043a:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <HAL_MspInit+0x44>)
 800043c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800043e:	4a0e      	ldr	r2, [pc, #56]	; (8000478 <HAL_MspInit+0x44>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	6613      	str	r3, [r2, #96]	; 0x60
 8000446:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <HAL_MspInit+0x44>)
 8000448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000452:	4b09      	ldr	r3, [pc, #36]	; (8000478 <HAL_MspInit+0x44>)
 8000454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000456:	4a08      	ldr	r2, [pc, #32]	; (8000478 <HAL_MspInit+0x44>)
 8000458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800045c:	6593      	str	r3, [r2, #88]	; 0x58
 800045e:	4b06      	ldr	r3, [pc, #24]	; (8000478 <HAL_MspInit+0x44>)
 8000460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000466:	603b      	str	r3, [r7, #0]
 8000468:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	40021000 	.word	0x40021000

0800047c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a0d      	ldr	r2, [pc, #52]	; (80004c0 <HAL_TIM_Base_MspInit+0x44>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d113      	bne.n	80004b6 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800048e:	4b0d      	ldr	r3, [pc, #52]	; (80004c4 <HAL_TIM_Base_MspInit+0x48>)
 8000490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000492:	4a0c      	ldr	r2, [pc, #48]	; (80004c4 <HAL_TIM_Base_MspInit+0x48>)
 8000494:	f043 0320 	orr.w	r3, r3, #32
 8000498:	6593      	str	r3, [r2, #88]	; 0x58
 800049a:	4b0a      	ldr	r3, [pc, #40]	; (80004c4 <HAL_TIM_Base_MspInit+0x48>)
 800049c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800049e:	f003 0320 	and.w	r3, r3, #32
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80004a6:	2200      	movs	r2, #0
 80004a8:	2100      	movs	r1, #0
 80004aa:	2037      	movs	r0, #55	; 0x37
 80004ac:	f000 fafb 	bl	8000aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80004b0:	2037      	movs	r0, #55	; 0x37
 80004b2:	f000 fb14 	bl	8000ade <HAL_NVIC_EnableIRQ>
  }

}
 80004b6:	bf00      	nop
 80004b8:	3710      	adds	r7, #16
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40001400 	.word	0x40001400
 80004c4:	40021000 	.word	0x40021000

080004c8 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <HAL_TIM_Base_MspDeInit+0x2c>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d108      	bne.n	80004ec <HAL_TIM_Base_MspDeInit+0x24>
  {
    /* Peripheral clock disable */
    __HAL_RCC_TIM7_CLK_DISABLE();
 80004da:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <HAL_TIM_Base_MspDeInit+0x30>)
 80004dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004de:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <HAL_TIM_Base_MspDeInit+0x30>)
 80004e0:	f023 0320 	bic.w	r3, r3, #32
 80004e4:	6593      	str	r3, [r2, #88]	; 0x58

    /* TIM7 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM7_IRQn);
 80004e6:	2037      	movs	r0, #55	; 0x37
 80004e8:	f000 fb07 	bl	8000afa <HAL_NVIC_DisableIRQ>
  }

}
 80004ec:	bf00      	nop
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40001400 	.word	0x40001400
 80004f8:	40021000 	.word	0x40021000

080004fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000500:	e7fe      	b.n	8000500 <NMI_Handler+0x4>
	...

08000504 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  uint32_t u32Cfsr = *((uint32_t*)0xE000ED28);
 800050a:	4b03      	ldr	r3, [pc, #12]	; (8000518 <HardFault_Handler+0x14>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	607b      	str	r3, [r7, #4]
  u32Cfsr += 0; // To stop compile nags

  uint32_t u32Bfar = *((uint32_t*)0xE000ED38);
 8000510:	4b02      	ldr	r3, [pc, #8]	; (800051c <HardFault_Handler+0x18>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	603b      	str	r3, [r7, #0]
  u32Bfar += 0;

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000516:	e7fe      	b.n	8000516 <HardFault_Handler+0x12>
 8000518:	e000ed28 	.word	0xe000ed28
 800051c:	e000ed38 	.word	0xe000ed38

08000520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000524:	e7fe      	b.n	8000524 <MemManage_Handler+0x4>

08000526 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800052a:	e7fe      	b.n	800052a <BusFault_Handler+0x4>

0800052c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000530:	e7fe      	b.n	8000530 <UsageFault_Handler+0x4>

08000532 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr

0800054e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000560:	f000 f97a 	bl	8000858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}

08000568 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim7);
 800056c:	4b03      	ldr	r3, [pc, #12]	; (800057c <TIM7_IRQHandler+0x14>)
 800056e:	f859 3003 	ldr.w	r3, [r9, r3]
 8000572:	4618      	mov	r0, r3
 8000574:	f001 fc02 	bl	8001d7c <HAL_TIM_IRQHandler>
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}
 800057c:	0000001c 	.word	0x0000001c

08000580 <SystemInit>:
  */

extern uint32_t gu32FirmwareAbsPosition;

void SystemInit(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000584:	f3bf 8f5f 	dmb	sy
}
 8000588:	bf00      	nop
  __DMB();
  SCB->VTOR = gu32RamVectorTableBegin;
 800058a:	4a1a      	ldr	r2, [pc, #104]	; (80005f4 <SystemInit+0x74>)
 800058c:	4b1b      	ldr	r3, [pc, #108]	; (80005fc <SystemInit+0x7c>)
 800058e:	f859 3003 	ldr.w	r3, [r9, r3]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 8000596:	f3bf 8f5f 	dmb	sy
}
 800059a:	bf00      	nop
  __DMB();

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800059c:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <SystemInit+0x74>)
 800059e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005a2:	4a14      	ldr	r2, [pc, #80]	; (80005f4 <SystemInit+0x74>)
 80005a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80005ac:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <SystemInit+0x78>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a11      	ldr	r2, [pc, #68]	; (80005f8 <SystemInit+0x78>)
 80005b2:	f043 0301 	orr.w	r3, r3, #1
 80005b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80005b8:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <SystemInit+0x78>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80005be:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <SystemInit+0x78>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a0d      	ldr	r2, [pc, #52]	; (80005f8 <SystemInit+0x78>)
 80005c4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80005c8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80005cc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <SystemInit+0x78>)
 80005d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005d4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005d6:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <SystemInit+0x78>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a07      	ldr	r2, [pc, #28]	; (80005f8 <SystemInit+0x78>)
 80005dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005e0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80005e2:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <SystemInit+0x78>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	619a      	str	r2, [r3, #24]
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	e000ed00 	.word	0xe000ed00
 80005f8:	40021000 	.word	0x40021000
 80005fc:	00000018 	.word	0x00000018

08000600 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000600:	f8df d13c 	ldr.w	sp, [pc, #316]	; 8000740 <LoopForever+0x4>




  // Store r10 passed by bootloader as gu32FirmwareAbsPosition, need to use hoop if Cortex-M0
  mov r7, r10
 8000604:	4657      	mov	r7, sl
  ldr r2, =gu32FirmwareAbsPosition
 8000606:	4a4f      	ldr	r2, [pc, #316]	; (8000744 <LoopForever+0x8>)
  str r7, [r2]
 8000608:	6017      	str	r7, [r2, #0]

  // Store r11 passed by bootloader as gu32FirmwareOffset, need to use hoop if Cortex-M0
  mov r7, r11
 800060a:	465f      	mov	r7, fp
  ldr r2, =gu32FirmwareOffset
 800060c:	4a4e      	ldr	r2, [pc, #312]	; (8000748 <LoopForever+0xc>)
  str r7, [r2]
 800060e:	6017      	str	r7, [r2, #0]

  // Store r12 passed by bootloader as gu32FirmwareAbsOffsetChecksum, need to use hoop if Cortex-M0
  mov r7, r12
 8000610:	4667      	mov	r7, ip
  ldr r2, =gu32FirmwareAbsOffsetChecksum
 8000612:	4a4e      	ldr	r2, [pc, #312]	; (800074c <LoopForever+0x10>)
  str r7, [r2]
 8000614:	6017      	str	r7, [r2, #0]

  // Store vector table RAM being address dynamically so systemconfig can map it
  ldr r7, =__ram_vector_table_begin
 8000616:	4f4e      	ldr	r7, [pc, #312]	; (8000750 <LoopForever+0x14>)
  ldr r2, =gu32RamVectorTableBegin
 8000618:	4a4e      	ldr	r2, [pc, #312]	; (8000754 <LoopForever+0x18>)
  str r7, [r2]
 800061a:	6017      	str	r7, [r2, #0]

  // Firmware may be booting as standalone. In that case inspect the checksum
  // and if it does not match, we are most likely running from standalone.
  // Funny thing, Cortex-M0 reset values seem to be like 0xffffffff? Well,
  // checksum in anycase takes care of that correct values are loaded.
  ldr r2, =gu32FirmwareAbsPosition // Load variable address
 800061c:	4a49      	ldr	r2, [pc, #292]	; (8000744 <LoopForever+0x8>)
  ldr r2, [r2] // Load variable data
 800061e:	6812      	ldr	r2, [r2, #0]
  ldr r3, =gu32FirmwareOffset // Load variable address
 8000620:	4b49      	ldr	r3, [pc, #292]	; (8000748 <LoopForever+0xc>)
  ldr r3, [r3] // Load variable data
 8000622:	681b      	ldr	r3, [r3, #0]
  ldr r4, =gu32FirmwareAbsOffsetChecksum // Load variable address
 8000624:	4c49      	ldr	r4, [pc, #292]	; (800074c <LoopForever+0x10>)
  ldr r4, [r4] // Load variable data
 8000626:	6824      	ldr	r4, [r4, #0]
  movs r1, r2// Calculating the checksum into r1
 8000628:	0011      	movs	r1, r2
  eors r1, r1, r3 // r2/gu32FirmwareAbsPosition already there, need only r3/gu32FirmwareOffset
 800062a:	4059      	eors	r1, r3
  cmp r1, r4 // Actual compare
 800062c:	42a1      	cmp	r1, r4
  beq BootloadedBootContinue // If match, just do nothing
 800062e:	d005      	beq.n	800063c <BootloadedBootContinue>
  // Did not match, so we need to store correct values of gu32FirmwareAbsPosition and gu32FirmwareOffset
  ldr r1, =__flash_begin; // Load variable address
 8000630:	4949      	ldr	r1, [pc, #292]	; (8000758 <LoopForever+0x1c>)
  ldr r2, =gu32FirmwareAbsPosition // Load variable address
 8000632:	4a44      	ldr	r2, [pc, #272]	; (8000744 <LoopForever+0x8>)
  str r1, [r2] // Finally store the new value to ram
 8000634:	6011      	str	r1, [r2, #0]
  movs r1, #0 // Put zero offset
 8000636:	2100      	movs	r1, #0
  ldr r2, =gu32FirmwareOffset // Load firmware offset variable address
 8000638:	4a43      	ldr	r2, [pc, #268]	; (8000748 <LoopForever+0xc>)
  str r1, [r2] // Store zero offset
 800063a:	6011      	str	r1, [r2, #0]

0800063c <BootloadedBootContinue>:


#ifdef GOT_IN_RAM

GlobalOffsetTableCopyPatchInit:
  movs r0, #0 // Loop variable
 800063c:	2000      	movs	r0, #0
  movs r1, #0 // Pointer (just introduction)
 800063e:	2100      	movs	r1, #0

08000640 <GlobalOffsetTableCopyPatchLoopCond>:

GlobalOffsetTableCopyPatchLoopCond:
  ldr r2, =__flash_global_offset_table_begin // Need global offset table table beginning for pointer
 8000640:	4a46      	ldr	r2, [pc, #280]	; (800075c <LoopForever+0x20>)
  ldr r3, =__flash_global_offset_table_end // And need end for checking loop
 8000642:	4b47      	ldr	r3, [pc, #284]	; (8000760 <LoopForever+0x24>)
  ldr r4, =gu32FirmwareOffset // Need also data offset variable address
 8000644:	4c40      	ldr	r4, [pc, #256]	; (8000748 <LoopForever+0xc>)
  ldr r4, [r4] // And the actual offset value
 8000646:	6824      	ldr	r4, [r4, #0]
  adds r2, r2, r4 // Patching flash global offset table begin to honour offset
 8000648:	1912      	adds	r2, r2, r4
  adds r3, r3, r4 // Patching flash global offset table end to honour offset
 800064a:	191b      	adds	r3, r3, r4
  adds r1, r0, r2 // Pointer value is loop variable + offsetted flash global offset table begin
 800064c:	1881      	adds	r1, r0, r2
  cmp r1, r3 // Compare pointer against global offset table flash end
 800064e:	4299      	cmp	r1, r3
  bhs GlobalOffsetTableCopyPatchEnd // If getting past limits, go to end
 8000650:	d20e      	bcs.n	8000670 <GlobalOffsetTableCopyPatchEnd>

08000652 <GlobalOffsetTableCopyPatchLoopBody>:

GlobalOffsetTableCopyPatchLoopBody:
  ldr r2, [r1] // Load the actual data via pointer
 8000652:	680a      	ldr	r2, [r1, #0]
  ldr r3, =__flash_begin // Need flash begin boundary for checking
 8000654:	4b40      	ldr	r3, [pc, #256]	; (8000758 <LoopForever+0x1c>)
  ldr r4, =__flash_end // Need also flash end boundary for checking
 8000656:	4c43      	ldr	r4, [pc, #268]	; (8000764 <LoopForever+0x28>)
  cmp r2, r3 // Comparing loaded data to flash begin
 8000658:	429a      	cmp	r2, r3
  blo GlobalOffsetTableStoreData // If less than flash begin, jump to store
 800065a:	d304      	bcc.n	8000666 <GlobalOffsetTableStoreData>
  cmp r2, r4 // Comparing loaded data to flash end
 800065c:	42a2      	cmp	r2, r4
  bhs GlobalOffsetTableStoreData // If more than or equal to end, jump to store
 800065e:	d202      	bcs.n	8000666 <GlobalOffsetTableStoreData>

08000660 <GlobalOffsetTablePatchData>:

GlobalOffsetTablePatchData:
  ldr r3, =gu32FirmwareOffset // Need data offset variable address
 8000660:	4b39      	ldr	r3, [pc, #228]	; (8000748 <LoopForever+0xc>)
  ldr r3, [r3] // And then the actual data
 8000662:	681b      	ldr	r3, [r3, #0]
  adds r2, r2, r3 // Patch the data
 8000664:	18d2      	adds	r2, r2, r3

08000666 <GlobalOffsetTableStoreData>:

GlobalOffsetTableStoreData:
  ldr r3, =__ram_global_offset_table_begin // Get global offset table begin in ram for ram data pointer
 8000666:	4b40      	ldr	r3, [pc, #256]	; (8000768 <LoopForever+0x2c>)
  adds r3, r3, r0 // Add loop variable
 8000668:	181b      	adds	r3, r3, r0
  str r2, [r3] // Store the data
 800066a:	601a      	str	r2, [r3, #0]

0800066c <GlobalOffsetTableLoopIncrements>:

GlobalOffsetTableLoopIncrements:
  adds r0, r0, #4 // Increment loop
 800066c:	3004      	adds	r0, #4
  b GlobalOffsetTableCopyPatchLoopCond // Jump to loop condition checking
 800066e:	e7e7      	b.n	8000640 <GlobalOffsetTableCopyPatchLoopCond>

08000670 <GlobalOffsetTableCopyPatchEnd>:

GlobalOffsetTableCopyPatchEnd:
  ldr r0, =__ram_global_offset_table_begin
 8000670:	483d      	ldr	r0, [pc, #244]	; (8000768 <LoopForever+0x2c>)
  mov r9, r0 // Stupid trick to put global offset table location to r9, for Cortex-M0
 8000672:	4681      	mov	r9, r0

08000674 <VectorTableCopyPatchInit>:



  // Need to copy and patch vector table in assembly so nobody comes to mess around
VectorTableCopyPatchInit:
  movs r0, #0 // Loop variable
 8000674:	2000      	movs	r0, #0
  movs r1, #0 // Pointer (just introduction)
 8000676:	2100      	movs	r1, #0

08000678 <VectorTableCopyPatchLoopCond>:

VectorTableCopyPatchLoopCond:
  ldr r2, =__flash_vector_table_begin // Need vector table beginning for pointer
 8000678:	4a3c      	ldr	r2, [pc, #240]	; (800076c <LoopForever+0x30>)
  ldr r3, =__flash_vector_table_end // And need end for checking loop
 800067a:	4b3d      	ldr	r3, [pc, #244]	; (8000770 <LoopForever+0x34>)
  ldr r4, =gu32FirmwareOffset // Need also data offset variable address
 800067c:	4c32      	ldr	r4, [pc, #200]	; (8000748 <LoopForever+0xc>)
  ldr r4, [r4] // And the actual offset value
 800067e:	6824      	ldr	r4, [r4, #0]
  adds r2, r2, r4 // Patching flash vector table begin to honour offset
 8000680:	1912      	adds	r2, r2, r4
  adds r3, r3, r4 // Patching flash vector table end to honour offset
 8000682:	191b      	adds	r3, r3, r4
  adds r1, r0, r2 // Pointer value is loop variable + offsetted flash vector table begin
 8000684:	1881      	adds	r1, r0, r2
  cmp r1, r3 // Compare pointer against vector table flash end
 8000686:	4299      	cmp	r1, r3
  bhs VectorTableCopyPatchEnd // If getting past limits, go to end
 8000688:	d20e      	bcs.n	80006a8 <VectorTableCopyPatchEnd>

0800068a <VectorTableCopyPatchLoopBody>:

VectorTableCopyPatchLoopBody:
  ldr r2, [r1] // Load the actual data via pointer
 800068a:	680a      	ldr	r2, [r1, #0]
  ldr r3, =__flash_begin // Need flash begin boundary for checking
 800068c:	4b32      	ldr	r3, [pc, #200]	; (8000758 <LoopForever+0x1c>)
  ldr r4, =__flash_end // Need also flash end boundary for checking
 800068e:	4c35      	ldr	r4, [pc, #212]	; (8000764 <LoopForever+0x28>)
  cmp r2, r3 // Comparing loaded data to flash begin
 8000690:	429a      	cmp	r2, r3
  blo VectorTableStoreData // If less than flash begin, jump to store
 8000692:	d304      	bcc.n	800069e <VectorTableStoreData>
  cmp r2, r4 // Comparing loaded data to flash end
 8000694:	42a2      	cmp	r2, r4
  bhs VectorTableStoreData // If more than or equal to end, jump to store
 8000696:	d202      	bcs.n	800069e <VectorTableStoreData>

08000698 <VectorTablePatchData>:

VectorTablePatchData:
  ldr r3, =gu32FirmwareOffset // Need data offset variable address
 8000698:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <LoopForever+0xc>)
  ldr r3, [r3] // And then the actual data
 800069a:	681b      	ldr	r3, [r3, #0]
  adds r2, r2, r3 // Patch the data
 800069c:	18d2      	adds	r2, r2, r3

0800069e <VectorTableStoreData>:

VectorTableStoreData:
  ldr r3, =__ram_vector_table_begin // Get vector table begin in ram for ram data pointer
 800069e:	4b2c      	ldr	r3, [pc, #176]	; (8000750 <LoopForever+0x14>)
  adds r3, r3, r0 // Add loop variable
 80006a0:	181b      	adds	r3, r3, r0
  str r2, [r3] // Store the data
 80006a2:	601a      	str	r2, [r3, #0]

080006a4 <VectorTableLoopIncrements>:

VectorTableLoopIncrements:
  adds r0, r0, #4 // Increment loop
 80006a4:	3004      	adds	r0, #4
  b VectorTableCopyPatchLoopCond // Jump to loop condition checking
 80006a6:	e7e7      	b.n	8000678 <VectorTableCopyPatchLoopCond>

080006a8 <VectorTableCopyPatchEnd>:
VectorTableCopyPatchEnd:



/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80006a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006aa:	e006      	b.n	80006ba <LoopCopyDataInit>

080006ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006ac:	4b31      	ldr	r3, [pc, #196]	; (8000774 <LoopForever+0x38>)
  ldr r7, =gu32FirmwareOffset // Load firmware offset variable address
 80006ae:	4f26      	ldr	r7, [pc, #152]	; (8000748 <LoopForever+0xc>)
  ldr r7, [r7] // Load the actual firmware offset variable data
 80006b0:	683f      	ldr	r7, [r7, #0]
  adds r3, r3, r7 // Patch the sidata location with offset
 80006b2:	19db      	adds	r3, r3, r7
  ldr r3, [r3, r1]
 80006b4:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006b6:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80006b8:	3104      	adds	r1, #4

080006ba <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006ba:	482f      	ldr	r0, [pc, #188]	; (8000778 <LoopForever+0x3c>)
  ldr r3, =_edata
 80006bc:	4b2f      	ldr	r3, [pc, #188]	; (800077c <LoopForever+0x40>)
  adds  r2, r0, r1
 80006be:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006c0:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006c2:	d3f3      	bcc.n	80006ac <CopyDataInit>
  ldr r2, =_sbss
 80006c4:	4a2e      	ldr	r2, [pc, #184]	; (8000780 <LoopForever+0x44>)
  b LoopFillZerobss
 80006c6:	e00e      	b.n	80006e6 <LoopFillZerobss>

080006c8 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  // Here we need to check that we are not zeroing out addresses or needed symbols

  ldr r6, =gu32FirmwareAbsPosition // Load address of absolute firmware position variable
 80006c8:	4e1e      	ldr	r6, [pc, #120]	; (8000744 <LoopForever+0x8>)
  cmp r2, r6 // Compare with what we are going to zero
 80006ca:	42b2      	cmp	r2, r6
  beq FillZerobssSkip // If we should skip zeroing, jump away
 80006cc:	d00a      	beq.n	80006e4 <FillZerobssSkip>

  ldr r6, =gu32FirmwareOffset // Load address of firmware offset variable
 80006ce:	4e1e      	ldr	r6, [pc, #120]	; (8000748 <LoopForever+0xc>)
  cmp r2, r6 // Compare with what we are going to zero
 80006d0:	42b2      	cmp	r2, r6
  beq FillZerobssSkip // If we should skip zeroing, jump away
 80006d2:	d007      	beq.n	80006e4 <FillZerobssSkip>

  ldr r6, =gu32FirmwareAbsOffsetChecksum // Load address of firmware position and offset checksum
 80006d4:	4e1d      	ldr	r6, [pc, #116]	; (800074c <LoopForever+0x10>)
  cmp r2, r6 // Compare with what we are going to zero
 80006d6:	42b2      	cmp	r2, r6
  beq FillZerobssSkip // If we should skip zeroing, jump away
 80006d8:	d004      	beq.n	80006e4 <FillZerobssSkip>

  ldr r6, =gu32RamVectorTableBegin // Load address of ram vector table begin variable
 80006da:	4e1e      	ldr	r6, [pc, #120]	; (8000754 <LoopForever+0x18>)
  cmp r2, r6 // Compare with what we are going to zero
 80006dc:	42b2      	cmp	r2, r6
  beq FillZerobssSkip // If we should skip zeroing, jump away
 80006de:	d001      	beq.n	80006e4 <FillZerobssSkip>

  movs  r3, #0 // Load zero for storing
 80006e0:	2300      	movs	r3, #0
  str  r3, [r2] // If not escaped yet, make the store
 80006e2:	6013      	str	r3, [r2, #0]

080006e4 <FillZerobssSkip>:

FillZerobssSkip:
  adds r2, r2, #4
 80006e4:	3204      	adds	r2, #4

080006e6 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006e6:	4b27      	ldr	r3, [pc, #156]	; (8000784 <LoopForever+0x48>)
  cmp r2, r3
 80006e8:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006ea:	d3ed      	bcc.n	80006c8 <FillZerobss>



/* Call the clock system initialization function.*/
    bl  SystemInit
 80006ec:	f7ff ff48 	bl	8000580 <SystemInit>

080006f0 <CallPreinitsInit>:



// Make our own __libc_init_array
CallPreinitsInit:
  ldr r7, =gu32FirmwareOffset
 80006f0:	4f15      	ldr	r7, [pc, #84]	; (8000748 <LoopForever+0xc>)
  ldr r7, [r7]
 80006f2:	683f      	ldr	r7, [r7, #0]
  ldr r0, =__preinit_array_start
 80006f4:	4824      	ldr	r0, [pc, #144]	; (8000788 <LoopForever+0x4c>)
  adds r0, r7
 80006f6:	19c0      	adds	r0, r0, r7
  ldr r1, =__preinit_array_end
 80006f8:	4924      	ldr	r1, [pc, #144]	; (800078c <LoopForever+0x50>)
  adds r1, r7
 80006fa:	19c9      	adds	r1, r1, r7

080006fc <CallPreinitsLoopCond>:

CallPreinitsLoopCond:
  cmp r0, r1
 80006fc:	4288      	cmp	r0, r1
  beq CallPreinitsEnd// If same, it is at end, go away
 80006fe:	d007      	beq.n	8000710 <CallPreinitsEnd>

08000700 <CallPreinitsLoop>:

CallPreinitsLoop:
  ldr r5, =__init_array_start
 8000700:	4d23      	ldr	r5, [pc, #140]	; (8000790 <LoopForever+0x54>)
  ldr r4, =__init_array_end // Yes, order is funny to say the least
 8000702:	4c24      	ldr	r4, [pc, #144]	; (8000794 <LoopForever+0x58>)
  ldr r3, [r0]
 8000704:	6803      	ldr	r3, [r0, #0]
  push {r0, r1, r2, r3, r4, r5, r6, r7} // Save context because calling externals
 8000706:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
  blx r3
 8000708:	4798      	blx	r3
  pop {r0, r1, r2, r3, r4, r5, r6, r7} // Retrieve context
 800070a:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
  adds r0, r0, #4
 800070c:	3004      	adds	r0, #4
  b CallPreinitsLoopCond
 800070e:	e7f5      	b.n	80006fc <CallPreinitsLoopCond>

08000710 <CallPreinitsEnd>:

CallPreinitsEnd:
  ldr r3, =_init
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <LoopForever+0x5c>)
  adds r3, r7
 8000712:	19db      	adds	r3, r3, r7
  ldr r5, =__init_array_start
 8000714:	4d1e      	ldr	r5, [pc, #120]	; (8000790 <LoopForever+0x54>)
  adds r5, r7
 8000716:	19ed      	adds	r5, r5, r7
  ldr r4, =__init_array_end
 8000718:	4c1e      	ldr	r4, [pc, #120]	; (8000794 <LoopForever+0x58>)
  adds r4, r7
 800071a:	19e4      	adds	r4, r4, r7
  push {r0, r1, r2, r3, r4, r5, r6, r7} // Save context because calling externals
 800071c:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
  blx r3
 800071e:	4798      	blx	r3
  pop {r0, r1, r2, r3, r4, r5, r6, r7} // Retrieve context
 8000720:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}

08000722 <CallInitsInit>:

CallInitsInit:
  ldr r7, =gu32FirmwareOffset
 8000722:	4f09      	ldr	r7, [pc, #36]	; (8000748 <LoopForever+0xc>)
  ldr r7, [r7]
 8000724:	683f      	ldr	r7, [r7, #0]

08000726 <CallInitsLoopCond>:

CallInitsLoopCond:
  cmp r5, r4
 8000726:	42a5      	cmp	r5, r4
  beq CallInitsEnd
 8000728:	d006      	beq.n	8000738 <CallInitsEnd>

0800072a <CallInitsLoop>:

CallInitsLoop:
  ldr r3, [r5]
 800072a:	682b      	ldr	r3, [r5, #0]
  add r3, r3, r7
 800072c:	443b      	add	r3, r7
  push {r0, r1, r2, r3, r4, r5, r6, r7} // Save context because calling externals
 800072e:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
  blx r3
 8000730:	4798      	blx	r3
  pop {r0, r1, r2, r3, r4, r5, r6, r7} // Retrieve context
 8000732:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
  adds r5, r5, #4
 8000734:	3504      	adds	r5, #4
  b CallInitsLoopCond
 8000736:	e7f6      	b.n	8000726 <CallInitsLoopCond>

08000738 <CallInitsEnd>:
CallInitsEnd:



/* Call the application's entry point.*/
  bl  main
 8000738:	f7ff fd58 	bl	80001ec <main>

0800073c <LoopForever>:

LoopForever:
    b LoopForever
 800073c:	e7fe      	b.n	800073c <LoopForever>
 800073e:	0000      	.short	0x0000
  ldr   sp, =_estack    /* Set stack pointer */
 8000740:	20010000 	.word	0x20010000
  ldr r2, =gu32FirmwareAbsPosition
 8000744:	200001e0 	.word	0x200001e0
  ldr r2, =gu32FirmwareOffset
 8000748:	200001e8 	.word	0x200001e8
  ldr r2, =gu32FirmwareAbsOffsetChecksum
 800074c:	200001e4 	.word	0x200001e4
  ldr r7, =__ram_vector_table_begin
 8000750:	20000000 	.word	0x20000000
  ldr r2, =gu32RamVectorTableBegin
 8000754:	200001ec 	.word	0x200001ec
  ldr r1, =__flash_begin; // Load variable address
 8000758:	08000000 	.word	0x08000000
  ldr r2, =__flash_global_offset_table_begin // Need global offset table table beginning for pointer
 800075c:	0800018c 	.word	0x0800018c
  ldr r3, =__flash_global_offset_table_end // And need end for checking loop
 8000760:	080001ac 	.word	0x080001ac
  ldr r4, =__flash_end // Need also flash end boundary for checking
 8000764:	08040000 	.word	0x08040000
  ldr r3, =__ram_global_offset_table_begin // Get global offset table begin in ram for ram data pointer
 8000768:	2000018c 	.word	0x2000018c
  ldr r2, =__flash_vector_table_begin // Need vector table beginning for pointer
 800076c:	08000000 	.word	0x08000000
  ldr r3, =__flash_vector_table_end // And need end for checking loop
 8000770:	0800018c 	.word	0x0800018c
  ldr r3, =_sidata
 8000774:	08002180 	.word	0x08002180
  ldr r0, =_sdata
 8000778:	200001ac 	.word	0x200001ac
  ldr r3, =_edata
 800077c:	200001b8 	.word	0x200001b8
  ldr r2, =_sbss
 8000780:	200001c4 	.word	0x200001c4
  ldr r3, = _ebss
 8000784:	20000240 	.word	0x20000240
  ldr r0, =__preinit_array_start
 8000788:	08002178 	.word	0x08002178
  ldr r1, =__preinit_array_end
 800078c:	08002178 	.word	0x08002178
  ldr r5, =__init_array_start
 8000790:	08002178 	.word	0x08002178
  ldr r4, =__init_array_end // Yes, order is funny to say the least
 8000794:	0800217c 	.word	0x0800217c
  ldr r3, =_init
 8000798:	08002121 	.word	0x08002121

0800079c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800079c:	e7fe      	b.n	800079c <ADC1_IRQHandler>

0800079e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b082      	sub	sp, #8
 80007a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007a4:	2300      	movs	r3, #0
 80007a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007a8:	2003      	movs	r0, #3
 80007aa:	f000 f971 	bl	8000a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007ae:	2000      	movs	r0, #0
 80007b0:	f000 f80e 	bl	80007d0 <HAL_InitTick>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d002      	beq.n	80007c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
 80007bc:	71fb      	strb	r3, [r7, #7]
 80007be:	e001      	b.n	80007c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007c0:	f7ff fe38 	bl	8000434 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007c4:	79fb      	ldrb	r3, [r7, #7]
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007d8:	2300      	movs	r3, #0
 80007da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80007dc:	4b1b      	ldr	r3, [pc, #108]	; (800084c <HAL_InitTick+0x7c>)
 80007de:	f859 3003 	ldr.w	r3, [r9, r3]
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d02a      	beq.n	800083e <HAL_InitTick+0x6e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007e8:	4b19      	ldr	r3, [pc, #100]	; (8000850 <HAL_InitTick+0x80>)
 80007ea:	f859 3003 	ldr.w	r3, [r9, r3]
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	4b16      	ldr	r3, [pc, #88]	; (800084c <HAL_InitTick+0x7c>)
 80007f2:	f859 3003 	ldr.w	r3, [r9, r3]
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	4619      	mov	r1, r3
 80007fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000802:	fbb2 f3f3 	udiv	r3, r2, r3
 8000806:	4618      	mov	r0, r3
 8000808:	f000 f985 	bl	8000b16 <HAL_SYSTICK_Config>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d112      	bne.n	8000838 <HAL_InitTick+0x68>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2b0f      	cmp	r3, #15
 8000816:	d80c      	bhi.n	8000832 <HAL_InitTick+0x62>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000818:	2200      	movs	r2, #0
 800081a:	6879      	ldr	r1, [r7, #4]
 800081c:	f04f 30ff 	mov.w	r0, #4294967295
 8000820:	f000 f941 	bl	8000aa6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000824:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <HAL_InitTick+0x84>)
 8000826:	f859 3003 	ldr.w	r3, [r9, r3]
 800082a:	461a      	mov	r2, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	6013      	str	r3, [r2, #0]
 8000830:	e007      	b.n	8000842 <HAL_InitTick+0x72>
      }
      else
      {
        status = HAL_ERROR;
 8000832:	2301      	movs	r3, #1
 8000834:	73fb      	strb	r3, [r7, #15]
 8000836:	e004      	b.n	8000842 <HAL_InitTick+0x72>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000838:	2301      	movs	r3, #1
 800083a:	73fb      	strb	r3, [r7, #15]
 800083c:	e001      	b.n	8000842 <HAL_InitTick+0x72>
    }
  }
  else
  {
    status = HAL_ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000842:	7bfb      	ldrb	r3, [r7, #15]
}
 8000844:	4618      	mov	r0, r3
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	00000008 	.word	0x00000008
 8000850:	00000004 	.word	0x00000004
 8000854:	00000010 	.word	0x00000010

08000858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <HAL_IncTick+0x2c>)
 800085e:	f859 3003 	ldr.w	r3, [r9, r3]
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	461a      	mov	r2, r3
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <HAL_IncTick+0x30>)
 8000868:	f859 3003 	ldr.w	r3, [r9, r3]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4413      	add	r3, r2
 8000870:	4a05      	ldr	r2, [pc, #20]	; (8000888 <HAL_IncTick+0x30>)
 8000872:	f859 2002 	ldr.w	r2, [r9, r2]
 8000876:	6013      	str	r3, [r2, #0]
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	00000008 	.word	0x00000008
 8000888:	0000000c 	.word	0x0000000c

0800088c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  return uwTick;
 8000890:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <HAL_GetTick+0x18>)
 8000892:	f859 3003 	ldr.w	r3, [r9, r3]
 8000896:	681b      	ldr	r3, [r3, #0]
}
 8000898:	4618      	mov	r0, r3
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	0000000c 	.word	0x0000000c

080008a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <__NVIC_SetPriorityGrouping+0x44>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008c4:	4013      	ands	r3, r2
 80008c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008da:	4a04      	ldr	r2, [pc, #16]	; (80008ec <__NVIC_SetPriorityGrouping+0x44>)
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	60d3      	str	r3, [r2, #12]
}
 80008e0:	bf00      	nop
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <__NVIC_GetPriorityGrouping+0x18>)
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	0a1b      	lsrs	r3, r3, #8
 80008fa:	f003 0307 	and.w	r3, r3, #7
}
 80008fe:	4618      	mov	r0, r3
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	2b00      	cmp	r3, #0
 800091c:	db0b      	blt.n	8000936 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	f003 021f 	and.w	r2, r3, #31
 8000924:	4907      	ldr	r1, [pc, #28]	; (8000944 <__NVIC_EnableIRQ+0x38>)
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	095b      	lsrs	r3, r3, #5
 800092c:	2001      	movs	r0, #1
 800092e:	fa00 f202 	lsl.w	r2, r0, r2
 8000932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000e100 	.word	0xe000e100

08000948 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000956:	2b00      	cmp	r3, #0
 8000958:	db12      	blt.n	8000980 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	f003 021f 	and.w	r2, r3, #31
 8000960:	490a      	ldr	r1, [pc, #40]	; (800098c <__NVIC_DisableIRQ+0x44>)
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	095b      	lsrs	r3, r3, #5
 8000968:	2001      	movs	r0, #1
 800096a:	fa00 f202 	lsl.w	r2, r0, r2
 800096e:	3320      	adds	r3, #32
 8000970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8000974:	f3bf 8f4f 	dsb	sy
}
 8000978:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800097a:	f3bf 8f6f 	isb	sy
}
 800097e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	e000e100 	.word	0xe000e100

08000990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	6039      	str	r1, [r7, #0]
 800099a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800099c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	db0a      	blt.n	80009ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	490c      	ldr	r1, [pc, #48]	; (80009dc <__NVIC_SetPriority+0x4c>)
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	0112      	lsls	r2, r2, #4
 80009b0:	b2d2      	uxtb	r2, r2
 80009b2:	440b      	add	r3, r1
 80009b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009b8:	e00a      	b.n	80009d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	4908      	ldr	r1, [pc, #32]	; (80009e0 <__NVIC_SetPriority+0x50>)
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	f003 030f 	and.w	r3, r3, #15
 80009c6:	3b04      	subs	r3, #4
 80009c8:	0112      	lsls	r2, r2, #4
 80009ca:	b2d2      	uxtb	r2, r2
 80009cc:	440b      	add	r3, r1
 80009ce:	761a      	strb	r2, [r3, #24]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	e000e100 	.word	0xe000e100
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b089      	sub	sp, #36	; 0x24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	f1c3 0307 	rsb	r3, r3, #7
 80009fe:	2b04      	cmp	r3, #4
 8000a00:	bf28      	it	cs
 8000a02:	2304      	movcs	r3, #4
 8000a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	2b06      	cmp	r3, #6
 8000a0c:	d902      	bls.n	8000a14 <NVIC_EncodePriority+0x30>
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	3b03      	subs	r3, #3
 8000a12:	e000      	b.n	8000a16 <NVIC_EncodePriority+0x32>
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a18:	f04f 32ff 	mov.w	r2, #4294967295
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	43da      	mvns	r2, r3
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	401a      	ands	r2, r3
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	fa01 f303 	lsl.w	r3, r1, r3
 8000a36:	43d9      	mvns	r1, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a3c:	4313      	orrs	r3, r2
         );
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3724      	adds	r7, #36	; 0x24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
	...

08000a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a5c:	d301      	bcc.n	8000a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e00f      	b.n	8000a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <SysTick_Config+0x40>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a6a:	210f      	movs	r1, #15
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	f7ff ff8e 	bl	8000990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <SysTick_Config+0x40>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a7a:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <SysTick_Config+0x40>)
 8000a7c:	2207      	movs	r2, #7
 8000a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	e000e010 	.word	0xe000e010

08000a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff ff05 	bl	80008a8 <__NVIC_SetPriorityGrouping>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b086      	sub	sp, #24
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	4603      	mov	r3, r0
 8000aae:	60b9      	str	r1, [r7, #8]
 8000ab0:	607a      	str	r2, [r7, #4]
 8000ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab8:	f7ff ff1a 	bl	80008f0 <__NVIC_GetPriorityGrouping>
 8000abc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	68b9      	ldr	r1, [r7, #8]
 8000ac2:	6978      	ldr	r0, [r7, #20]
 8000ac4:	f7ff ff8e 	bl	80009e4 <NVIC_EncodePriority>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ace:	4611      	mov	r1, r2
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff5d 	bl	8000990 <__NVIC_SetPriority>
}
 8000ad6:	bf00      	nop
 8000ad8:	3718      	adds	r7, #24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff0d 	bl	800090c <__NVIC_EnableIRQ>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	4603      	mov	r3, r0
 8000b02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff ff1d 	bl	8000948 <__NVIC_DisableIRQ>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f7ff ff94 	bl	8000a4c <SysTick_Config>
 8000b24:	4603      	mov	r3, r0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b087      	sub	sp, #28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b3e:	e148      	b.n	8000dd2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	2101      	movs	r1, #1
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	f000 813a 	beq.w	8000dcc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d00b      	beq.n	8000b78 <HAL_GPIO_Init+0x48>
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	2b02      	cmp	r3, #2
 8000b66:	d007      	beq.n	8000b78 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b6c:	2b11      	cmp	r3, #17
 8000b6e:	d003      	beq.n	8000b78 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	2b12      	cmp	r3, #18
 8000b76:	d130      	bne.n	8000bda <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	2203      	movs	r2, #3
 8000b84:	fa02 f303 	lsl.w	r3, r2, r3
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	68da      	ldr	r2, [r3, #12]
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bae:	2201      	movs	r2, #1
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	091b      	lsrs	r3, r3, #4
 8000bc4:	f003 0201 	and.w	r2, r3, #1
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	68db      	ldr	r3, [r3, #12]
 8000bde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	2203      	movs	r2, #3
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43db      	mvns	r3, r3
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	689a      	ldr	r2, [r3, #8]
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d003      	beq.n	8000c1a <HAL_GPIO_Init+0xea>
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	2b12      	cmp	r3, #18
 8000c18:	d123      	bne.n	8000c62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	08da      	lsrs	r2, r3, #3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	3208      	adds	r2, #8
 8000c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	220f      	movs	r2, #15
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43db      	mvns	r3, r3
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	691a      	ldr	r2, [r3, #16]
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	f003 0307 	and.w	r3, r3, #7
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	08da      	lsrs	r2, r3, #3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3208      	adds	r2, #8
 8000c5c:	6939      	ldr	r1, [r7, #16]
 8000c5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	2203      	movs	r2, #3
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43db      	mvns	r3, r3
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	4013      	ands	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f003 0203 	and.w	r2, r3, #3
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	f000 8094 	beq.w	8000dcc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca4:	4b52      	ldr	r3, [pc, #328]	; (8000df0 <HAL_GPIO_Init+0x2c0>)
 8000ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca8:	4a51      	ldr	r2, [pc, #324]	; (8000df0 <HAL_GPIO_Init+0x2c0>)
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	6613      	str	r3, [r2, #96]	; 0x60
 8000cb0:	4b4f      	ldr	r3, [pc, #316]	; (8000df0 <HAL_GPIO_Init+0x2c0>)
 8000cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cbc:	4a4d      	ldr	r2, [pc, #308]	; (8000df4 <HAL_GPIO_Init+0x2c4>)
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	089b      	lsrs	r3, r3, #2
 8000cc2:	3302      	adds	r3, #2
 8000cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	f003 0303 	and.w	r3, r3, #3
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	220f      	movs	r2, #15
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ce6:	d00d      	beq.n	8000d04 <HAL_GPIO_Init+0x1d4>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a43      	ldr	r2, [pc, #268]	; (8000df8 <HAL_GPIO_Init+0x2c8>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d007      	beq.n	8000d00 <HAL_GPIO_Init+0x1d0>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a42      	ldr	r2, [pc, #264]	; (8000dfc <HAL_GPIO_Init+0x2cc>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d101      	bne.n	8000cfc <HAL_GPIO_Init+0x1cc>
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	e004      	b.n	8000d06 <HAL_GPIO_Init+0x1d6>
 8000cfc:	2307      	movs	r3, #7
 8000cfe:	e002      	b.n	8000d06 <HAL_GPIO_Init+0x1d6>
 8000d00:	2301      	movs	r3, #1
 8000d02:	e000      	b.n	8000d06 <HAL_GPIO_Init+0x1d6>
 8000d04:	2300      	movs	r3, #0
 8000d06:	697a      	ldr	r2, [r7, #20]
 8000d08:	f002 0203 	and.w	r2, r2, #3
 8000d0c:	0092      	lsls	r2, r2, #2
 8000d0e:	4093      	lsls	r3, r2
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d16:	4937      	ldr	r1, [pc, #220]	; (8000df4 <HAL_GPIO_Init+0x2c4>)
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	3302      	adds	r3, #2
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000d24:	4b36      	ldr	r3, [pc, #216]	; (8000e00 <HAL_GPIO_Init+0x2d0>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d003      	beq.n	8000d48 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d48:	4a2d      	ldr	r2, [pc, #180]	; (8000e00 <HAL_GPIO_Init+0x2d0>)
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000d4e:	4b2c      	ldr	r3, [pc, #176]	; (8000e00 <HAL_GPIO_Init+0x2d0>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	43db      	mvns	r3, r3
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d003      	beq.n	8000d72 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d72:	4a23      	ldr	r2, [pc, #140]	; (8000e00 <HAL_GPIO_Init+0x2d0>)
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d78:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <HAL_GPIO_Init+0x2d0>)
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	43db      	mvns	r3, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d003      	beq.n	8000d9c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d9c:	4a18      	ldr	r2, [pc, #96]	; (8000e00 <HAL_GPIO_Init+0x2d0>)
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000da2:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <HAL_GPIO_Init+0x2d0>)
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	43db      	mvns	r3, r3
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4013      	ands	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000dc6:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <HAL_GPIO_Init+0x2d0>)
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	f47f aeaf 	bne.w	8000b40 <HAL_GPIO_Init+0x10>
  }
}
 8000de2:	bf00      	nop
 8000de4:	bf00      	nop
 8000de6:	371c      	adds	r7, #28
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	40021000 	.word	0x40021000
 8000df4:	40010000 	.word	0x40010000
 8000df8:	48000400 	.word	0x48000400
 8000dfc:	48000800 	.word	0x48000800
 8000e00:	40010400 	.word	0x40010400

08000e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	807b      	strh	r3, [r7, #2]
 8000e10:	4613      	mov	r3, r2
 8000e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e14:	787b      	ldrb	r3, [r7, #1]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e1a:	887a      	ldrh	r2, [r7, #2]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e20:	e002      	b.n	8000e28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e22:	887a      	ldrh	r2, [r7, #2]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	695b      	ldr	r3, [r3, #20]
 8000e44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e46:	887a      	ldrh	r2, [r7, #2]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	041a      	lsls	r2, r3, #16
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	43d9      	mvns	r1, r3
 8000e52:	887b      	ldrh	r3, [r7, #2]
 8000e54:	400b      	ands	r3, r1
 8000e56:	431a      	orrs	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	619a      	str	r2, [r3, #24]
}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40007000 	.word	0x40007000

08000e88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <HAL_PWREx_GetVoltageRange+0x18>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40007000 	.word	0x40007000

08000ea4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000eb2:	d132      	bne.n	8000f1a <HAL_PWREx_ControlVoltageScaling+0x76>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000eb4:	4b24      	ldr	r3, [pc, #144]	; (8000f48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ec0:	d03a      	beq.n	8000f38 <HAL_PWREx_ControlVoltageScaling+0x94>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ec2:	4b21      	ldr	r3, [pc, #132]	; (8000f48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000eca:	4a1f      	ldr	r2, [pc, #124]	; (8000f48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ecc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ed2:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8000ed4:	f859 3003 	ldr.w	r3, [r9, r3]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2232      	movs	r2, #50	; 0x32
 8000edc:	fb02 f303 	mul.w	r3, r2, r3
 8000ee0:	4a1a      	ldr	r2, [pc, #104]	; (8000f4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee6:	0c9b      	lsrs	r3, r3, #18
 8000ee8:	3301      	adds	r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eec:	e002      	b.n	8000ef4 <HAL_PWREx_ControlVoltageScaling+0x50>
      {
        wait_loop_index--;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ef4:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f00:	d102      	bne.n	8000f08 <HAL_PWREx_ControlVoltageScaling+0x64>
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d1f2      	bne.n	8000eee <HAL_PWREx_ControlVoltageScaling+0x4a>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f08:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f14:	d110      	bne.n	8000f38 <HAL_PWREx_ControlVoltageScaling+0x94>
      {
        return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	e00f      	b.n	8000f3a <HAL_PWREx_ControlVoltageScaling+0x96>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f26:	d007      	beq.n	8000f38 <HAL_PWREx_ControlVoltageScaling+0x94>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f28:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f30:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40007000 	.word	0x40007000
 8000f4c:	431bde83 	.word	0x431bde83
 8000f50:	00000004 	.word	0x00000004

08000f54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d102      	bne.n	8000f68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	f000 bc17 	b.w	8001796 <HAL_RCC_OscConfig+0x842>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f68:	4ba3      	ldr	r3, [pc, #652]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f003 030c 	and.w	r3, r3, #12
 8000f70:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f72:	4ba1      	ldr	r3, [pc, #644]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0310 	and.w	r3, r3, #16
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f000 80ea 	beq.w	800115e <HAL_RCC_OscConfig+0x20a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d007      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x4c>
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	2b0c      	cmp	r3, #12
 8000f94:	f040 8091 	bne.w	80010ba <HAL_RCC_OscConfig+0x166>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	f040 808d 	bne.w	80010ba <HAL_RCC_OscConfig+0x166>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000fa0:	4b95      	ldr	r3, [pc, #596]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d005      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x64>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d101      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e3ee      	b.n	8001796 <HAL_RCC_OscConfig+0x842>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a1a      	ldr	r2, [r3, #32]
 8000fbc:	4b8e      	ldr	r3, [pc, #568]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f003 0308 	and.w	r3, r3, #8
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d004      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x7e>
 8000fc8:	4b8b      	ldr	r3, [pc, #556]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fd0:	e005      	b.n	8000fde <HAL_RCC_OscConfig+0x8a>
 8000fd2:	4b89      	ldr	r3, [pc, #548]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 8000fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fd8:	091b      	lsrs	r3, r3, #4
 8000fda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d223      	bcs.n	800102a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6a1b      	ldr	r3, [r3, #32]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 fd50 	bl	8001a8c <RCC_SetFlashLatencyFromMSIRange>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e3cf      	b.n	8001796 <HAL_RCC_OscConfig+0x842>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ff6:	4b80      	ldr	r3, [pc, #512]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a7f      	ldr	r2, [pc, #508]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 8000ffc:	f043 0308 	orr.w	r3, r3, #8
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	4b7d      	ldr	r3, [pc, #500]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a1b      	ldr	r3, [r3, #32]
 800100e:	497a      	ldr	r1, [pc, #488]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 8001010:	4313      	orrs	r3, r2
 8001012:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001014:	4b78      	ldr	r3, [pc, #480]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	69db      	ldr	r3, [r3, #28]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	4975      	ldr	r1, [pc, #468]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 8001024:	4313      	orrs	r3, r2
 8001026:	604b      	str	r3, [r1, #4]
 8001028:	e025      	b.n	8001076 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800102a:	4b73      	ldr	r3, [pc, #460]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a72      	ldr	r2, [pc, #456]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 8001030:	f043 0308 	orr.w	r3, r3, #8
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	4b70      	ldr	r3, [pc, #448]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a1b      	ldr	r3, [r3, #32]
 8001042:	496d      	ldr	r1, [pc, #436]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 8001044:	4313      	orrs	r3, r2
 8001046:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001048:	4b6b      	ldr	r3, [pc, #428]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	69db      	ldr	r3, [r3, #28]
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	4968      	ldr	r1, [pc, #416]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 8001058:	4313      	orrs	r3, r2
 800105a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d109      	bne.n	8001076 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6a1b      	ldr	r3, [r3, #32]
 8001066:	4618      	mov	r0, r3
 8001068:	f000 fd10 	bl	8001a8c <RCC_SetFlashLatencyFromMSIRange>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e38f      	b.n	8001796 <HAL_RCC_OscConfig+0x842>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001076:	f000 fc7b 	bl	8001970 <HAL_RCC_GetSysClockFreq>
 800107a:	4601      	mov	r1, r0
 800107c:	4b5e      	ldr	r3, [pc, #376]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	091b      	lsrs	r3, r3, #4
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	4a5d      	ldr	r2, [pc, #372]	; (80011fc <HAL_RCC_OscConfig+0x2a8>)
 8001088:	f859 2002 	ldr.w	r2, [r9, r2]
 800108c:	5cd3      	ldrb	r3, [r2, r3]
 800108e:	f003 031f 	and.w	r3, r3, #31
 8001092:	fa21 f303 	lsr.w	r3, r1, r3
 8001096:	4a5a      	ldr	r2, [pc, #360]	; (8001200 <HAL_RCC_OscConfig+0x2ac>)
 8001098:	f859 2002 	ldr.w	r2, [r9, r2]
 800109c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800109e:	4b59      	ldr	r3, [pc, #356]	; (8001204 <HAL_RCC_OscConfig+0x2b0>)
 80010a0:	f859 3003 	ldr.w	r3, [r9, r3]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fb92 	bl	80007d0 <HAL_InitTick>
 80010ac:	4603      	mov	r3, r0
 80010ae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d052      	beq.n	800115c <HAL_RCC_OscConfig+0x208>
        {
          return status;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	e36d      	b.n	8001796 <HAL_RCC_OscConfig+0x842>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d032      	beq.n	8001128 <HAL_RCC_OscConfig+0x1d4>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80010c2:	4b4d      	ldr	r3, [pc, #308]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a4c      	ldr	r2, [pc, #304]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010ce:	f7ff fbdd 	bl	800088c <HAL_GetTick>
 80010d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010d4:	e008      	b.n	80010e8 <HAL_RCC_OscConfig+0x194>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010d6:	f7ff fbd9 	bl	800088c <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d901      	bls.n	80010e8 <HAL_RCC_OscConfig+0x194>
          {
            return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e356      	b.n	8001796 <HAL_RCC_OscConfig+0x842>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010e8:	4b43      	ldr	r3, [pc, #268]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0f0      	beq.n	80010d6 <HAL_RCC_OscConfig+0x182>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010f4:	4b40      	ldr	r3, [pc, #256]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a3f      	ldr	r2, [pc, #252]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 80010fa:	f043 0308 	orr.w	r3, r3, #8
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	4b3d      	ldr	r3, [pc, #244]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a1b      	ldr	r3, [r3, #32]
 800110c:	493a      	ldr	r1, [pc, #232]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 800110e:	4313      	orrs	r3, r2
 8001110:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001112:	4b39      	ldr	r3, [pc, #228]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	4935      	ldr	r1, [pc, #212]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 8001122:	4313      	orrs	r3, r2
 8001124:	604b      	str	r3, [r1, #4]
 8001126:	e01a      	b.n	800115e <HAL_RCC_OscConfig+0x20a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001128:	4b33      	ldr	r3, [pc, #204]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a32      	ldr	r2, [pc, #200]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 800112e:	f023 0301 	bic.w	r3, r3, #1
 8001132:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001134:	f7ff fbaa 	bl	800088c <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0x1fa>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800113c:	f7ff fba6 	bl	800088c <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0x1fa>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e323      	b.n	8001796 <HAL_RCC_OscConfig+0x842>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800114e:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1f0      	bne.n	800113c <HAL_RCC_OscConfig+0x1e8>
 800115a:	e000      	b.n	800115e <HAL_RCC_OscConfig+0x20a>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800115c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	2b00      	cmp	r3, #0
 8001168:	d073      	beq.n	8001252 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	2b08      	cmp	r3, #8
 800116e:	d005      	beq.n	800117c <HAL_RCC_OscConfig+0x228>
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	2b0c      	cmp	r3, #12
 8001174:	d10e      	bne.n	8001194 <HAL_RCC_OscConfig+0x240>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	2b03      	cmp	r3, #3
 800117a:	d10b      	bne.n	8001194 <HAL_RCC_OscConfig+0x240>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800117c:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d063      	beq.n	8001250 <HAL_RCC_OscConfig+0x2fc>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d15f      	bne.n	8001250 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e300      	b.n	8001796 <HAL_RCC_OscConfig+0x842>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800119c:	d106      	bne.n	80011ac <HAL_RCC_OscConfig+0x258>
 800119e:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a15      	ldr	r2, [pc, #84]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 80011a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	e01d      	b.n	80011e8 <HAL_RCC_OscConfig+0x294>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011b4:	d10c      	bne.n	80011d0 <HAL_RCC_OscConfig+0x27c>
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a0f      	ldr	r2, [pc, #60]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 80011bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a0c      	ldr	r2, [pc, #48]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 80011c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	e00b      	b.n	80011e8 <HAL_RCC_OscConfig+0x294>
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a08      	ldr	r2, [pc, #32]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 80011d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <HAL_RCC_OscConfig+0x2a4>)
 80011e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d01b      	beq.n	8001228 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f0:	f7ff fb4c 	bl	800088c <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011f6:	e010      	b.n	800121a <HAL_RCC_OscConfig+0x2c6>
 80011f8:	40021000 	.word	0x40021000
 80011fc:	00000014 	.word	0x00000014
 8001200:	00000004 	.word	0x00000004
 8001204:	00000010 	.word	0x00000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001208:	f7ff fb40 	bl	800088c <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b64      	cmp	r3, #100	; 0x64
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e2bd      	b.n	8001796 <HAL_RCC_OscConfig+0x842>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800121a:	4baf      	ldr	r3, [pc, #700]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0f0      	beq.n	8001208 <HAL_RCC_OscConfig+0x2b4>
 8001226:	e014      	b.n	8001252 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001228:	f7ff fb30 	bl	800088c <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x2ee>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001230:	f7ff fb2c 	bl	800088c <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b64      	cmp	r3, #100	; 0x64
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x2ee>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e2a9      	b.n	8001796 <HAL_RCC_OscConfig+0x842>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001242:	4ba5      	ldr	r3, [pc, #660]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f0      	bne.n	8001230 <HAL_RCC_OscConfig+0x2dc>
 800124e:	e000      	b.n	8001252 <HAL_RCC_OscConfig+0x2fe>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d060      	beq.n	8001320 <HAL_RCC_OscConfig+0x3cc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	2b04      	cmp	r3, #4
 8001262:	d005      	beq.n	8001270 <HAL_RCC_OscConfig+0x31c>
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	2b0c      	cmp	r3, #12
 8001268:	d119      	bne.n	800129e <HAL_RCC_OscConfig+0x34a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	2b02      	cmp	r3, #2
 800126e:	d116      	bne.n	800129e <HAL_RCC_OscConfig+0x34a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001270:	4b99      	ldr	r3, [pc, #612]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001278:	2b00      	cmp	r3, #0
 800127a:	d005      	beq.n	8001288 <HAL_RCC_OscConfig+0x334>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d101      	bne.n	8001288 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e286      	b.n	8001796 <HAL_RCC_OscConfig+0x842>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001288:	4b93      	ldr	r3, [pc, #588]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	061b      	lsls	r3, r3, #24
 8001296:	4990      	ldr	r1, [pc, #576]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 8001298:	4313      	orrs	r3, r2
 800129a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800129c:	e040      	b.n	8001320 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d023      	beq.n	80012ee <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012a6:	4b8c      	ldr	r3, [pc, #560]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a8b      	ldr	r2, [pc, #556]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 80012ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b2:	f7ff faeb 	bl	800088c <HAL_GetTick>
 80012b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012b8:	e008      	b.n	80012cc <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ba:	f7ff fae7 	bl	800088c <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e264      	b.n	8001796 <HAL_RCC_OscConfig+0x842>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012cc:	4b82      	ldr	r3, [pc, #520]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d0f0      	beq.n	80012ba <HAL_RCC_OscConfig+0x366>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d8:	4b7f      	ldr	r3, [pc, #508]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	691b      	ldr	r3, [r3, #16]
 80012e4:	061b      	lsls	r3, r3, #24
 80012e6:	497c      	ldr	r1, [pc, #496]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	604b      	str	r3, [r1, #4]
 80012ec:	e018      	b.n	8001320 <HAL_RCC_OscConfig+0x3cc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ee:	4b7a      	ldr	r3, [pc, #488]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a79      	ldr	r2, [pc, #484]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 80012f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fa:	f7ff fac7 	bl	800088c <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x3c0>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001302:	f7ff fac3 	bl	800088c <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e240      	b.n	8001796 <HAL_RCC_OscConfig+0x842>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001314:	4b70      	ldr	r3, [pc, #448]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1f0      	bne.n	8001302 <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0308 	and.w	r3, r3, #8
 8001328:	2b00      	cmp	r3, #0
 800132a:	d03c      	beq.n	80013a6 <HAL_RCC_OscConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d01c      	beq.n	800136e <HAL_RCC_OscConfig+0x41a>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001334:	4b68      	ldr	r3, [pc, #416]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 8001336:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800133a:	4a67      	ldr	r2, [pc, #412]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001344:	f7ff faa2 	bl	800088c <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x40a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800134c:	f7ff fa9e 	bl	800088c <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x40a>
        {
          return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e21b      	b.n	8001796 <HAL_RCC_OscConfig+0x842>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800135e:	4b5e      	ldr	r3, [pc, #376]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 8001360:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0ef      	beq.n	800134c <HAL_RCC_OscConfig+0x3f8>
 800136c:	e01b      	b.n	80013a6 <HAL_RCC_OscConfig+0x452>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800136e:	4b5a      	ldr	r3, [pc, #360]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 8001370:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001374:	4a58      	ldr	r2, [pc, #352]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 8001376:	f023 0301 	bic.w	r3, r3, #1
 800137a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800137e:	f7ff fa85 	bl	800088c <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001386:	f7ff fa81 	bl	800088c <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e1fe      	b.n	8001796 <HAL_RCC_OscConfig+0x842>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001398:	4b4f      	ldr	r3, [pc, #316]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 800139a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1ef      	bne.n	8001386 <HAL_RCC_OscConfig+0x432>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 80a6 	beq.w	8001500 <HAL_RCC_OscConfig+0x5ac>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013b4:	2300      	movs	r3, #0
 80013b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80013b8:	4b47      	ldr	r3, [pc, #284]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 80013ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d10d      	bne.n	80013e0 <HAL_RCC_OscConfig+0x48c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013c4:	4b44      	ldr	r3, [pc, #272]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 80013c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c8:	4a43      	ldr	r2, [pc, #268]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 80013ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ce:	6593      	str	r3, [r2, #88]	; 0x58
 80013d0:	4b41      	ldr	r3, [pc, #260]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 80013d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013dc:	2301      	movs	r3, #1
 80013de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013e0:	4b3e      	ldr	r3, [pc, #248]	; (80014dc <HAL_RCC_OscConfig+0x588>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d118      	bne.n	800141e <HAL_RCC_OscConfig+0x4ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013ec:	4b3b      	ldr	r3, [pc, #236]	; (80014dc <HAL_RCC_OscConfig+0x588>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a3a      	ldr	r2, [pc, #232]	; (80014dc <HAL_RCC_OscConfig+0x588>)
 80013f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013f8:	f7ff fa48 	bl	800088c <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x4be>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001400:	f7ff fa44 	bl	800088c <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x4be>
        {
          return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e1c1      	b.n	8001796 <HAL_RCC_OscConfig+0x842>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001412:	4b32      	ldr	r3, [pc, #200]	; (80014dc <HAL_RCC_OscConfig+0x588>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f0      	beq.n	8001400 <HAL_RCC_OscConfig+0x4ac>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d108      	bne.n	8001438 <HAL_RCC_OscConfig+0x4e4>
 8001426:	4b2c      	ldr	r3, [pc, #176]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 8001428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800142c:	4a2a      	ldr	r2, [pc, #168]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001436:	e024      	b.n	8001482 <HAL_RCC_OscConfig+0x52e>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	2b05      	cmp	r3, #5
 800143e:	d110      	bne.n	8001462 <HAL_RCC_OscConfig+0x50e>
 8001440:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 8001442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001446:	4a24      	ldr	r2, [pc, #144]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 8001448:	f043 0304 	orr.w	r3, r3, #4
 800144c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001450:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 8001452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001456:	4a20      	ldr	r2, [pc, #128]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001460:	e00f      	b.n	8001482 <HAL_RCC_OscConfig+0x52e>
 8001462:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 8001464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001468:	4a1b      	ldr	r2, [pc, #108]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 800146a:	f023 0301 	bic.w	r3, r3, #1
 800146e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001472:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 8001474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001478:	4a17      	ldr	r2, [pc, #92]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 800147a:	f023 0304 	bic.w	r3, r3, #4
 800147e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d016      	beq.n	80014b8 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800148a:	f7ff f9ff 	bl	800088c <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001490:	e00a      	b.n	80014a8 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001492:	f7ff f9fb 	bl	800088c <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e176      	b.n	8001796 <HAL_RCC_OscConfig+0x842>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <HAL_RCC_OscConfig+0x584>)
 80014aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0ed      	beq.n	8001492 <HAL_RCC_OscConfig+0x53e>
 80014b6:	e01a      	b.n	80014ee <HAL_RCC_OscConfig+0x59a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b8:	f7ff f9e8 	bl	800088c <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014be:	e00f      	b.n	80014e0 <HAL_RCC_OscConfig+0x58c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014c0:	f7ff f9e4 	bl	800088c <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d906      	bls.n	80014e0 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e15f      	b.n	8001796 <HAL_RCC_OscConfig+0x842>
 80014d6:	bf00      	nop
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014e0:	4baa      	ldr	r3, [pc, #680]	; (800178c <HAL_RCC_OscConfig+0x838>)
 80014e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1e8      	bne.n	80014c0 <HAL_RCC_OscConfig+0x56c>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014ee:	7ffb      	ldrb	r3, [r7, #31]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d105      	bne.n	8001500 <HAL_RCC_OscConfig+0x5ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014f4:	4ba5      	ldr	r3, [pc, #660]	; (800178c <HAL_RCC_OscConfig+0x838>)
 80014f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f8:	4aa4      	ldr	r2, [pc, #656]	; (800178c <HAL_RCC_OscConfig+0x838>)
 80014fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0320 	and.w	r3, r3, #32
 8001508:	2b00      	cmp	r3, #0
 800150a:	d03c      	beq.n	8001586 <HAL_RCC_OscConfig+0x632>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001510:	2b00      	cmp	r3, #0
 8001512:	d01c      	beq.n	800154e <HAL_RCC_OscConfig+0x5fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001514:	4b9d      	ldr	r3, [pc, #628]	; (800178c <HAL_RCC_OscConfig+0x838>)
 8001516:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800151a:	4a9c      	ldr	r2, [pc, #624]	; (800178c <HAL_RCC_OscConfig+0x838>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001524:	f7ff f9b2 	bl	800088c <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x5ea>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800152c:	f7ff f9ae 	bl	800088c <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x5ea>
        {
          return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e12b      	b.n	8001796 <HAL_RCC_OscConfig+0x842>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800153e:	4b93      	ldr	r3, [pc, #588]	; (800178c <HAL_RCC_OscConfig+0x838>)
 8001540:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0ef      	beq.n	800152c <HAL_RCC_OscConfig+0x5d8>
 800154c:	e01b      	b.n	8001586 <HAL_RCC_OscConfig+0x632>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800154e:	4b8f      	ldr	r3, [pc, #572]	; (800178c <HAL_RCC_OscConfig+0x838>)
 8001550:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001554:	4a8d      	ldr	r2, [pc, #564]	; (800178c <HAL_RCC_OscConfig+0x838>)
 8001556:	f023 0301 	bic.w	r3, r3, #1
 800155a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155e:	f7ff f995 	bl	800088c <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x624>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001566:	f7ff f991 	bl	800088c <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x624>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e10e      	b.n	8001796 <HAL_RCC_OscConfig+0x842>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001578:	4b84      	ldr	r3, [pc, #528]	; (800178c <HAL_RCC_OscConfig+0x838>)
 800157a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1ef      	bne.n	8001566 <HAL_RCC_OscConfig+0x612>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 8102 	beq.w	8001794 <HAL_RCC_OscConfig+0x840>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001594:	2b02      	cmp	r3, #2
 8001596:	f040 80c5 	bne.w	8001724 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800159a:	4b7c      	ldr	r3, [pc, #496]	; (800178c <HAL_RCC_OscConfig+0x838>)
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	f003 0203 	and.w	r2, r3, #3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d12c      	bne.n	8001608 <HAL_RCC_OscConfig+0x6b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b8:	3b01      	subs	r3, #1
 80015ba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015bc:	429a      	cmp	r2, r3
 80015be:	d123      	bne.n	8001608 <HAL_RCC_OscConfig+0x6b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d11b      	bne.n	8001608 <HAL_RCC_OscConfig+0x6b4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015da:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015dc:	429a      	cmp	r2, r3
 80015de:	d113      	bne.n	8001608 <HAL_RCC_OscConfig+0x6b4>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ea:	085b      	lsrs	r3, r3, #1
 80015ec:	3b01      	subs	r3, #1
 80015ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d109      	bne.n	8001608 <HAL_RCC_OscConfig+0x6b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	085b      	lsrs	r3, r3, #1
 8001600:	3b01      	subs	r3, #1
 8001602:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001604:	429a      	cmp	r2, r3
 8001606:	d067      	beq.n	80016d8 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	2b0c      	cmp	r3, #12
 800160c:	d062      	beq.n	80016d4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800160e:	4b5f      	ldr	r3, [pc, #380]	; (800178c <HAL_RCC_OscConfig+0x838>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_RCC_OscConfig+0x6ca>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e0bb      	b.n	8001796 <HAL_RCC_OscConfig+0x842>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800161e:	4b5b      	ldr	r3, [pc, #364]	; (800178c <HAL_RCC_OscConfig+0x838>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a5a      	ldr	r2, [pc, #360]	; (800178c <HAL_RCC_OscConfig+0x838>)
 8001624:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001628:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800162a:	f7ff f92f 	bl	800088c <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001632:	f7ff f92b 	bl	800088c <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e0a8      	b.n	8001796 <HAL_RCC_OscConfig+0x842>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001644:	4b51      	ldr	r3, [pc, #324]	; (800178c <HAL_RCC_OscConfig+0x838>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1f0      	bne.n	8001632 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001650:	4b4e      	ldr	r3, [pc, #312]	; (800178c <HAL_RCC_OscConfig+0x838>)
 8001652:	68da      	ldr	r2, [r3, #12]
 8001654:	4b4e      	ldr	r3, [pc, #312]	; (8001790 <HAL_RCC_OscConfig+0x83c>)
 8001656:	4013      	ands	r3, r2
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001660:	3a01      	subs	r2, #1
 8001662:	0112      	lsls	r2, r2, #4
 8001664:	4311      	orrs	r1, r2
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800166a:	0212      	lsls	r2, r2, #8
 800166c:	4311      	orrs	r1, r2
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001672:	0852      	lsrs	r2, r2, #1
 8001674:	3a01      	subs	r2, #1
 8001676:	0552      	lsls	r2, r2, #21
 8001678:	4311      	orrs	r1, r2
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800167e:	0852      	lsrs	r2, r2, #1
 8001680:	3a01      	subs	r2, #1
 8001682:	0652      	lsls	r2, r2, #25
 8001684:	4311      	orrs	r1, r2
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800168a:	06d2      	lsls	r2, r2, #27
 800168c:	430a      	orrs	r2, r1
 800168e:	493f      	ldr	r1, [pc, #252]	; (800178c <HAL_RCC_OscConfig+0x838>)
 8001690:	4313      	orrs	r3, r2
 8001692:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001694:	4b3d      	ldr	r3, [pc, #244]	; (800178c <HAL_RCC_OscConfig+0x838>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a3c      	ldr	r2, [pc, #240]	; (800178c <HAL_RCC_OscConfig+0x838>)
 800169a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800169e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016a0:	4b3a      	ldr	r3, [pc, #232]	; (800178c <HAL_RCC_OscConfig+0x838>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	4a39      	ldr	r2, [pc, #228]	; (800178c <HAL_RCC_OscConfig+0x838>)
 80016a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016ac:	f7ff f8ee 	bl	800088c <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b4:	f7ff f8ea 	bl	800088c <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e067      	b.n	8001796 <HAL_RCC_OscConfig+0x842>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016c6:	4b31      	ldr	r3, [pc, #196]	; (800178c <HAL_RCC_OscConfig+0x838>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016d2:	e05f      	b.n	8001794 <HAL_RCC_OscConfig+0x840>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e05e      	b.n	8001796 <HAL_RCC_OscConfig+0x842>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016d8:	4b2c      	ldr	r3, [pc, #176]	; (800178c <HAL_RCC_OscConfig+0x838>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d157      	bne.n	8001794 <HAL_RCC_OscConfig+0x840>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80016e4:	4b29      	ldr	r3, [pc, #164]	; (800178c <HAL_RCC_OscConfig+0x838>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a28      	ldr	r2, [pc, #160]	; (800178c <HAL_RCC_OscConfig+0x838>)
 80016ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016f0:	4b26      	ldr	r3, [pc, #152]	; (800178c <HAL_RCC_OscConfig+0x838>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	4a25      	ldr	r2, [pc, #148]	; (800178c <HAL_RCC_OscConfig+0x838>)
 80016f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80016fc:	f7ff f8c6 	bl	800088c <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001704:	f7ff f8c2 	bl	800088c <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e03f      	b.n	8001796 <HAL_RCC_OscConfig+0x842>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001716:	4b1d      	ldr	r3, [pc, #116]	; (800178c <HAL_RCC_OscConfig+0x838>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0f0      	beq.n	8001704 <HAL_RCC_OscConfig+0x7b0>
 8001722:	e037      	b.n	8001794 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	2b0c      	cmp	r3, #12
 8001728:	d02d      	beq.n	8001786 <HAL_RCC_OscConfig+0x832>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <HAL_RCC_OscConfig+0x838>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a17      	ldr	r2, [pc, #92]	; (800178c <HAL_RCC_OscConfig+0x838>)
 8001730:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001734:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <HAL_RCC_OscConfig+0x838>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d105      	bne.n	800174e <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001742:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_RCC_OscConfig+0x838>)
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	4a11      	ldr	r2, [pc, #68]	; (800178c <HAL_RCC_OscConfig+0x838>)
 8001748:	f023 0303 	bic.w	r3, r3, #3
 800174c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800174e:	4b0f      	ldr	r3, [pc, #60]	; (800178c <HAL_RCC_OscConfig+0x838>)
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	4a0e      	ldr	r2, [pc, #56]	; (800178c <HAL_RCC_OscConfig+0x838>)
 8001754:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800175c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175e:	f7ff f895 	bl	800088c <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x824>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001766:	f7ff f891 	bl	800088c <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x824>
          {
            return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e00e      	b.n	8001796 <HAL_RCC_OscConfig+0x842>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001778:	4b04      	ldr	r3, [pc, #16]	; (800178c <HAL_RCC_OscConfig+0x838>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1f0      	bne.n	8001766 <HAL_RCC_OscConfig+0x812>
 8001784:	e006      	b.n	8001794 <HAL_RCC_OscConfig+0x840>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e005      	b.n	8001796 <HAL_RCC_OscConfig+0x842>
 800178a:	bf00      	nop
 800178c:	40021000 	.word	0x40021000
 8001790:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3720      	adds	r7, #32
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop

080017a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e0ce      	b.n	8001952 <HAL_RCC_ClockConfig+0x1b2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017b4:	4b69      	ldr	r3, [pc, #420]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d910      	bls.n	80017e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c2:	4b66      	ldr	r3, [pc, #408]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f023 0207 	bic.w	r2, r3, #7
 80017ca:	4964      	ldr	r1, [pc, #400]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d2:	4b62      	ldr	r3, [pc, #392]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d001      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e0b6      	b.n	8001952 <HAL_RCC_ClockConfig+0x1b2>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d04c      	beq.n	800188a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b03      	cmp	r3, #3
 80017f6:	d107      	bne.n	8001808 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017f8:	4b59      	ldr	r3, [pc, #356]	; (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d121      	bne.n	8001848 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e0a4      	b.n	8001952 <HAL_RCC_ClockConfig+0x1b2>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b02      	cmp	r3, #2
 800180e:	d107      	bne.n	8001820 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001810:	4b53      	ldr	r3, [pc, #332]	; (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d115      	bne.n	8001848 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e098      	b.n	8001952 <HAL_RCC_ClockConfig+0x1b2>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d107      	bne.n	8001838 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001828:	4b4d      	ldr	r3, [pc, #308]	; (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d109      	bne.n	8001848 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e08c      	b.n	8001952 <HAL_RCC_ClockConfig+0x1b2>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001838:	4b49      	ldr	r3, [pc, #292]	; (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e084      	b.n	8001952 <HAL_RCC_ClockConfig+0x1b2>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001848:	4b45      	ldr	r3, [pc, #276]	; (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f023 0203 	bic.w	r2, r3, #3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	4942      	ldr	r1, [pc, #264]	; (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 8001856:	4313      	orrs	r3, r2
 8001858:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800185a:	f7ff f817 	bl	800088c <HAL_GetTick>
 800185e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001860:	e00a      	b.n	8001878 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001862:	f7ff f813 	bl	800088c <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001870:	4293      	cmp	r3, r2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e06c      	b.n	8001952 <HAL_RCC_ClockConfig+0x1b2>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001878:	4b39      	ldr	r3, [pc, #228]	; (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 020c 	and.w	r2, r3, #12
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	429a      	cmp	r2, r3
 8001888:	d1eb      	bne.n	8001862 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d008      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001896:	4b32      	ldr	r3, [pc, #200]	; (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	492f      	ldr	r1, [pc, #188]	; (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018a8:	4b2c      	ldr	r3, [pc, #176]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d210      	bcs.n	80018d8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b6:	4b29      	ldr	r3, [pc, #164]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f023 0207 	bic.w	r2, r3, #7
 80018be:	4927      	ldr	r1, [pc, #156]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c6:	4b25      	ldr	r3, [pc, #148]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e03c      	b.n	8001952 <HAL_RCC_ClockConfig+0x1b2>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d008      	beq.n	80018f6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e4:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	491b      	ldr	r1, [pc, #108]	; (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d009      	beq.n	8001916 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001902:	4b17      	ldr	r3, [pc, #92]	; (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	4913      	ldr	r1, [pc, #76]	; (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 8001912:	4313      	orrs	r3, r2
 8001914:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001916:	f000 f82b 	bl	8001970 <HAL_RCC_GetSysClockFreq>
 800191a:	4601      	mov	r1, r0
 800191c:	4b10      	ldr	r3, [pc, #64]	; (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	4a0f      	ldr	r2, [pc, #60]	; (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 8001928:	f859 2002 	ldr.w	r2, [r9, r2]
 800192c:	5cd3      	ldrb	r3, [r2, r3]
 800192e:	f003 031f 	and.w	r3, r3, #31
 8001932:	fa21 f303 	lsr.w	r3, r1, r3
 8001936:	4a0c      	ldr	r2, [pc, #48]	; (8001968 <HAL_RCC_ClockConfig+0x1c8>)
 8001938:	f859 2002 	ldr.w	r2, [r9, r2]
 800193c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800193e:	4b0b      	ldr	r3, [pc, #44]	; (800196c <HAL_RCC_ClockConfig+0x1cc>)
 8001940:	f859 3003 	ldr.w	r3, [r9, r3]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe ff42 	bl	80007d0 <HAL_InitTick>
 800194c:	4603      	mov	r3, r0
 800194e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001950:	7afb      	ldrb	r3, [r7, #11]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40022000 	.word	0x40022000
 8001960:	40021000 	.word	0x40021000
 8001964:	00000014 	.word	0x00000014
 8001968:	00000004 	.word	0x00000004
 800196c:	00000010 	.word	0x00000010

08001970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001970:	b480      	push	{r7}
 8001972:	b089      	sub	sp, #36	; 0x24
 8001974:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
 800197a:	2300      	movs	r3, #0
 800197c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800197e:	4b3f      	ldr	r3, [pc, #252]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 030c 	and.w	r3, r3, #12
 8001986:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001988:	4b3c      	ldr	r3, [pc, #240]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x10c>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d005      	beq.n	80019a4 <HAL_RCC_GetSysClockFreq+0x34>
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	2b0c      	cmp	r3, #12
 800199c:	d124      	bne.n	80019e8 <HAL_RCC_GetSysClockFreq+0x78>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d121      	bne.n	80019e8 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80019a4:	4b35      	ldr	r3, [pc, #212]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x10c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0308 	and.w	r3, r3, #8
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d107      	bne.n	80019c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80019b0:	4b32      	ldr	r3, [pc, #200]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x10c>)
 80019b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019b6:	0a1b      	lsrs	r3, r3, #8
 80019b8:	f003 030f 	and.w	r3, r3, #15
 80019bc:	61fb      	str	r3, [r7, #28]
 80019be:	e005      	b.n	80019cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019c0:	4b2e      	ldr	r3, [pc, #184]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x10c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	091b      	lsrs	r3, r3, #4
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80019cc:	4b2e      	ldr	r3, [pc, #184]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x118>)
 80019ce:	f859 3003 	ldr.w	r3, [r9, r3]
 80019d2:	461a      	mov	r2, r3
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019da:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10d      	bne.n	80019fe <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019e6:	e00a      	b.n	80019fe <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	d102      	bne.n	80019f4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019ee:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x110>)
 80019f0:	61bb      	str	r3, [r7, #24]
 80019f2:	e004      	b.n	80019fe <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	2b08      	cmp	r3, #8
 80019f8:	d101      	bne.n	80019fe <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019fa:	4b22      	ldr	r3, [pc, #136]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x114>)
 80019fc:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	2b0c      	cmp	r3, #12
 8001a02:	d134      	bne.n	8001a6e <HAL_RCC_GetSysClockFreq+0xfe>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a04:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d003      	beq.n	8001a1c <HAL_RCC_GetSysClockFreq+0xac>
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	2b03      	cmp	r3, #3
 8001a18:	d003      	beq.n	8001a22 <HAL_RCC_GetSysClockFreq+0xb2>
 8001a1a:	e005      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0xb8>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a1c:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a1e:	617b      	str	r3, [r7, #20]
      break;
 8001a20:	e005      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0xbe>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a22:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a24:	617b      	str	r3, [r7, #20]
      break;
 8001a26:	e002      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0xbe>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	617b      	str	r3, [r7, #20]
      break;
 8001a2c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a2e:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	091b      	lsrs	r3, r3, #4
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	3301      	adds	r3, #1
 8001a3a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	0a1b      	lsrs	r3, r3, #8
 8001a42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	fb02 f203 	mul.w	r2, r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a52:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	0e5b      	lsrs	r3, r3, #25
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	3301      	adds	r3, #1
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a6e:	69bb      	ldr	r3, [r7, #24]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3724      	adds	r7, #36	; 0x24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	00f42400 	.word	0x00f42400
 8001a84:	007a1200 	.word	0x007a1200
 8001a88:	00000000 	.word	0x00000000

08001a8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a98:	4b2a      	ldr	r3, [pc, #168]	; (8001b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001aa4:	f7ff f9f0 	bl	8000e88 <HAL_PWREx_GetVoltageRange>
 8001aa8:	6178      	str	r0, [r7, #20]
 8001aaa:	e014      	b.n	8001ad6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001aac:	4b25      	ldr	r3, [pc, #148]	; (8001b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab0:	4a24      	ldr	r2, [pc, #144]	; (8001b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ab8:	4b22      	ldr	r3, [pc, #136]	; (8001b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ac4:	f7ff f9e0 	bl	8000e88 <HAL_PWREx_GetVoltageRange>
 8001ac8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001aca:	4b1e      	ldr	r3, [pc, #120]	; (8001b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ace:	4a1d      	ldr	r2, [pc, #116]	; (8001b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ad0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001adc:	d10b      	bne.n	8001af6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b80      	cmp	r3, #128	; 0x80
 8001ae2:	d919      	bls.n	8001b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2ba0      	cmp	r3, #160	; 0xa0
 8001ae8:	d902      	bls.n	8001af0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001aea:	2302      	movs	r3, #2
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	e013      	b.n	8001b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001af0:	2301      	movs	r3, #1
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	e010      	b.n	8001b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b80      	cmp	r3, #128	; 0x80
 8001afa:	d902      	bls.n	8001b02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001afc:	2303      	movs	r3, #3
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	e00a      	b.n	8001b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b80      	cmp	r3, #128	; 0x80
 8001b06:	d102      	bne.n	8001b0e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b08:	2302      	movs	r3, #2
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	e004      	b.n	8001b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b70      	cmp	r3, #112	; 0x70
 8001b12:	d101      	bne.n	8001b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b14:	2301      	movs	r3, #1
 8001b16:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f023 0207 	bic.w	r2, r3, #7
 8001b20:	4909      	ldr	r1, [pc, #36]	; (8001b48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b28:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d001      	beq.n	8001b3a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40022000 	.word	0x40022000

08001b4c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001b56:	f043 0304 	orr.w	r3, r3, #4
 8001b5a:	6013      	str	r3, [r2, #0]
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40021000 	.word	0x40021000

08001b6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e049      	b.n	8001c12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d106      	bne.n	8001b98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7fe fc72 	bl	800047c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3304      	adds	r3, #4
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4610      	mov	r0, r2
 8001bac:	f000 fa2e 	bl	800200c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2202      	movs	r2, #2
 8001c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6a1a      	ldr	r2, [r3, #32]
 8001c30:	f241 1311 	movw	r3, #4369	; 0x1111
 8001c34:	4013      	ands	r3, r2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10f      	bne.n	8001c5a <HAL_TIM_Base_DeInit+0x40>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6a1a      	ldr	r2, [r3, #32]
 8001c40:	f240 4344 	movw	r3, #1092	; 0x444
 8001c44:	4013      	ands	r3, r2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d107      	bne.n	8001c5a <HAL_TIM_Base_DeInit+0x40>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 0201 	bic.w	r2, r2, #1
 8001c58:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7fe fc34 	bl	80004c8 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d001      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e03b      	b.n	8001d64 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2202      	movs	r2, #2
 8001cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0201 	orr.w	r2, r2, #1
 8001d02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a19      	ldr	r2, [pc, #100]	; (8001d70 <HAL_TIM_Base_Start_IT+0x9c>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d009      	beq.n	8001d22 <HAL_TIM_Base_Start_IT+0x4e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d16:	d004      	beq.n	8001d22 <HAL_TIM_Base_Start_IT+0x4e>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a15      	ldr	r2, [pc, #84]	; (8001d74 <HAL_TIM_Base_Start_IT+0xa0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d115      	bne.n	8001d4e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <HAL_TIM_Base_Start_IT+0xa4>)
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2b06      	cmp	r3, #6
 8001d32:	d015      	beq.n	8001d60 <HAL_TIM_Base_Start_IT+0x8c>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3a:	d011      	beq.n	8001d60 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0201 	orr.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d4c:	e008      	b.n	8001d60 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f042 0201 	orr.w	r2, r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	e000      	b.n	8001d62 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	40012c00 	.word	0x40012c00
 8001d74:	40014000 	.word	0x40014000
 8001d78:	00010007 	.word	0x00010007

08001d7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d122      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d11b      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f06f 0202 	mvn.w	r2, #2
 8001da8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f905 	bl	8001fce <HAL_TIM_IC_CaptureCallback>
 8001dc4:	e005      	b.n	8001dd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f8f7 	bl	8001fba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f908 	bl	8001fe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d122      	bne.n	8001e2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d11b      	bne.n	8001e2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0204 	mvn.w	r2, #4
 8001dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2202      	movs	r2, #2
 8001e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f8db 	bl	8001fce <HAL_TIM_IC_CaptureCallback>
 8001e18:	e005      	b.n	8001e26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f8cd 	bl	8001fba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f8de 	bl	8001fe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d122      	bne.n	8001e80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d11b      	bne.n	8001e80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0208 	mvn.w	r2, #8
 8001e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2204      	movs	r2, #4
 8001e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f8b1 	bl	8001fce <HAL_TIM_IC_CaptureCallback>
 8001e6c:	e005      	b.n	8001e7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f8a3 	bl	8001fba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f8b4 	bl	8001fe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	f003 0310 	and.w	r3, r3, #16
 8001e8a:	2b10      	cmp	r3, #16
 8001e8c:	d122      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f003 0310 	and.w	r3, r3, #16
 8001e98:	2b10      	cmp	r3, #16
 8001e9a:	d11b      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f06f 0210 	mvn.w	r2, #16
 8001ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2208      	movs	r2, #8
 8001eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f887 	bl	8001fce <HAL_TIM_IC_CaptureCallback>
 8001ec0:	e005      	b.n	8001ece <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f879 	bl	8001fba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f88a 	bl	8001fe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d10e      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d107      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0201 	mvn.w	r2, #1
 8001ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7fe fa34 	bl	8000368 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0a:	2b80      	cmp	r3, #128	; 0x80
 8001f0c:	d10e      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f18:	2b80      	cmp	r3, #128	; 0x80
 8001f1a:	d107      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f8de 	bl	80020e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f3a:	d10e      	bne.n	8001f5a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f46:	2b80      	cmp	r3, #128	; 0x80
 8001f48:	d107      	bne.n	8001f5a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001f52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f8d1 	bl	80020fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f64:	2b40      	cmp	r3, #64	; 0x40
 8001f66:	d10e      	bne.n	8001f86 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f72:	2b40      	cmp	r3, #64	; 0x40
 8001f74:	d107      	bne.n	8001f86 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f838 	bl	8001ff6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	f003 0320 	and.w	r3, r3, #32
 8001f90:	2b20      	cmp	r3, #32
 8001f92:	d10e      	bne.n	8001fb2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	f003 0320 	and.w	r3, r3, #32
 8001f9e:	2b20      	cmp	r3, #32
 8001fa0:	d107      	bne.n	8001fb2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f06f 0220 	mvn.w	r2, #32
 8001faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f891 	bl	80020d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
	...

0800200c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a2a      	ldr	r2, [pc, #168]	; (80020c8 <TIM_Base_SetConfig+0xbc>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d003      	beq.n	800202c <TIM_Base_SetConfig+0x20>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800202a:	d108      	bne.n	800203e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4313      	orrs	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a21      	ldr	r2, [pc, #132]	; (80020c8 <TIM_Base_SetConfig+0xbc>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d00b      	beq.n	800205e <TIM_Base_SetConfig+0x52>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800204c:	d007      	beq.n	800205e <TIM_Base_SetConfig+0x52>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a1e      	ldr	r2, [pc, #120]	; (80020cc <TIM_Base_SetConfig+0xc0>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d003      	beq.n	800205e <TIM_Base_SetConfig+0x52>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a1d      	ldr	r2, [pc, #116]	; (80020d0 <TIM_Base_SetConfig+0xc4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d108      	bne.n	8002070 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4313      	orrs	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	4313      	orrs	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a0c      	ldr	r2, [pc, #48]	; (80020c8 <TIM_Base_SetConfig+0xbc>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d007      	beq.n	80020ac <TIM_Base_SetConfig+0xa0>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a0b      	ldr	r2, [pc, #44]	; (80020cc <TIM_Base_SetConfig+0xc0>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d003      	beq.n	80020ac <TIM_Base_SetConfig+0xa0>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <TIM_Base_SetConfig+0xc4>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d103      	bne.n	80020b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	691a      	ldr	r2, [r3, #16]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	615a      	str	r2, [r3, #20]
}
 80020ba:	bf00      	nop
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40012c00 	.word	0x40012c00
 80020cc:	40014000 	.word	0x40014000
 80020d0:	40014400 	.word	0x40014400

080020d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <memset>:
 8002110:	4402      	add	r2, r0
 8002112:	4603      	mov	r3, r0
 8002114:	4293      	cmp	r3, r2
 8002116:	d100      	bne.n	800211a <memset+0xa>
 8002118:	4770      	bx	lr
 800211a:	f803 1b01 	strb.w	r1, [r3], #1
 800211e:	e7f9      	b.n	8002114 <memset+0x4>

08002120 <_init>:
 8002120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002122:	bf00      	nop
 8002124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002126:	bc08      	pop	{r3}
 8002128:	469e      	mov	lr, r3
 800212a:	4770      	bx	lr

0800212c <_fini>:
 800212c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800212e:	bf00      	nop
 8002130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002132:	bc08      	pop	{r3}
 8002134:	469e      	mov	lr, r3
 8002136:	4770      	bx	lr
