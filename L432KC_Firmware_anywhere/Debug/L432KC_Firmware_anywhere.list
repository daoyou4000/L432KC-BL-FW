
L432KC_Firmware_anywhere.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  20000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .got          00000018  2000018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .got.plt      0000000c  200001a4  080001a4  000101a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .text         000017d8  080001b0  080001b0  000101b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000040  08001988  08001988  00011988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  080019c8  080019c8  000201bc  2**0
                  CONTENTS
  6 .ARM          00000000  080019c8  080019c8  000201bc  2**0
                  CONTENTS
  7 .preinit_array 00000000  080019c8  080019c8  000201bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  080019c8  080019c8  000119c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  080019cc  080019cc  000119cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         0000000c  200001b0  080019d0  000201b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000024  200001bc  080019dc  000201bc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200001e0  080019dc  000201e0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00007494  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001556  00000000  00000000  00027680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006b8  00000000  00000000  00028bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000600  00000000  00000000  00029290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001e810  00000000  00000000  00029890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00007368  00000000  00000000  000480a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b7d16  00000000  00000000  0004f408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  0010711e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000018a0  00000000  00000000  00107174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001bc 	.word	0x200001bc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001970 	.word	0x08001970

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001c0 	.word	0x200001c0
 80001ec:	08001970 	.word	0x08001970

080001f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
#warning Firmware configured in linker to start from 0x8000000 but .bin to be flashed to 0x8005000
  uint32_t u32LedCounter = 0;
 80001f6:	2300      	movs	r3, #0
 80001f8:	607b      	str	r3, [r7, #4]
  HAL_Init();
 80001fa:	f000 fa28 	bl	800064e <HAL_Init>
  SystemClock_Config();
 80001fe:	f000 f81f 	bl	8000240 <SystemClock_Config>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000202:	b662      	cpsie	i
}
 8000204:	bf00      	nop
  __enable_irq();
  MX_GPIO_Init();
 8000206:	f000 f87d 	bl	8000304 <MX_GPIO_Init>

  while (1)
  {
    //gu32FirmwareOffset++;
    u32LedCounter++;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	3301      	adds	r3, #1
 800020e:	607b      	str	r3, [r7, #4]

    if ((u32LedCounter % 0xF0000) == 0)
 8000210:	6879      	ldr	r1, [r7, #4]
 8000212:	4b09      	ldr	r3, [pc, #36]	; (8000238 <main+0x48>)
 8000214:	fba3 2301 	umull	r2, r3, r3, r1
 8000218:	0cda      	lsrs	r2, r3, #19
 800021a:	4613      	mov	r3, r2
 800021c:	011b      	lsls	r3, r3, #4
 800021e:	1a9b      	subs	r3, r3, r2
 8000220:	041b      	lsls	r3, r3, #16
 8000222:	1aca      	subs	r2, r1, r3
 8000224:	2a00      	cmp	r2, #0
 8000226:	d1f0      	bne.n	800020a <main+0x1a>
    {
      u32LedCounter = 0;
 8000228:	2300      	movs	r3, #0
 800022a:	607b      	str	r3, [r7, #4]
      HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800022c:	2108      	movs	r1, #8
 800022e:	4803      	ldr	r0, [pc, #12]	; (800023c <main+0x4c>)
 8000230:	f000 fcfa 	bl	8000c28 <HAL_GPIO_TogglePin>
    u32LedCounter++;
 8000234:	e7e9      	b.n	800020a <main+0x1a>
 8000236:	bf00      	nop
 8000238:	88888889 	.word	0x88888889
 800023c:	48000400 	.word	0x48000400

08000240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b096      	sub	sp, #88	; 0x58
 8000244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000246:	f107 0314 	add.w	r3, r7, #20
 800024a:	2244      	movs	r2, #68	; 0x44
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f001 fb86 	bl	8001960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000254:	463b      	mov	r3, r7
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
 8000260:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000262:	f000 fcfb 	bl	8000c5c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000266:	4b26      	ldr	r3, [pc, #152]	; (8000300 <SystemClock_Config+0xc0>)
 8000268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800026c:	4a24      	ldr	r2, [pc, #144]	; (8000300 <SystemClock_Config+0xc0>)
 800026e:	f023 0318 	bic.w	r3, r3, #24
 8000272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000276:	2314      	movs	r3, #20
 8000278:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800027a:	2301      	movs	r3, #1
 800027c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800027e:	2301      	movs	r3, #1
 8000280:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000282:	2300      	movs	r3, #0
 8000284:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000286:	2360      	movs	r3, #96	; 0x60
 8000288:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028a:	2302      	movs	r3, #2
 800028c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800028e:	2301      	movs	r3, #1
 8000290:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000292:	2301      	movs	r3, #1
 8000294:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000296:	2310      	movs	r3, #16
 8000298:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800029a:	2307      	movs	r3, #7
 800029c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800029e:	2302      	movs	r3, #2
 80002a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002a2:	2302      	movs	r3, #2
 80002a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a6:	f107 0314 	add.w	r3, r7, #20
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 fd4c 	bl	8000d48 <HAL_RCC_OscConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002b6:	f000 f86f 	bl	8000398 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ba:	230f      	movs	r3, #15
 80002bc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002be:	2303      	movs	r3, #3
 80002c0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002ce:	463b      	mov	r3, r7
 80002d0:	2101      	movs	r1, #1
 80002d2:	4618      	mov	r0, r3
 80002d4:	f001 f95e 	bl	8001594 <HAL_RCC_ClockConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80002de:	f000 f85b 	bl	8000398 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002e6:	f000 fcd7 	bl	8000c98 <HAL_PWREx_ControlVoltageScaling>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002f0:	f000 f852 	bl	8000398 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80002f4:	f001 fb24 	bl	8001940 <HAL_RCCEx_EnableMSIPLLMode>
}
 80002f8:	bf00      	nop
 80002fa:	3758      	adds	r7, #88	; 0x58
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	40021000 	.word	0x40021000

08000304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b088      	sub	sp, #32
 8000308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030a:	f107 030c 	add.w	r3, r7, #12
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]
 8000318:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800031a:	4b1d      	ldr	r3, [pc, #116]	; (8000390 <MX_GPIO_Init+0x8c>)
 800031c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800031e:	4a1c      	ldr	r2, [pc, #112]	; (8000390 <MX_GPIO_Init+0x8c>)
 8000320:	f043 0304 	orr.w	r3, r3, #4
 8000324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000326:	4b1a      	ldr	r3, [pc, #104]	; (8000390 <MX_GPIO_Init+0x8c>)
 8000328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800032a:	f003 0304 	and.w	r3, r3, #4
 800032e:	60bb      	str	r3, [r7, #8]
 8000330:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000332:	4b17      	ldr	r3, [pc, #92]	; (8000390 <MX_GPIO_Init+0x8c>)
 8000334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000336:	4a16      	ldr	r2, [pc, #88]	; (8000390 <MX_GPIO_Init+0x8c>)
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800033e:	4b14      	ldr	r3, [pc, #80]	; (8000390 <MX_GPIO_Init+0x8c>)
 8000340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000342:	f003 0301 	and.w	r3, r3, #1
 8000346:	607b      	str	r3, [r7, #4]
 8000348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800034a:	4b11      	ldr	r3, [pc, #68]	; (8000390 <MX_GPIO_Init+0x8c>)
 800034c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800034e:	4a10      	ldr	r2, [pc, #64]	; (8000390 <MX_GPIO_Init+0x8c>)
 8000350:	f043 0302 	orr.w	r3, r3, #2
 8000354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000356:	4b0e      	ldr	r3, [pc, #56]	; (8000390 <MX_GPIO_Init+0x8c>)
 8000358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035a:	f003 0302 	and.w	r3, r3, #2
 800035e:	603b      	str	r3, [r7, #0]
 8000360:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000362:	2200      	movs	r2, #0
 8000364:	2108      	movs	r1, #8
 8000366:	480b      	ldr	r0, [pc, #44]	; (8000394 <MX_GPIO_Init+0x90>)
 8000368:	f000 fc46 	bl	8000bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800036c:	2308      	movs	r3, #8
 800036e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000370:	2301      	movs	r3, #1
 8000372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000378:	2300      	movs	r3, #0
 800037a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800037c:	f107 030c 	add.w	r3, r7, #12
 8000380:	4619      	mov	r1, r3
 8000382:	4804      	ldr	r0, [pc, #16]	; (8000394 <MX_GPIO_Init+0x90>)
 8000384:	f000 face 	bl	8000924 <HAL_GPIO_Init>

}
 8000388:	bf00      	nop
 800038a:	3720      	adds	r7, #32
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40021000 	.word	0x40021000
 8000394:	48000400 	.word	0x48000400

08000398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800039c:	b672      	cpsid	i
}
 800039e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003a0:	e7fe      	b.n	80003a0 <Error_Handler+0x8>
	...

080003a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003aa:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <HAL_MspInit+0x44>)
 80003ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003ae:	4a0e      	ldr	r2, [pc, #56]	; (80003e8 <HAL_MspInit+0x44>)
 80003b0:	f043 0301 	orr.w	r3, r3, #1
 80003b4:	6613      	str	r3, [r2, #96]	; 0x60
 80003b6:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <HAL_MspInit+0x44>)
 80003b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003ba:	f003 0301 	and.w	r3, r3, #1
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003c2:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <HAL_MspInit+0x44>)
 80003c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003c6:	4a08      	ldr	r2, [pc, #32]	; (80003e8 <HAL_MspInit+0x44>)
 80003c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003cc:	6593      	str	r3, [r2, #88]	; 0x58
 80003ce:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <HAL_MspInit+0x44>)
 80003d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003d6:	603b      	str	r3, [r7, #0]
 80003d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003da:	bf00      	nop
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	40021000 	.word	0x40021000

080003ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003f0:	e7fe      	b.n	80003f0 <NMI_Handler+0x4>
	...

080003f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  uint32_t u32Cfsr = *((uint32_t*)0xE000ED28);
 80003fa:	4b03      	ldr	r3, [pc, #12]	; (8000408 <HardFault_Handler+0x14>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	607b      	str	r3, [r7, #4]
  u32Cfsr += 0; // To stop compile nags

  uint32_t u32Bfar = *((uint32_t*)0xE000ED38);
 8000400:	4b02      	ldr	r3, [pc, #8]	; (800040c <HardFault_Handler+0x18>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	603b      	str	r3, [r7, #0]
  u32Bfar += 0;

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000406:	e7fe      	b.n	8000406 <HardFault_Handler+0x12>
 8000408:	e000ed28 	.word	0xe000ed28
 800040c:	e000ed38 	.word	0xe000ed38

08000410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000414:	e7fe      	b.n	8000414 <MemManage_Handler+0x4>

08000416 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000416:	b480      	push	{r7}
 8000418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800041a:	e7fe      	b.n	800041a <BusFault_Handler+0x4>

0800041c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000420:	e7fe      	b.n	8000420 <UsageFault_Handler+0x4>

08000422 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000422:	b480      	push	{r7}
 8000424:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000426:	bf00      	nop
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr

08000430 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr

0800043e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800043e:	b480      	push	{r7}
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000442:	bf00      	nop
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr

0800044c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000450:	f000 f95a 	bl	8000708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000454:	bf00      	nop
 8000456:	bd80      	pop	{r7, pc}

08000458 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif
  asm("ldr   r11, =0xDEB00030");
 800045c:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80004dc <SystemInit+0x84>

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000460:	4b1c      	ldr	r3, [pc, #112]	; (80004d4 <SystemInit+0x7c>)
 8000462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000466:	4a1b      	ldr	r2, [pc, #108]	; (80004d4 <SystemInit+0x7c>)
 8000468:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800046c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
  asm("ldr   r11, =0xDEB00040");
 8000470:	f8df b06c 	ldr.w	fp, [pc, #108]	; 80004e0 <SystemInit+0x88>

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000474:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <SystemInit+0x80>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a17      	ldr	r2, [pc, #92]	; (80004d8 <SystemInit+0x80>)
 800047a:	f043 0301 	orr.w	r3, r3, #1
 800047e:	6013      	str	r3, [r2, #0]

  asm("ldr   r11, =0xDEB00050");
 8000480:	f8df b060 	ldr.w	fp, [pc, #96]	; 80004e4 <SystemInit+0x8c>

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000484:	4b14      	ldr	r3, [pc, #80]	; (80004d8 <SystemInit+0x80>)
 8000486:	2200      	movs	r2, #0
 8000488:	609a      	str	r2, [r3, #8]

  asm("ldr   r11, =0xDEB00060");
 800048a:	f8df b05c 	ldr.w	fp, [pc, #92]	; 80004e8 <SystemInit+0x90>

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800048e:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <SystemInit+0x80>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a11      	ldr	r2, [pc, #68]	; (80004d8 <SystemInit+0x80>)
 8000494:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000498:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800049c:	6013      	str	r3, [r2, #0]

  asm("ldr   r11, =0xDEB00070");
 800049e:	f8df b04c 	ldr.w	fp, [pc, #76]	; 80004ec <SystemInit+0x94>

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80004a2:	4b0d      	ldr	r3, [pc, #52]	; (80004d8 <SystemInit+0x80>)
 80004a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004a8:	60da      	str	r2, [r3, #12]

  asm("ldr   r11, =0xDEB00080");
 80004aa:	f8df b044 	ldr.w	fp, [pc, #68]	; 80004f0 <SystemInit+0x98>

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80004ae:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <SystemInit+0x80>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a09      	ldr	r2, [pc, #36]	; (80004d8 <SystemInit+0x80>)
 80004b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004b8:	6013      	str	r3, [r2, #0]

  asm("ldr   r11, =0xDEB00090");
 80004ba:	f8df b038 	ldr.w	fp, [pc, #56]	; 80004f4 <SystemInit+0x9c>

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80004be:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <SystemInit+0x80>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	619a      	str	r2, [r3, #24]

  asm("ldr   r11, =0xDEB00100");
 80004c4:	f8df b030 	ldr.w	fp, [pc, #48]	; 80004f8 <SystemInit+0xa0>
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	e000ed00 	.word	0xe000ed00
 80004d8:	40021000 	.word	0x40021000
 80004dc:	deb00030 	.word	0xdeb00030
 80004e0:	deb00040 	.word	0xdeb00040
 80004e4:	deb00050 	.word	0xdeb00050
 80004e8:	deb00060 	.word	0xdeb00060
 80004ec:	deb00070 	.word	0xdeb00070
 80004f0:	deb00080 	.word	0xdeb00080
 80004f4:	deb00090 	.word	0xdeb00090
 80004f8:	deb00100 	.word	0xdeb00100

080004fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
	ldr   r11, =0xDEB00000;
 80004fc:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 80005f4 <LoopForever+0x2>
	ldr   sp, =_estack    /* Set stack pointer */
 8000500:	f8df d0f4 	ldr.w	sp, [pc, #244]	; 80005f8 <LoopForever+0x6>

	// Store r12 passed by bootloader as gu32FirmwareOffset
	ldr r8, =gu32FirmwareOffset
 8000504:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 80005fc <LoopForever+0xa>
	str r12, [r8]
 8000508:	f8c8 c000 	str.w	ip, [r8]
	movs r8, #0
 800050c:	f05f 0800 	movs.w	r8, #0

08000510 <GotPatchLoopInit>:

GotPatchLoopInit:
	movs r0, #0 // Loop variable
 8000510:	2000      	movs	r0, #0

08000512 <GotPatchLoopCond>:
GotPatchLoopCond:
	ldr r1, = _got_start_ram
 8000512:	493b      	ldr	r1, [pc, #236]	; (8000600 <LoopForever+0xe>)
	ldr r2, = _got_end_ram
 8000514:	4a3b      	ldr	r2, [pc, #236]	; (8000604 <LoopForever+0x12>)
	subs r2, r2, r1 // How many bytes is the lenght
 8000516:	1a52      	subs	r2, r2, r1
	cmp r0, r2 // Check if loop is at end
 8000518:	4290      	cmp	r0, r2
	beq GotPatchEnd // Jump to end if compare equal
 800051a:	d01a      	beq.n	8000552 <GotPatchEnd>

0800051c <GotPatchLoopBody>:
GotPatchLoopBody:
	movs r1, r0 // Copy original loop counter value to r1
 800051c:	0001      	movs	r1, r0
	adds r0, r0, #4 // Increase original loop counter r0
 800051e:	3004      	adds	r0, #4
	ldr r2, = _got_start_ram // Load got ram start
 8000520:	4a37      	ldr	r2, [pc, #220]	; (8000600 <LoopForever+0xe>)
	ldr r3, = _ram_start // Load actual ram start
 8000522:	4b39      	ldr	r3, [pc, #228]	; (8000608 <LoopForever+0x16>)
	subs r2, r2, r3 // r2 now has plain got offset from where ever
 8000524:	1ad2      	subs	r2, r2, r3
	ldr r3, = _flash_start // Start to assemble flash position
 8000526:	4b39      	ldr	r3, [pc, #228]	; (800060c <LoopForever+0x1a>)
	adds r3, r3, r12 // Add firmware offset
 8000528:	eb13 030c 	adds.w	r3, r3, ip
	adds r3, r3, r2 // Add plain offset
 800052c:	189b      	adds	r3, r3, r2
	adds r3, r3, r1 // Add loop offset to reading from flash
 800052e:	185b      	adds	r3, r3, r1
	ldr r3, [r3] // Load actual table data from flash
 8000530:	681b      	ldr	r3, [r3, #0]
	ldr r4, =_ram_start // Assemble limit to check if over start of ram, in which case don't modify (it is ram or a peripheral)
 8000532:	4c35      	ldr	r4, [pc, #212]	; (8000608 <LoopForever+0x16>)
	cmp r3, r4 // Compare address from got and start of ram
 8000534:	42a3      	cmp	r3, r4
	bhs GotStoreTableAddressToRam // If address higher or same (hs) than start of ram, branch to copy got address as is
 8000536:	d207      	bcs.n	8000548 <GotStoreTableAddressToRam>
	ldr r4, =_flash_end // Assemble limit to check if over end of flash, in which case something is just wrong, so branch to store and hope for the best
 8000538:	4c35      	ldr	r4, [pc, #212]	; (8000610 <LoopForever+0x1e>)
	cmp r3, r4 // Compare address from got and end of flash
 800053a:	42a3      	cmp	r3, r4
	bhs GotStoreTableAddressToRam // If address address higher or same (hs) than end of flash, branch to store got table address data and hope for the best
 800053c:	d204      	bcs.n	8000548 <GotStoreTableAddressToRam>
	ldr r4, =_flash_start // Assemble limit to check if under start of flash, in which case something is just wrong, so branch to store and hope for the best
 800053e:	4c33      	ldr	r4, [pc, #204]	; (800060c <LoopForever+0x1a>)
	cmp r3, r4 // Compare address from got and start of flash
 8000540:	42a3      	cmp	r3, r4
	blo GotStoreTableAddressToRam // If address address lower (lo) than start of flash, branch to store got table address data and hope for the best
 8000542:	d301      	bcc.n	8000548 <GotStoreTableAddressToRam>
	adds r3, r3, r12 // Finally a position in flash. Add the offset.
 8000544:	eb13 030c 	adds.w	r3, r3, ip

08000548 <GotStoreTableAddressToRam>:
GotStoreTableAddressToRam:
	ldr r4, =_ram_start// Start getting address in ram where to put the table address value
 8000548:	4c2f      	ldr	r4, [pc, #188]	; (8000608 <LoopForever+0x16>)
	adds r4, r4, r2 // Add plain offset of got
 800054a:	18a4      	adds	r4, r4, r2
	adds r4, r4, r1 // Add the original loop counter (is: 0, 4, 8, 12, ...)
 800054c:	1864      	adds	r4, r4, r1
	str r3, [r4] // Add the table address to ram
 800054e:	6023      	str	r3, [r4, #0]
	b GotPatchLoopCond // And go to check the loop
 8000550:	e7df      	b.n	8000512 <GotPatchLoopCond>

08000552 <GotPatchEnd>:
GotPatchEnd:
	ldr r9, =_got_start_ram // Putting the location of got table to agreed register r9
 8000552:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8000600 <LoopForever+0xe>
	movs r1, 0 // Cleaning up the rest, just in case
 8000556:	2100      	movs	r1, #0
	movs r2, 0
 8000558:	2200      	movs	r2, #0
	movs r3, 0
 800055a:	2300      	movs	r3, #0
	movs r4, 0
 800055c:	2400      	movs	r4, #0
	movs r5, 0
 800055e:	2500      	movs	r5, #0
	movs r6, 0
 8000560:	2600      	movs	r6, #0
	movs r7, 0
 8000562:	2700      	movs	r7, #0
	movs r8, 0
 8000564:	f05f 0800 	movs.w	r8, #0
	movs r10, 0
 8000568:	f05f 0a00 	movs.w	sl, #0
	movs r11, 0
 800056c:	f05f 0b00 	movs.w	fp, #0
	movs r12, 0
 8000570:	f05f 0c00 	movs.w	ip, #0

/* Call the clock system initialization function.*/
  	ldr   r11, =0xDEB00010;
 8000574:	f8df b09c 	ldr.w	fp, [pc, #156]	; 8000614 <LoopForever+0x22>
    bl  SystemInit
 8000578:	f7ff ff6e 	bl	8000458 <SystemInit>
  	ldr   r11, =0xDEB00110;
 800057c:	f8df b098 	ldr.w	fp, [pc, #152]	; 8000618 <LoopForever+0x26>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000580:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000582:	e00b      	b.n	800059c <LoopCopyDataInit>

08000584 <CopyDataInit>:

CopyDataInit:
	ldr r12, =gu32FirmwareOffset
 8000584:	f8df c074 	ldr.w	ip, [pc, #116]	; 80005fc <LoopForever+0xa>
	ldr r12, [r12]
 8000588:	f8dc c000 	ldr.w	ip, [ip]
	ldr   r11, =0xDEB00115
 800058c:	f8df b08c 	ldr.w	fp, [pc, #140]	; 800061c <LoopForever+0x2a>
	ldr	r3, =_sidata
 8000590:	4b23      	ldr	r3, [pc, #140]	; (8000620 <LoopForever+0x2e>)
	adds r3, r3, r12
 8000592:	eb13 030c 	adds.w	r3, r3, ip
	ldr	r3, [r3, r1]
 8000596:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000598:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800059a:	3104      	adds	r1, #4

0800059c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr r12, =gu32FirmwareOffset
 800059c:	f8df c05c 	ldr.w	ip, [pc, #92]	; 80005fc <LoopForever+0xa>
	ldr r12, [r12]
 80005a0:	f8dc c000 	ldr.w	ip, [ip]
	ldr   r11, =0xDEB00120
 80005a4:	f8df b07c 	ldr.w	fp, [pc, #124]	; 8000624 <LoopForever+0x32>
	ldr	r0, =_sdata
 80005a8:	481f      	ldr	r0, [pc, #124]	; (8000628 <LoopForever+0x36>)
	adds r0, r0, r12
 80005aa:	eb10 000c 	adds.w	r0, r0, ip
	ldr   r11, =0xDEB00130
 80005ae:	f8df b07c 	ldr.w	fp, [pc, #124]	; 800062c <LoopForever+0x3a>
	ldr	r3, =_edata
 80005b2:	4b1f      	ldr	r3, [pc, #124]	; (8000630 <LoopForever+0x3e>)
	adds r3, r3, r12
 80005b4:	eb13 030c 	adds.w	r3, r3, ip
	adds	r2, r0, r1
 80005b8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80005ba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80005bc:	d3e2      	bcc.n	8000584 <CopyDataInit>
	ldr   r11, =0xDEB00140
 80005be:	f8df b074 	ldr.w	fp, [pc, #116]	; 8000634 <LoopForever+0x42>
	ldr	r2, =_sbss
 80005c2:	4a1d      	ldr	r2, [pc, #116]	; (8000638 <LoopForever+0x46>)
	adds r2, r2, r12
 80005c4:	eb12 020c 	adds.w	r2, r2, ip
	b	LoopFillZerobss
 80005c8:	e002      	b.n	80005d0 <LoopFillZerobss>

080005ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80005ca:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80005cc:	f842 3b04 	str.w	r3, [r2], #4

080005d0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr r12, =gu32FirmwareOffset
 80005d0:	f8df c028 	ldr.w	ip, [pc, #40]	; 80005fc <LoopForever+0xa>
	ldr r12, [r12]
 80005d4:	f8dc c000 	ldr.w	ip, [ip]
	ldr   r11, =0xDEB00150
 80005d8:	f8df b060 	ldr.w	fp, [pc, #96]	; 800063c <LoopForever+0x4a>
	ldr	r3, =_ebss
 80005dc:	4b18      	ldr	r3, [pc, #96]	; (8000640 <LoopForever+0x4e>)
	adds r3, r3, r12
 80005de:	eb13 030c 	adds.w	r3, r3, ip
	cmp	r2, r3
 80005e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80005e4:	d3f1      	bcc.n	80005ca <FillZerobss>

/* Call static constructors */
ldr   r11, =0xDEB00170;
 80005e6:	f8df b05c 	ldr.w	fp, [pc, #92]	; 8000644 <LoopForever+0x52>
    //bl __libc_init_array


ldr   r11, =0xDEB00180;
 80005ea:	f8df b05c 	ldr.w	fp, [pc, #92]	; 8000648 <LoopForever+0x56>

/* Call the application's entry point.*/
	bl	main
 80005ee:	f7ff fdff 	bl	80001f0 <main>

080005f2 <LoopForever>:

LoopForever:
    b LoopForever
 80005f2:	e7fe      	b.n	80005f2 <LoopForever>
	ldr   r11, =0xDEB00000;
 80005f4:	deb00000 	.word	0xdeb00000
	ldr   sp, =_estack    /* Set stack pointer */
 80005f8:	20010000 	.word	0x20010000
	ldr r8, =gu32FirmwareOffset
 80005fc:	200001d8 	.word	0x200001d8
	ldr r1, = _got_start_ram
 8000600:	2000018c 	.word	0x2000018c
	ldr r2, = _got_end_ram
 8000604:	200001a4 	.word	0x200001a4
	ldr r3, = _ram_start // Load actual ram start
 8000608:	20000000 	.word	0x20000000
	ldr r3, = _flash_start // Start to assemble flash position
 800060c:	08000000 	.word	0x08000000
	ldr r4, =_flash_end // Assemble limit to check if over end of flash, in which case something is just wrong, so branch to store and hope for the best
 8000610:	08010000 	.word	0x08010000
  	ldr   r11, =0xDEB00010;
 8000614:	deb00010 	.word	0xdeb00010
  	ldr   r11, =0xDEB00110;
 8000618:	deb00110 	.word	0xdeb00110
	ldr   r11, =0xDEB00115
 800061c:	deb00115 	.word	0xdeb00115
	ldr	r3, =_sidata
 8000620:	080019d0 	.word	0x080019d0
	ldr   r11, =0xDEB00120
 8000624:	deb00120 	.word	0xdeb00120
	ldr	r0, =_sdata
 8000628:	200001b0 	.word	0x200001b0
	ldr   r11, =0xDEB00130
 800062c:	deb00130 	.word	0xdeb00130
	ldr	r3, =_edata
 8000630:	200001bc 	.word	0x200001bc
	ldr   r11, =0xDEB00140
 8000634:	deb00140 	.word	0xdeb00140
	ldr	r2, =_sbss
 8000638:	200001bc 	.word	0x200001bc
	ldr   r11, =0xDEB00150
 800063c:	deb00150 	.word	0xdeb00150
	ldr	r3, =_ebss
 8000640:	200001e0 	.word	0x200001e0
ldr   r11, =0xDEB00170;
 8000644:	deb00170 	.word	0xdeb00170
ldr   r11, =0xDEB00180;
 8000648:	deb00180 	.word	0xdeb00180

0800064c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800064c:	e7fe      	b.n	800064c <ADC1_IRQHandler>

0800064e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	b082      	sub	sp, #8
 8000652:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000654:	2300      	movs	r3, #0
 8000656:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000658:	2003      	movs	r0, #3
 800065a:	f000 f92f 	bl	80008bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800065e:	2000      	movs	r0, #0
 8000660:	f000 f80e 	bl	8000680 <HAL_InitTick>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d002      	beq.n	8000670 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800066a:	2301      	movs	r3, #1
 800066c:	71fb      	strb	r3, [r7, #7]
 800066e:	e001      	b.n	8000674 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000670:	f7ff fe98 	bl	80003a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000674:	79fb      	ldrb	r3, [r7, #7]
}
 8000676:	4618      	mov	r0, r3
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000688:	2300      	movs	r3, #0
 800068a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800068c:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <HAL_InitTick+0x7c>)
 800068e:	f859 3003 	ldr.w	r3, [r9, r3]
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d02a      	beq.n	80006ee <HAL_InitTick+0x6e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000698:	4b19      	ldr	r3, [pc, #100]	; (8000700 <HAL_InitTick+0x80>)
 800069a:	f859 3003 	ldr.w	r3, [r9, r3]
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	4b16      	ldr	r3, [pc, #88]	; (80006fc <HAL_InitTick+0x7c>)
 80006a2:	f859 3003 	ldr.w	r3, [r9, r3]
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	4619      	mov	r1, r3
 80006aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80006b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 f927 	bl	800090a <HAL_SYSTICK_Config>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d112      	bne.n	80006e8 <HAL_InitTick+0x68>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2b0f      	cmp	r3, #15
 80006c6:	d80c      	bhi.n	80006e2 <HAL_InitTick+0x62>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c8:	2200      	movs	r2, #0
 80006ca:	6879      	ldr	r1, [r7, #4]
 80006cc:	f04f 30ff 	mov.w	r0, #4294967295
 80006d0:	f000 f8ff 	bl	80008d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006d4:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <HAL_InitTick+0x84>)
 80006d6:	f859 3003 	ldr.w	r3, [r9, r3]
 80006da:	461a      	mov	r2, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	e007      	b.n	80006f2 <HAL_InitTick+0x72>
      }
      else
      {
        status = HAL_ERROR;
 80006e2:	2301      	movs	r3, #1
 80006e4:	73fb      	strb	r3, [r7, #15]
 80006e6:	e004      	b.n	80006f2 <HAL_InitTick+0x72>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006e8:	2301      	movs	r3, #1
 80006ea:	73fb      	strb	r3, [r7, #15]
 80006ec:	e001      	b.n	80006f2 <HAL_InitTick+0x72>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006ee:	2301      	movs	r3, #1
 80006f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	00000008 	.word	0x00000008
 8000700:	00000004 	.word	0x00000004
 8000704:	00000010 	.word	0x00000010

08000708 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <HAL_IncTick+0x2c>)
 800070e:	f859 3003 	ldr.w	r3, [r9, r3]
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	461a      	mov	r2, r3
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <HAL_IncTick+0x30>)
 8000718:	f859 3003 	ldr.w	r3, [r9, r3]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4413      	add	r3, r2
 8000720:	4a05      	ldr	r2, [pc, #20]	; (8000738 <HAL_IncTick+0x30>)
 8000722:	f859 2002 	ldr.w	r2, [r9, r2]
 8000726:	6013      	str	r3, [r2, #0]
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	00000008 	.word	0x00000008
 8000738:	0000000c 	.word	0x0000000c

0800073c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  return uwTick;
 8000740:	4b04      	ldr	r3, [pc, #16]	; (8000754 <HAL_GetTick+0x18>)
 8000742:	f859 3003 	ldr.w	r3, [r9, r3]
 8000746:	681b      	ldr	r3, [r3, #0]
}
 8000748:	4618      	mov	r0, r3
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	0000000c 	.word	0x0000000c

08000758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f003 0307 	and.w	r3, r3, #7
 8000766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <__NVIC_SetPriorityGrouping+0x44>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800076e:	68ba      	ldr	r2, [r7, #8]
 8000770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000774:	4013      	ands	r3, r2
 8000776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800078a:	4a04      	ldr	r2, [pc, #16]	; (800079c <__NVIC_SetPriorityGrouping+0x44>)
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	60d3      	str	r3, [r2, #12]
}
 8000790:	bf00      	nop
 8000792:	3714      	adds	r7, #20
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a4:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <__NVIC_GetPriorityGrouping+0x18>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	0a1b      	lsrs	r3, r3, #8
 80007aa:	f003 0307 	and.w	r3, r3, #7
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	6039      	str	r1, [r7, #0]
 80007c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	db0a      	blt.n	80007e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	490c      	ldr	r1, [pc, #48]	; (8000808 <__NVIC_SetPriority+0x4c>)
 80007d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007da:	0112      	lsls	r2, r2, #4
 80007dc:	b2d2      	uxtb	r2, r2
 80007de:	440b      	add	r3, r1
 80007e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007e4:	e00a      	b.n	80007fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4908      	ldr	r1, [pc, #32]	; (800080c <__NVIC_SetPriority+0x50>)
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	f003 030f 	and.w	r3, r3, #15
 80007f2:	3b04      	subs	r3, #4
 80007f4:	0112      	lsls	r2, r2, #4
 80007f6:	b2d2      	uxtb	r2, r2
 80007f8:	440b      	add	r3, r1
 80007fa:	761a      	strb	r2, [r3, #24]
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	e000e100 	.word	0xe000e100
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000810:	b480      	push	{r7}
 8000812:	b089      	sub	sp, #36	; 0x24
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	f003 0307 	and.w	r3, r3, #7
 8000822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000824:	69fb      	ldr	r3, [r7, #28]
 8000826:	f1c3 0307 	rsb	r3, r3, #7
 800082a:	2b04      	cmp	r3, #4
 800082c:	bf28      	it	cs
 800082e:	2304      	movcs	r3, #4
 8000830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	3304      	adds	r3, #4
 8000836:	2b06      	cmp	r3, #6
 8000838:	d902      	bls.n	8000840 <NVIC_EncodePriority+0x30>
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	3b03      	subs	r3, #3
 800083e:	e000      	b.n	8000842 <NVIC_EncodePriority+0x32>
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000844:	f04f 32ff 	mov.w	r2, #4294967295
 8000848:	69bb      	ldr	r3, [r7, #24]
 800084a:	fa02 f303 	lsl.w	r3, r2, r3
 800084e:	43da      	mvns	r2, r3
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	401a      	ands	r2, r3
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000858:	f04f 31ff 	mov.w	r1, #4294967295
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	fa01 f303 	lsl.w	r3, r1, r3
 8000862:	43d9      	mvns	r1, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000868:	4313      	orrs	r3, r2
         );
}
 800086a:	4618      	mov	r0, r3
 800086c:	3724      	adds	r7, #36	; 0x24
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
	...

08000878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3b01      	subs	r3, #1
 8000884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000888:	d301      	bcc.n	800088e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800088a:	2301      	movs	r3, #1
 800088c:	e00f      	b.n	80008ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800088e:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <SysTick_Config+0x40>)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3b01      	subs	r3, #1
 8000894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000896:	210f      	movs	r1, #15
 8000898:	f04f 30ff 	mov.w	r0, #4294967295
 800089c:	f7ff ff8e 	bl	80007bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <SysTick_Config+0x40>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008a6:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <SysTick_Config+0x40>)
 80008a8:	2207      	movs	r2, #7
 80008aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	e000e010 	.word	0xe000e010

080008bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f7ff ff47 	bl	8000758 <__NVIC_SetPriorityGrouping>
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b086      	sub	sp, #24
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	4603      	mov	r3, r0
 80008da:	60b9      	str	r1, [r7, #8]
 80008dc:	607a      	str	r2, [r7, #4]
 80008de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008e4:	f7ff ff5c 	bl	80007a0 <__NVIC_GetPriorityGrouping>
 80008e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	68b9      	ldr	r1, [r7, #8]
 80008ee:	6978      	ldr	r0, [r7, #20]
 80008f0:	f7ff ff8e 	bl	8000810 <NVIC_EncodePriority>
 80008f4:	4602      	mov	r2, r0
 80008f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008fa:	4611      	mov	r1, r2
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff ff5d 	bl	80007bc <__NVIC_SetPriority>
}
 8000902:	bf00      	nop
 8000904:	3718      	adds	r7, #24
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b082      	sub	sp, #8
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f7ff ffb0 	bl	8000878 <SysTick_Config>
 8000918:	4603      	mov	r3, r0
}
 800091a:	4618      	mov	r0, r3
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000924:	b480      	push	{r7}
 8000926:	b087      	sub	sp, #28
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000932:	e148      	b.n	8000bc6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	2101      	movs	r1, #1
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	fa01 f303 	lsl.w	r3, r1, r3
 8000940:	4013      	ands	r3, r2
 8000942:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	2b00      	cmp	r3, #0
 8000948:	f000 813a 	beq.w	8000bc0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d00b      	beq.n	800096c <HAL_GPIO_Init+0x48>
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	2b02      	cmp	r3, #2
 800095a:	d007      	beq.n	800096c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000960:	2b11      	cmp	r3, #17
 8000962:	d003      	beq.n	800096c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	2b12      	cmp	r3, #18
 800096a:	d130      	bne.n	80009ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	689b      	ldr	r3, [r3, #8]
 8000970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	2203      	movs	r2, #3
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	43db      	mvns	r3, r3
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	4013      	ands	r3, r2
 8000982:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	68da      	ldr	r2, [r3, #12]
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
 8000990:	693a      	ldr	r2, [r7, #16]
 8000992:	4313      	orrs	r3, r2
 8000994:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	693a      	ldr	r2, [r7, #16]
 800099a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009a2:	2201      	movs	r2, #1
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	43db      	mvns	r3, r3
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	4013      	ands	r3, r2
 80009b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	091b      	lsrs	r3, r3, #4
 80009b8:	f003 0201 	and.w	r2, r3, #1
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	68db      	ldr	r3, [r3, #12]
 80009d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	2203      	movs	r2, #3
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	43db      	mvns	r3, r3
 80009e0:	693a      	ldr	r2, [r7, #16]
 80009e2:	4013      	ands	r3, r2
 80009e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	689a      	ldr	r2, [r3, #8]
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	d003      	beq.n	8000a0e <HAL_GPIO_Init+0xea>
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	2b12      	cmp	r3, #18
 8000a0c:	d123      	bne.n	8000a56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	08da      	lsrs	r2, r3, #3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	3208      	adds	r2, #8
 8000a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	220f      	movs	r2, #15
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	691a      	ldr	r2, [r3, #16]
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	f003 0307 	and.w	r3, r3, #7
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	08da      	lsrs	r2, r3, #3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3208      	adds	r2, #8
 8000a50:	6939      	ldr	r1, [r7, #16]
 8000a52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	2203      	movs	r2, #3
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	43db      	mvns	r3, r3
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	f003 0203 	and.w	r2, r3, #3
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	f000 8094 	beq.w	8000bc0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a98:	4b52      	ldr	r3, [pc, #328]	; (8000be4 <HAL_GPIO_Init+0x2c0>)
 8000a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a9c:	4a51      	ldr	r2, [pc, #324]	; (8000be4 <HAL_GPIO_Init+0x2c0>)
 8000a9e:	f043 0301 	orr.w	r3, r3, #1
 8000aa2:	6613      	str	r3, [r2, #96]	; 0x60
 8000aa4:	4b4f      	ldr	r3, [pc, #316]	; (8000be4 <HAL_GPIO_Init+0x2c0>)
 8000aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ab0:	4a4d      	ldr	r2, [pc, #308]	; (8000be8 <HAL_GPIO_Init+0x2c4>)
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	089b      	lsrs	r3, r3, #2
 8000ab6:	3302      	adds	r3, #2
 8000ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	f003 0303 	and.w	r3, r3, #3
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	220f      	movs	r2, #15
 8000ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8000acc:	43db      	mvns	r3, r3
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ada:	d00d      	beq.n	8000af8 <HAL_GPIO_Init+0x1d4>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a43      	ldr	r2, [pc, #268]	; (8000bec <HAL_GPIO_Init+0x2c8>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d007      	beq.n	8000af4 <HAL_GPIO_Init+0x1d0>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a42      	ldr	r2, [pc, #264]	; (8000bf0 <HAL_GPIO_Init+0x2cc>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d101      	bne.n	8000af0 <HAL_GPIO_Init+0x1cc>
 8000aec:	2302      	movs	r3, #2
 8000aee:	e004      	b.n	8000afa <HAL_GPIO_Init+0x1d6>
 8000af0:	2307      	movs	r3, #7
 8000af2:	e002      	b.n	8000afa <HAL_GPIO_Init+0x1d6>
 8000af4:	2301      	movs	r3, #1
 8000af6:	e000      	b.n	8000afa <HAL_GPIO_Init+0x1d6>
 8000af8:	2300      	movs	r3, #0
 8000afa:	697a      	ldr	r2, [r7, #20]
 8000afc:	f002 0203 	and.w	r2, r2, #3
 8000b00:	0092      	lsls	r2, r2, #2
 8000b02:	4093      	lsls	r3, r2
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b0a:	4937      	ldr	r1, [pc, #220]	; (8000be8 <HAL_GPIO_Init+0x2c4>)
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	089b      	lsrs	r3, r3, #2
 8000b10:	3302      	adds	r3, #2
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b18:	4b36      	ldr	r3, [pc, #216]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	43db      	mvns	r3, r3
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	4013      	ands	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d003      	beq.n	8000b3c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b3c:	4a2d      	ldr	r2, [pc, #180]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000b42:	4b2c      	ldr	r3, [pc, #176]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	43db      	mvns	r3, r3
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d003      	beq.n	8000b66 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b66:	4a23      	ldr	r2, [pc, #140]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b6c:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	43db      	mvns	r3, r3
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d003      	beq.n	8000b90 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b90:	4a18      	ldr	r2, [pc, #96]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b98:	68db      	ldr	r3, [r3, #12]
 8000b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	43db      	mvns	r3, r3
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d003      	beq.n	8000bba <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bba:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	f47f aeaf 	bne.w	8000934 <HAL_GPIO_Init+0x10>
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	bf00      	nop
 8000bda:	371c      	adds	r7, #28
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	40021000 	.word	0x40021000
 8000be8:	40010000 	.word	0x40010000
 8000bec:	48000400 	.word	0x48000400
 8000bf0:	48000800 	.word	0x48000800
 8000bf4:	40010400 	.word	0x40010400

08000bf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	807b      	strh	r3, [r7, #2]
 8000c04:	4613      	mov	r3, r2
 8000c06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c08:	787b      	ldrb	r3, [r7, #1]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d003      	beq.n	8000c16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c0e:	887a      	ldrh	r2, [r7, #2]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c14:	e002      	b.n	8000c1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c16:	887a      	ldrh	r2, [r7, #2]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	460b      	mov	r3, r1
 8000c32:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	695b      	ldr	r3, [r3, #20]
 8000c38:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c3a:	887a      	ldrh	r2, [r7, #2]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	041a      	lsls	r2, r3, #16
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	43d9      	mvns	r1, r3
 8000c46:	887b      	ldrh	r3, [r7, #2]
 8000c48:	400b      	ands	r3, r1
 8000c4a:	431a      	orrs	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	619a      	str	r2, [r3, #24]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40007000 	.word	0x40007000

08000c7c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <HAL_PWREx_GetVoltageRange+0x18>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	40007000 	.word	0x40007000

08000c98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ca6:	d132      	bne.n	8000d0e <HAL_PWREx_ControlVoltageScaling+0x76>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ca8:	4b24      	ldr	r3, [pc, #144]	; (8000d3c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cb4:	d03a      	beq.n	8000d2c <HAL_PWREx_ControlVoltageScaling+0x94>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cb6:	4b21      	ldr	r3, [pc, #132]	; (8000d3c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cbe:	4a1f      	ldr	r2, [pc, #124]	; (8000d3c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000cc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cc4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000cc6:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8000cc8:	f859 3003 	ldr.w	r3, [r9, r3]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2232      	movs	r2, #50	; 0x32
 8000cd0:	fb02 f303 	mul.w	r3, r2, r3
 8000cd4:	4a1a      	ldr	r2, [pc, #104]	; (8000d40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cda:	0c9b      	lsrs	r3, r3, #18
 8000cdc:	3301      	adds	r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ce0:	e002      	b.n	8000ce8 <HAL_PWREx_ControlVoltageScaling+0x50>
      {
        wait_loop_index--;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ce8:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000cea:	695b      	ldr	r3, [r3, #20]
 8000cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cf4:	d102      	bne.n	8000cfc <HAL_PWREx_ControlVoltageScaling+0x64>
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d1f2      	bne.n	8000ce2 <HAL_PWREx_ControlVoltageScaling+0x4a>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000cfe:	695b      	ldr	r3, [r3, #20]
 8000d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d08:	d110      	bne.n	8000d2c <HAL_PWREx_ControlVoltageScaling+0x94>
      {
        return HAL_TIMEOUT;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	e00f      	b.n	8000d2e <HAL_PWREx_ControlVoltageScaling+0x96>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d1a:	d007      	beq.n	8000d2c <HAL_PWREx_ControlVoltageScaling+0x94>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d24:	4a05      	ldr	r2, [pc, #20]	; (8000d3c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000d26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d2a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3714      	adds	r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40007000 	.word	0x40007000
 8000d40:	431bde83 	.word	0x431bde83
 8000d44:	00000004 	.word	0x00000004

08000d48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d102      	bne.n	8000d5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	f000 bc17 	b.w	800158a <HAL_RCC_OscConfig+0x842>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d5c:	4ba3      	ldr	r3, [pc, #652]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	f003 030c 	and.w	r3, r3, #12
 8000d64:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d66:	4ba1      	ldr	r3, [pc, #644]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	f003 0303 	and.w	r3, r3, #3
 8000d6e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f003 0310 	and.w	r3, r3, #16
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	f000 80ea 	beq.w	8000f52 <HAL_RCC_OscConfig+0x20a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d007      	beq.n	8000d94 <HAL_RCC_OscConfig+0x4c>
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	2b0c      	cmp	r3, #12
 8000d88:	f040 8091 	bne.w	8000eae <HAL_RCC_OscConfig+0x166>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	f040 808d 	bne.w	8000eae <HAL_RCC_OscConfig+0x166>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d94:	4b95      	ldr	r3, [pc, #596]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f003 0302 	and.w	r3, r3, #2
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d005      	beq.n	8000dac <HAL_RCC_OscConfig+0x64>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d101      	bne.n	8000dac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	e3ee      	b.n	800158a <HAL_RCC_OscConfig+0x842>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6a1a      	ldr	r2, [r3, #32]
 8000db0:	4b8e      	ldr	r3, [pc, #568]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f003 0308 	and.w	r3, r3, #8
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d004      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x7e>
 8000dbc:	4b8b      	ldr	r3, [pc, #556]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000dc4:	e005      	b.n	8000dd2 <HAL_RCC_OscConfig+0x8a>
 8000dc6:	4b89      	ldr	r3, [pc, #548]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000dcc:	091b      	lsrs	r3, r3, #4
 8000dce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d223      	bcs.n	8000e1e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6a1b      	ldr	r3, [r3, #32]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 fd50 	bl	8001880 <RCC_SetFlashLatencyFromMSIRange>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e3cf      	b.n	800158a <HAL_RCC_OscConfig+0x842>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dea:	4b80      	ldr	r3, [pc, #512]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a7f      	ldr	r2, [pc, #508]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000df0:	f043 0308 	orr.w	r3, r3, #8
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	4b7d      	ldr	r3, [pc, #500]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6a1b      	ldr	r3, [r3, #32]
 8000e02:	497a      	ldr	r1, [pc, #488]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000e04:	4313      	orrs	r3, r2
 8000e06:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e08:	4b78      	ldr	r3, [pc, #480]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	69db      	ldr	r3, [r3, #28]
 8000e14:	021b      	lsls	r3, r3, #8
 8000e16:	4975      	ldr	r1, [pc, #468]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	604b      	str	r3, [r1, #4]
 8000e1c:	e025      	b.n	8000e6a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e1e:	4b73      	ldr	r3, [pc, #460]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a72      	ldr	r2, [pc, #456]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000e24:	f043 0308 	orr.w	r3, r3, #8
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	4b70      	ldr	r3, [pc, #448]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6a1b      	ldr	r3, [r3, #32]
 8000e36:	496d      	ldr	r1, [pc, #436]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e3c:	4b6b      	ldr	r3, [pc, #428]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	69db      	ldr	r3, [r3, #28]
 8000e48:	021b      	lsls	r3, r3, #8
 8000e4a:	4968      	ldr	r1, [pc, #416]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d109      	bne.n	8000e6a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a1b      	ldr	r3, [r3, #32]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 fd10 	bl	8001880 <RCC_SetFlashLatencyFromMSIRange>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e38f      	b.n	800158a <HAL_RCC_OscConfig+0x842>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e6a:	f000 fc7b 	bl	8001764 <HAL_RCC_GetSysClockFreq>
 8000e6e:	4601      	mov	r1, r0
 8000e70:	4b5e      	ldr	r3, [pc, #376]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	091b      	lsrs	r3, r3, #4
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	4a5d      	ldr	r2, [pc, #372]	; (8000ff0 <HAL_RCC_OscConfig+0x2a8>)
 8000e7c:	f859 2002 	ldr.w	r2, [r9, r2]
 8000e80:	5cd3      	ldrb	r3, [r2, r3]
 8000e82:	f003 031f 	and.w	r3, r3, #31
 8000e86:	fa21 f303 	lsr.w	r3, r1, r3
 8000e8a:	4a5a      	ldr	r2, [pc, #360]	; (8000ff4 <HAL_RCC_OscConfig+0x2ac>)
 8000e8c:	f859 2002 	ldr.w	r2, [r9, r2]
 8000e90:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e92:	4b59      	ldr	r3, [pc, #356]	; (8000ff8 <HAL_RCC_OscConfig+0x2b0>)
 8000e94:	f859 3003 	ldr.w	r3, [r9, r3]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fbf0 	bl	8000680 <HAL_InitTick>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d052      	beq.n	8000f50 <HAL_RCC_OscConfig+0x208>
        {
          return status;
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	e36d      	b.n	800158a <HAL_RCC_OscConfig+0x842>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d032      	beq.n	8000f1c <HAL_RCC_OscConfig+0x1d4>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000eb6:	4b4d      	ldr	r3, [pc, #308]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a4c      	ldr	r2, [pc, #304]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ec2:	f7ff fc3b 	bl	800073c <HAL_GetTick>
 8000ec6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ec8:	e008      	b.n	8000edc <HAL_RCC_OscConfig+0x194>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000eca:	f7ff fc37 	bl	800073c <HAL_GetTick>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d901      	bls.n	8000edc <HAL_RCC_OscConfig+0x194>
          {
            return HAL_TIMEOUT;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	e356      	b.n	800158a <HAL_RCC_OscConfig+0x842>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000edc:	4b43      	ldr	r3, [pc, #268]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 0302 	and.w	r3, r3, #2
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d0f0      	beq.n	8000eca <HAL_RCC_OscConfig+0x182>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ee8:	4b40      	ldr	r3, [pc, #256]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a3f      	ldr	r2, [pc, #252]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000eee:	f043 0308 	orr.w	r3, r3, #8
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	4b3d      	ldr	r3, [pc, #244]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a1b      	ldr	r3, [r3, #32]
 8000f00:	493a      	ldr	r1, [pc, #232]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000f02:	4313      	orrs	r3, r2
 8000f04:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f06:	4b39      	ldr	r3, [pc, #228]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	021b      	lsls	r3, r3, #8
 8000f14:	4935      	ldr	r1, [pc, #212]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000f16:	4313      	orrs	r3, r2
 8000f18:	604b      	str	r3, [r1, #4]
 8000f1a:	e01a      	b.n	8000f52 <HAL_RCC_OscConfig+0x20a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f1c:	4b33      	ldr	r3, [pc, #204]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a32      	ldr	r2, [pc, #200]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000f22:	f023 0301 	bic.w	r3, r3, #1
 8000f26:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f28:	f7ff fc08 	bl	800073c <HAL_GetTick>
 8000f2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f2e:	e008      	b.n	8000f42 <HAL_RCC_OscConfig+0x1fa>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f30:	f7ff fc04 	bl	800073c <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d901      	bls.n	8000f42 <HAL_RCC_OscConfig+0x1fa>
          {
            return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e323      	b.n	800158a <HAL_RCC_OscConfig+0x842>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f42:	4b2a      	ldr	r3, [pc, #168]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1f0      	bne.n	8000f30 <HAL_RCC_OscConfig+0x1e8>
 8000f4e:	e000      	b.n	8000f52 <HAL_RCC_OscConfig+0x20a>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f50:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d073      	beq.n	8001046 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	2b08      	cmp	r3, #8
 8000f62:	d005      	beq.n	8000f70 <HAL_RCC_OscConfig+0x228>
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	2b0c      	cmp	r3, #12
 8000f68:	d10e      	bne.n	8000f88 <HAL_RCC_OscConfig+0x240>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	2b03      	cmp	r3, #3
 8000f6e:	d10b      	bne.n	8000f88 <HAL_RCC_OscConfig+0x240>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f70:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d063      	beq.n	8001044 <HAL_RCC_OscConfig+0x2fc>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d15f      	bne.n	8001044 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e300      	b.n	800158a <HAL_RCC_OscConfig+0x842>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f90:	d106      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x258>
 8000f92:	4b16      	ldr	r3, [pc, #88]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a15      	ldr	r2, [pc, #84]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	e01d      	b.n	8000fdc <HAL_RCC_OscConfig+0x294>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fa8:	d10c      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x27c>
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a0f      	ldr	r2, [pc, #60]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a0c      	ldr	r2, [pc, #48]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	e00b      	b.n	8000fdc <HAL_RCC_OscConfig+0x294>
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a08      	ldr	r2, [pc, #32]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fce:	6013      	str	r3, [r2, #0]
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a05      	ldr	r2, [pc, #20]	; (8000fec <HAL_RCC_OscConfig+0x2a4>)
 8000fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d01b      	beq.n	800101c <HAL_RCC_OscConfig+0x2d4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fe4:	f7ff fbaa 	bl	800073c <HAL_GetTick>
 8000fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fea:	e010      	b.n	800100e <HAL_RCC_OscConfig+0x2c6>
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	00000014 	.word	0x00000014
 8000ff4:	00000004 	.word	0x00000004
 8000ff8:	00000010 	.word	0x00000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ffc:	f7ff fb9e 	bl	800073c <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b64      	cmp	r3, #100	; 0x64
 8001008:	d901      	bls.n	800100e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	e2bd      	b.n	800158a <HAL_RCC_OscConfig+0x842>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800100e:	4baf      	ldr	r3, [pc, #700]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f0      	beq.n	8000ffc <HAL_RCC_OscConfig+0x2b4>
 800101a:	e014      	b.n	8001046 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800101c:	f7ff fb8e 	bl	800073c <HAL_GetTick>
 8001020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0x2ee>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001024:	f7ff fb8a 	bl	800073c <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b64      	cmp	r3, #100	; 0x64
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0x2ee>
          {
            return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e2a9      	b.n	800158a <HAL_RCC_OscConfig+0x842>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001036:	4ba5      	ldr	r3, [pc, #660]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1f0      	bne.n	8001024 <HAL_RCC_OscConfig+0x2dc>
 8001042:	e000      	b.n	8001046 <HAL_RCC_OscConfig+0x2fe>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d060      	beq.n	8001114 <HAL_RCC_OscConfig+0x3cc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	2b04      	cmp	r3, #4
 8001056:	d005      	beq.n	8001064 <HAL_RCC_OscConfig+0x31c>
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	2b0c      	cmp	r3, #12
 800105c:	d119      	bne.n	8001092 <HAL_RCC_OscConfig+0x34a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	2b02      	cmp	r3, #2
 8001062:	d116      	bne.n	8001092 <HAL_RCC_OscConfig+0x34a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001064:	4b99      	ldr	r3, [pc, #612]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800106c:	2b00      	cmp	r3, #0
 800106e:	d005      	beq.n	800107c <HAL_RCC_OscConfig+0x334>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d101      	bne.n	800107c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e286      	b.n	800158a <HAL_RCC_OscConfig+0x842>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800107c:	4b93      	ldr	r3, [pc, #588]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	061b      	lsls	r3, r3, #24
 800108a:	4990      	ldr	r1, [pc, #576]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 800108c:	4313      	orrs	r3, r2
 800108e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001090:	e040      	b.n	8001114 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d023      	beq.n	80010e2 <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800109a:	4b8c      	ldr	r3, [pc, #560]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a8b      	ldr	r2, [pc, #556]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 80010a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a6:	f7ff fb49 	bl	800073c <HAL_GetTick>
 80010aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010ac:	e008      	b.n	80010c0 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ae:	f7ff fb45 	bl	800073c <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e264      	b.n	800158a <HAL_RCC_OscConfig+0x842>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010c0:	4b82      	ldr	r3, [pc, #520]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0f0      	beq.n	80010ae <HAL_RCC_OscConfig+0x366>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010cc:	4b7f      	ldr	r3, [pc, #508]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	061b      	lsls	r3, r3, #24
 80010da:	497c      	ldr	r1, [pc, #496]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 80010dc:	4313      	orrs	r3, r2
 80010de:	604b      	str	r3, [r1, #4]
 80010e0:	e018      	b.n	8001114 <HAL_RCC_OscConfig+0x3cc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010e2:	4b7a      	ldr	r3, [pc, #488]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a79      	ldr	r2, [pc, #484]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 80010e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ee:	f7ff fb25 	bl	800073c <HAL_GetTick>
 80010f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010f4:	e008      	b.n	8001108 <HAL_RCC_OscConfig+0x3c0>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010f6:	f7ff fb21 	bl	800073c <HAL_GetTick>
 80010fa:	4602      	mov	r2, r0
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d901      	bls.n	8001108 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001104:	2303      	movs	r3, #3
 8001106:	e240      	b.n	800158a <HAL_RCC_OscConfig+0x842>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001108:	4b70      	ldr	r3, [pc, #448]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1f0      	bne.n	80010f6 <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0308 	and.w	r3, r3, #8
 800111c:	2b00      	cmp	r3, #0
 800111e:	d03c      	beq.n	800119a <HAL_RCC_OscConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d01c      	beq.n	8001162 <HAL_RCC_OscConfig+0x41a>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001128:	4b68      	ldr	r3, [pc, #416]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 800112a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800112e:	4a67      	ldr	r2, [pc, #412]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001138:	f7ff fb00 	bl	800073c <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800113e:	e008      	b.n	8001152 <HAL_RCC_OscConfig+0x40a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001140:	f7ff fafc 	bl	800073c <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d901      	bls.n	8001152 <HAL_RCC_OscConfig+0x40a>
        {
          return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e21b      	b.n	800158a <HAL_RCC_OscConfig+0x842>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001152:	4b5e      	ldr	r3, [pc, #376]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 8001154:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0ef      	beq.n	8001140 <HAL_RCC_OscConfig+0x3f8>
 8001160:	e01b      	b.n	800119a <HAL_RCC_OscConfig+0x452>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001162:	4b5a      	ldr	r3, [pc, #360]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 8001164:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001168:	4a58      	ldr	r2, [pc, #352]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 800116a:	f023 0301 	bic.w	r3, r3, #1
 800116e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001172:	f7ff fae3 	bl	800073c <HAL_GetTick>
 8001176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001178:	e008      	b.n	800118c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800117a:	f7ff fadf 	bl	800073c <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e1fe      	b.n	800158a <HAL_RCC_OscConfig+0x842>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800118c:	4b4f      	ldr	r3, [pc, #316]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 800118e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1ef      	bne.n	800117a <HAL_RCC_OscConfig+0x432>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0304 	and.w	r3, r3, #4
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 80a6 	beq.w	80012f4 <HAL_RCC_OscConfig+0x5ac>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011a8:	2300      	movs	r3, #0
 80011aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80011ac:	4b47      	ldr	r3, [pc, #284]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 80011ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d10d      	bne.n	80011d4 <HAL_RCC_OscConfig+0x48c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011b8:	4b44      	ldr	r3, [pc, #272]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 80011ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011bc:	4a43      	ldr	r2, [pc, #268]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 80011be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c2:	6593      	str	r3, [r2, #88]	; 0x58
 80011c4:	4b41      	ldr	r3, [pc, #260]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 80011c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011d0:	2301      	movs	r3, #1
 80011d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011d4:	4b3e      	ldr	r3, [pc, #248]	; (80012d0 <HAL_RCC_OscConfig+0x588>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d118      	bne.n	8001212 <HAL_RCC_OscConfig+0x4ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011e0:	4b3b      	ldr	r3, [pc, #236]	; (80012d0 <HAL_RCC_OscConfig+0x588>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a3a      	ldr	r2, [pc, #232]	; (80012d0 <HAL_RCC_OscConfig+0x588>)
 80011e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ec:	f7ff faa6 	bl	800073c <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x4be>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011f4:	f7ff faa2 	bl	800073c <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x4be>
        {
          return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e1c1      	b.n	800158a <HAL_RCC_OscConfig+0x842>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001206:	4b32      	ldr	r3, [pc, #200]	; (80012d0 <HAL_RCC_OscConfig+0x588>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0f0      	beq.n	80011f4 <HAL_RCC_OscConfig+0x4ac>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d108      	bne.n	800122c <HAL_RCC_OscConfig+0x4e4>
 800121a:	4b2c      	ldr	r3, [pc, #176]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 800121c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001220:	4a2a      	ldr	r2, [pc, #168]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800122a:	e024      	b.n	8001276 <HAL_RCC_OscConfig+0x52e>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	2b05      	cmp	r3, #5
 8001232:	d110      	bne.n	8001256 <HAL_RCC_OscConfig+0x50e>
 8001234:	4b25      	ldr	r3, [pc, #148]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 8001236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800123a:	4a24      	ldr	r2, [pc, #144]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001244:	4b21      	ldr	r3, [pc, #132]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 8001246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800124a:	4a20      	ldr	r2, [pc, #128]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001254:	e00f      	b.n	8001276 <HAL_RCC_OscConfig+0x52e>
 8001256:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 8001258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800125c:	4a1b      	ldr	r2, [pc, #108]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 800125e:	f023 0301 	bic.w	r3, r3, #1
 8001262:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 8001268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800126c:	4a17      	ldr	r2, [pc, #92]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 800126e:	f023 0304 	bic.w	r3, r3, #4
 8001272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d016      	beq.n	80012ac <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800127e:	f7ff fa5d 	bl	800073c <HAL_GetTick>
 8001282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001284:	e00a      	b.n	800129c <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001286:	f7ff fa59 	bl	800073c <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	f241 3288 	movw	r2, #5000	; 0x1388
 8001294:	4293      	cmp	r3, r2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e176      	b.n	800158a <HAL_RCC_OscConfig+0x842>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800129c:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <HAL_RCC_OscConfig+0x584>)
 800129e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0ed      	beq.n	8001286 <HAL_RCC_OscConfig+0x53e>
 80012aa:	e01a      	b.n	80012e2 <HAL_RCC_OscConfig+0x59a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ac:	f7ff fa46 	bl	800073c <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012b2:	e00f      	b.n	80012d4 <HAL_RCC_OscConfig+0x58c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012b4:	f7ff fa42 	bl	800073c <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d906      	bls.n	80012d4 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e15f      	b.n	800158a <HAL_RCC_OscConfig+0x842>
 80012ca:	bf00      	nop
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012d4:	4baa      	ldr	r3, [pc, #680]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 80012d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1e8      	bne.n	80012b4 <HAL_RCC_OscConfig+0x56c>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012e2:	7ffb      	ldrb	r3, [r7, #31]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d105      	bne.n	80012f4 <HAL_RCC_OscConfig+0x5ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e8:	4ba5      	ldr	r3, [pc, #660]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 80012ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ec:	4aa4      	ldr	r2, [pc, #656]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 80012ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0320 	and.w	r3, r3, #32
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d03c      	beq.n	800137a <HAL_RCC_OscConfig+0x632>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001304:	2b00      	cmp	r3, #0
 8001306:	d01c      	beq.n	8001342 <HAL_RCC_OscConfig+0x5fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001308:	4b9d      	ldr	r3, [pc, #628]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 800130a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800130e:	4a9c      	ldr	r2, [pc, #624]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001318:	f7ff fa10 	bl	800073c <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x5ea>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001320:	f7ff fa0c 	bl	800073c <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x5ea>
        {
          return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e12b      	b.n	800158a <HAL_RCC_OscConfig+0x842>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001332:	4b93      	ldr	r3, [pc, #588]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 8001334:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d0ef      	beq.n	8001320 <HAL_RCC_OscConfig+0x5d8>
 8001340:	e01b      	b.n	800137a <HAL_RCC_OscConfig+0x632>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001342:	4b8f      	ldr	r3, [pc, #572]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 8001344:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001348:	4a8d      	ldr	r2, [pc, #564]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 800134a:	f023 0301 	bic.w	r3, r3, #1
 800134e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001352:	f7ff f9f3 	bl	800073c <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x624>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800135a:	f7ff f9ef 	bl	800073c <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x624>
        {
          return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e10e      	b.n	800158a <HAL_RCC_OscConfig+0x842>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800136c:	4b84      	ldr	r3, [pc, #528]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 800136e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1ef      	bne.n	800135a <HAL_RCC_OscConfig+0x612>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 8102 	beq.w	8001588 <HAL_RCC_OscConfig+0x840>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001388:	2b02      	cmp	r3, #2
 800138a:	f040 80c5 	bne.w	8001518 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800138e:	4b7c      	ldr	r3, [pc, #496]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	f003 0203 	and.w	r2, r3, #3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139e:	429a      	cmp	r2, r3
 80013a0:	d12c      	bne.n	80013fc <HAL_RCC_OscConfig+0x6b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ac:	3b01      	subs	r3, #1
 80013ae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d123      	bne.n	80013fc <HAL_RCC_OscConfig+0x6b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013be:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d11b      	bne.n	80013fc <HAL_RCC_OscConfig+0x6b4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ce:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d113      	bne.n	80013fc <HAL_RCC_OscConfig+0x6b4>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013de:	085b      	lsrs	r3, r3, #1
 80013e0:	3b01      	subs	r3, #1
 80013e2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d109      	bne.n	80013fc <HAL_RCC_OscConfig+0x6b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	085b      	lsrs	r3, r3, #1
 80013f4:	3b01      	subs	r3, #1
 80013f6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d067      	beq.n	80014cc <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	2b0c      	cmp	r3, #12
 8001400:	d062      	beq.n	80014c8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001402:	4b5f      	ldr	r3, [pc, #380]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_RCC_OscConfig+0x6ca>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e0bb      	b.n	800158a <HAL_RCC_OscConfig+0x842>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001412:	4b5b      	ldr	r3, [pc, #364]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a5a      	ldr	r2, [pc, #360]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 8001418:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800141c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800141e:	f7ff f98d 	bl	800073c <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001426:	f7ff f989 	bl	800073c <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e0a8      	b.n	800158a <HAL_RCC_OscConfig+0x842>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001438:	4b51      	ldr	r3, [pc, #324]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1f0      	bne.n	8001426 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001444:	4b4e      	ldr	r3, [pc, #312]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 8001446:	68da      	ldr	r2, [r3, #12]
 8001448:	4b4e      	ldr	r3, [pc, #312]	; (8001584 <HAL_RCC_OscConfig+0x83c>)
 800144a:	4013      	ands	r3, r2
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001454:	3a01      	subs	r2, #1
 8001456:	0112      	lsls	r2, r2, #4
 8001458:	4311      	orrs	r1, r2
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800145e:	0212      	lsls	r2, r2, #8
 8001460:	4311      	orrs	r1, r2
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001466:	0852      	lsrs	r2, r2, #1
 8001468:	3a01      	subs	r2, #1
 800146a:	0552      	lsls	r2, r2, #21
 800146c:	4311      	orrs	r1, r2
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001472:	0852      	lsrs	r2, r2, #1
 8001474:	3a01      	subs	r2, #1
 8001476:	0652      	lsls	r2, r2, #25
 8001478:	4311      	orrs	r1, r2
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800147e:	06d2      	lsls	r2, r2, #27
 8001480:	430a      	orrs	r2, r1
 8001482:	493f      	ldr	r1, [pc, #252]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 8001484:	4313      	orrs	r3, r2
 8001486:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001488:	4b3d      	ldr	r3, [pc, #244]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a3c      	ldr	r2, [pc, #240]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 800148e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001492:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001494:	4b3a      	ldr	r3, [pc, #232]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	4a39      	ldr	r2, [pc, #228]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 800149a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800149e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014a0:	f7ff f94c 	bl	800073c <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a8:	f7ff f948 	bl	800073c <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e067      	b.n	800158a <HAL_RCC_OscConfig+0x842>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014ba:	4b31      	ldr	r3, [pc, #196]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f0      	beq.n	80014a8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014c6:	e05f      	b.n	8001588 <HAL_RCC_OscConfig+0x840>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e05e      	b.n	800158a <HAL_RCC_OscConfig+0x842>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014cc:	4b2c      	ldr	r3, [pc, #176]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d157      	bne.n	8001588 <HAL_RCC_OscConfig+0x840>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80014d8:	4b29      	ldr	r3, [pc, #164]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a28      	ldr	r2, [pc, #160]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 80014de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014e4:	4b26      	ldr	r3, [pc, #152]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	4a25      	ldr	r2, [pc, #148]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 80014ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80014f0:	f7ff f924 	bl	800073c <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f8:	f7ff f920 	bl	800073c <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e03f      	b.n	800158a <HAL_RCC_OscConfig+0x842>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800150a:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0f0      	beq.n	80014f8 <HAL_RCC_OscConfig+0x7b0>
 8001516:	e037      	b.n	8001588 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	2b0c      	cmp	r3, #12
 800151c:	d02d      	beq.n	800157a <HAL_RCC_OscConfig+0x832>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800151e:	4b18      	ldr	r3, [pc, #96]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a17      	ldr	r2, [pc, #92]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 8001524:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001528:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d105      	bne.n	8001542 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001536:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	4a11      	ldr	r2, [pc, #68]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 800153c:	f023 0303 	bic.w	r3, r3, #3
 8001540:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001542:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	4a0e      	ldr	r2, [pc, #56]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 8001548:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800154c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001550:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001552:	f7ff f8f3 	bl	800073c <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x824>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800155a:	f7ff f8ef 	bl	800073c <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x824>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e00e      	b.n	800158a <HAL_RCC_OscConfig+0x842>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <HAL_RCC_OscConfig+0x838>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1f0      	bne.n	800155a <HAL_RCC_OscConfig+0x812>
 8001578:	e006      	b.n	8001588 <HAL_RCC_OscConfig+0x840>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e005      	b.n	800158a <HAL_RCC_OscConfig+0x842>
 800157e:	bf00      	nop
 8001580:	40021000 	.word	0x40021000
 8001584:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3720      	adds	r7, #32
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop

08001594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e0ce      	b.n	8001746 <HAL_RCC_ClockConfig+0x1b2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015a8:	4b69      	ldr	r3, [pc, #420]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d910      	bls.n	80015d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b6:	4b66      	ldr	r3, [pc, #408]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f023 0207 	bic.w	r2, r3, #7
 80015be:	4964      	ldr	r1, [pc, #400]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c6:	4b62      	ldr	r3, [pc, #392]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d001      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e0b6      	b.n	8001746 <HAL_RCC_ClockConfig+0x1b2>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d04c      	beq.n	800167e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	2b03      	cmp	r3, #3
 80015ea:	d107      	bne.n	80015fc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015ec:	4b59      	ldr	r3, [pc, #356]	; (8001754 <HAL_RCC_ClockConfig+0x1c0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d121      	bne.n	800163c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e0a4      	b.n	8001746 <HAL_RCC_ClockConfig+0x1b2>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b02      	cmp	r3, #2
 8001602:	d107      	bne.n	8001614 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001604:	4b53      	ldr	r3, [pc, #332]	; (8001754 <HAL_RCC_ClockConfig+0x1c0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d115      	bne.n	800163c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e098      	b.n	8001746 <HAL_RCC_ClockConfig+0x1b2>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d107      	bne.n	800162c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800161c:	4b4d      	ldr	r3, [pc, #308]	; (8001754 <HAL_RCC_ClockConfig+0x1c0>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d109      	bne.n	800163c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e08c      	b.n	8001746 <HAL_RCC_ClockConfig+0x1b2>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800162c:	4b49      	ldr	r3, [pc, #292]	; (8001754 <HAL_RCC_ClockConfig+0x1c0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e084      	b.n	8001746 <HAL_RCC_ClockConfig+0x1b2>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800163c:	4b45      	ldr	r3, [pc, #276]	; (8001754 <HAL_RCC_ClockConfig+0x1c0>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f023 0203 	bic.w	r2, r3, #3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	4942      	ldr	r1, [pc, #264]	; (8001754 <HAL_RCC_ClockConfig+0x1c0>)
 800164a:	4313      	orrs	r3, r2
 800164c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800164e:	f7ff f875 	bl	800073c <HAL_GetTick>
 8001652:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001654:	e00a      	b.n	800166c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001656:	f7ff f871 	bl	800073c <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	f241 3288 	movw	r2, #5000	; 0x1388
 8001664:	4293      	cmp	r3, r2
 8001666:	d901      	bls.n	800166c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e06c      	b.n	8001746 <HAL_RCC_ClockConfig+0x1b2>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166c:	4b39      	ldr	r3, [pc, #228]	; (8001754 <HAL_RCC_ClockConfig+0x1c0>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 020c 	and.w	r2, r3, #12
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	429a      	cmp	r2, r3
 800167c:	d1eb      	bne.n	8001656 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d008      	beq.n	800169c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800168a:	4b32      	ldr	r3, [pc, #200]	; (8001754 <HAL_RCC_ClockConfig+0x1c0>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	492f      	ldr	r1, [pc, #188]	; (8001754 <HAL_RCC_ClockConfig+0x1c0>)
 8001698:	4313      	orrs	r3, r2
 800169a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800169c:	4b2c      	ldr	r3, [pc, #176]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d210      	bcs.n	80016cc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016aa:	4b29      	ldr	r3, [pc, #164]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f023 0207 	bic.w	r2, r3, #7
 80016b2:	4927      	ldr	r1, [pc, #156]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ba:	4b25      	ldr	r3, [pc, #148]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d001      	beq.n	80016cc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e03c      	b.n	8001746 <HAL_RCC_ClockConfig+0x1b2>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d008      	beq.n	80016ea <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016d8:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <HAL_RCC_ClockConfig+0x1c0>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	491b      	ldr	r1, [pc, #108]	; (8001754 <HAL_RCC_ClockConfig+0x1c0>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d009      	beq.n	800170a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016f6:	4b17      	ldr	r3, [pc, #92]	; (8001754 <HAL_RCC_ClockConfig+0x1c0>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	4913      	ldr	r1, [pc, #76]	; (8001754 <HAL_RCC_ClockConfig+0x1c0>)
 8001706:	4313      	orrs	r3, r2
 8001708:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800170a:	f000 f82b 	bl	8001764 <HAL_RCC_GetSysClockFreq>
 800170e:	4601      	mov	r1, r0
 8001710:	4b10      	ldr	r3, [pc, #64]	; (8001754 <HAL_RCC_ClockConfig+0x1c0>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	091b      	lsrs	r3, r3, #4
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	4a0f      	ldr	r2, [pc, #60]	; (8001758 <HAL_RCC_ClockConfig+0x1c4>)
 800171c:	f859 2002 	ldr.w	r2, [r9, r2]
 8001720:	5cd3      	ldrb	r3, [r2, r3]
 8001722:	f003 031f 	and.w	r3, r3, #31
 8001726:	fa21 f303 	lsr.w	r3, r1, r3
 800172a:	4a0c      	ldr	r2, [pc, #48]	; (800175c <HAL_RCC_ClockConfig+0x1c8>)
 800172c:	f859 2002 	ldr.w	r2, [r9, r2]
 8001730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <HAL_RCC_ClockConfig+0x1cc>)
 8001734:	f859 3003 	ldr.w	r3, [r9, r3]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe ffa0 	bl	8000680 <HAL_InitTick>
 8001740:	4603      	mov	r3, r0
 8001742:	72fb      	strb	r3, [r7, #11]

  return status;
 8001744:	7afb      	ldrb	r3, [r7, #11]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40022000 	.word	0x40022000
 8001754:	40021000 	.word	0x40021000
 8001758:	00000014 	.word	0x00000014
 800175c:	00000004 	.word	0x00000004
 8001760:	00000010 	.word	0x00000010

08001764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001764:	b480      	push	{r7}
 8001766:	b089      	sub	sp, #36	; 0x24
 8001768:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
 800176e:	2300      	movs	r3, #0
 8001770:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001772:	4b3f      	ldr	r3, [pc, #252]	; (8001870 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 030c 	and.w	r3, r3, #12
 800177a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800177c:	4b3c      	ldr	r3, [pc, #240]	; (8001870 <HAL_RCC_GetSysClockFreq+0x10c>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	f003 0303 	and.w	r3, r3, #3
 8001784:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <HAL_RCC_GetSysClockFreq+0x34>
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	2b0c      	cmp	r3, #12
 8001790:	d124      	bne.n	80017dc <HAL_RCC_GetSysClockFreq+0x78>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d121      	bne.n	80017dc <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001798:	4b35      	ldr	r3, [pc, #212]	; (8001870 <HAL_RCC_GetSysClockFreq+0x10c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0308 	and.w	r3, r3, #8
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d107      	bne.n	80017b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80017a4:	4b32      	ldr	r3, [pc, #200]	; (8001870 <HAL_RCC_GetSysClockFreq+0x10c>)
 80017a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017aa:	0a1b      	lsrs	r3, r3, #8
 80017ac:	f003 030f 	and.w	r3, r3, #15
 80017b0:	61fb      	str	r3, [r7, #28]
 80017b2:	e005      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80017b4:	4b2e      	ldr	r3, [pc, #184]	; (8001870 <HAL_RCC_GetSysClockFreq+0x10c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	091b      	lsrs	r3, r3, #4
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80017c0:	4b2e      	ldr	r3, [pc, #184]	; (800187c <HAL_RCC_GetSysClockFreq+0x118>)
 80017c2:	f859 3003 	ldr.w	r3, [r9, r3]
 80017c6:	461a      	mov	r2, r3
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ce:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10d      	bne.n	80017f2 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017da:	e00a      	b.n	80017f2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	2b04      	cmp	r3, #4
 80017e0:	d102      	bne.n	80017e8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80017e2:	4b24      	ldr	r3, [pc, #144]	; (8001874 <HAL_RCC_GetSysClockFreq+0x110>)
 80017e4:	61bb      	str	r3, [r7, #24]
 80017e6:	e004      	b.n	80017f2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	2b08      	cmp	r3, #8
 80017ec:	d101      	bne.n	80017f2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017ee:	4b22      	ldr	r3, [pc, #136]	; (8001878 <HAL_RCC_GetSysClockFreq+0x114>)
 80017f0:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	2b0c      	cmp	r3, #12
 80017f6:	d134      	bne.n	8001862 <HAL_RCC_GetSysClockFreq+0xfe>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017f8:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <HAL_RCC_GetSysClockFreq+0x10c>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	2b02      	cmp	r3, #2
 8001806:	d003      	beq.n	8001810 <HAL_RCC_GetSysClockFreq+0xac>
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2b03      	cmp	r3, #3
 800180c:	d003      	beq.n	8001816 <HAL_RCC_GetSysClockFreq+0xb2>
 800180e:	e005      	b.n	800181c <HAL_RCC_GetSysClockFreq+0xb8>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001810:	4b18      	ldr	r3, [pc, #96]	; (8001874 <HAL_RCC_GetSysClockFreq+0x110>)
 8001812:	617b      	str	r3, [r7, #20]
      break;
 8001814:	e005      	b.n	8001822 <HAL_RCC_GetSysClockFreq+0xbe>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001816:	4b18      	ldr	r3, [pc, #96]	; (8001878 <HAL_RCC_GetSysClockFreq+0x114>)
 8001818:	617b      	str	r3, [r7, #20]
      break;
 800181a:	e002      	b.n	8001822 <HAL_RCC_GetSysClockFreq+0xbe>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	617b      	str	r3, [r7, #20]
      break;
 8001820:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001822:	4b13      	ldr	r3, [pc, #76]	; (8001870 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	091b      	lsrs	r3, r3, #4
 8001828:	f003 0307 	and.w	r3, r3, #7
 800182c:	3301      	adds	r3, #1
 800182e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001830:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	fb02 f203 	mul.w	r2, r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	fbb2 f3f3 	udiv	r3, r2, r3
 8001846:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001848:	4b09      	ldr	r3, [pc, #36]	; (8001870 <HAL_RCC_GetSysClockFreq+0x10c>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	0e5b      	lsrs	r3, r3, #25
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	3301      	adds	r3, #1
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001860:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001862:	69bb      	ldr	r3, [r7, #24]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3724      	adds	r7, #36	; 0x24
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	40021000 	.word	0x40021000
 8001874:	00f42400 	.word	0x00f42400
 8001878:	007a1200 	.word	0x007a1200
 800187c:	00000000 	.word	0x00000000

08001880 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001888:	2300      	movs	r3, #0
 800188a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800188c:	4b2a      	ldr	r3, [pc, #168]	; (8001938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800188e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001898:	f7ff f9f0 	bl	8000c7c <HAL_PWREx_GetVoltageRange>
 800189c:	6178      	str	r0, [r7, #20]
 800189e:	e014      	b.n	80018ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80018a0:	4b25      	ldr	r3, [pc, #148]	; (8001938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a4:	4a24      	ldr	r2, [pc, #144]	; (8001938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018aa:	6593      	str	r3, [r2, #88]	; 0x58
 80018ac:	4b22      	ldr	r3, [pc, #136]	; (8001938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80018b8:	f7ff f9e0 	bl	8000c7c <HAL_PWREx_GetVoltageRange>
 80018bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80018be:	4b1e      	ldr	r3, [pc, #120]	; (8001938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c2:	4a1d      	ldr	r2, [pc, #116]	; (8001938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018d0:	d10b      	bne.n	80018ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b80      	cmp	r3, #128	; 0x80
 80018d6:	d919      	bls.n	800190c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2ba0      	cmp	r3, #160	; 0xa0
 80018dc:	d902      	bls.n	80018e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018de:	2302      	movs	r3, #2
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	e013      	b.n	800190c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018e4:	2301      	movs	r3, #1
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	e010      	b.n	800190c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b80      	cmp	r3, #128	; 0x80
 80018ee:	d902      	bls.n	80018f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80018f0:	2303      	movs	r3, #3
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	e00a      	b.n	800190c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b80      	cmp	r3, #128	; 0x80
 80018fa:	d102      	bne.n	8001902 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018fc:	2302      	movs	r3, #2
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	e004      	b.n	800190c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b70      	cmp	r3, #112	; 0x70
 8001906:	d101      	bne.n	800190c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001908:	2301      	movs	r3, #1
 800190a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f023 0207 	bic.w	r2, r3, #7
 8001914:	4909      	ldr	r1, [pc, #36]	; (800193c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800191c:	4b07      	ldr	r3, [pc, #28]	; (800193c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	429a      	cmp	r2, r3
 8001928:	d001      	beq.n	800192e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40021000 	.word	0x40021000
 800193c:	40022000 	.word	0x40022000

08001940 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a04      	ldr	r2, [pc, #16]	; (800195c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800194a:	f043 0304 	orr.w	r3, r3, #4
 800194e:	6013      	str	r3, [r2, #0]
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	40021000 	.word	0x40021000

08001960 <memset>:
 8001960:	4402      	add	r2, r0
 8001962:	4603      	mov	r3, r0
 8001964:	4293      	cmp	r3, r2
 8001966:	d100      	bne.n	800196a <memset+0xa>
 8001968:	4770      	bx	lr
 800196a:	f803 1b01 	strb.w	r1, [r3], #1
 800196e:	e7f9      	b.n	8001964 <memset+0x4>

08001970 <_init>:
 8001970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001972:	bf00      	nop
 8001974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001976:	bc08      	pop	{r3}
 8001978:	469e      	mov	lr, r3
 800197a:	4770      	bx	lr

0800197c <_fini>:
 800197c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800197e:	bf00      	nop
 8001980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001982:	bc08      	pop	{r3}
 8001984:	469e      	mov	lr, r3
 8001986:	4770      	bx	lr
